{"version":3,"file":"static/js/517.b41f0b42.chunk.js","mappings":"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","sources":["svgs/filled/FilledComment.tsx","components/post/PostImage.tsx","pages/profile/components/posts/PostsContainer.tsx","pages/profile/hooks/useSavedPostsData.ts","pages/profile/components/posts/SavedPosts.tsx","svgs/filled/FilledHeart.tsx"],"sourcesContent":["import React from 'react'\r\n\r\nconst FilledComment: React.FC<{ styles: string }> = ({ styles }) => {\r\n    return (\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" className={styles} viewBox=\"0 0 20 20\" fill=\"currentColor\">\r\n            <path fillRule=\"evenodd\" d=\"M18 10c0 3.866-3.582 7-8 7a8.841 8.841 0 01-4.083-.98L2 17l1.338-3.123C2.493 12.767 2 11.434 2 10c0-3.866 3.582-7 8-7s8 3.134 8 7zM7 9H5v2h2V9zm8 0h-2v2h2V9zM9 9h2v2H9V9z\" clipRule=\"evenodd\" />\r\n        </svg>\r\n    )\r\n}\r\n\r\nexport default FilledComment","import React, { useCallback, useState } from 'react'\r\nimport { useNavigate } from 'react-router-dom';\r\nimport ProfileRoutes from 'constants/profile-routes';\r\nimport FilledComment from 'svgs/filled/FilledComment';\r\nimport FilledHeart from 'svgs/filled/FilledHeart';\r\nimport PostType from 'types/postType'\r\n\r\nconst PostImage: React.FC<PostType> = React.memo(({ postImage, postId, likes, comments, }) => {\r\n    const [isHovered, setIsHovered] = useState<boolean>(false);\r\n    const navigate = useNavigate();\r\n\r\n    const makeHoveredTrue = useCallback(() => {\r\n        setIsHovered(true)\r\n    }, [])\r\n\r\n    const makeHoveredFalse = useCallback(() => {\r\n        setIsHovered(false)\r\n    }, [])\r\n\r\n    const navigateToPost = useCallback(() => {\r\n        navigate(ProfileRoutes.POST + postId)\r\n    }, [postId])\r\n\r\n    return (\r\n        <div \r\n            className=\"relative z-10 w-full h-full aspect-square cursor-pointer rounded-sm\"\r\n            onMouseEnter={makeHoveredTrue}\r\n            onMouseLeave={makeHoveredFalse}\r\n            onClick={navigateToPost}\r\n        >\r\n            <img\r\n                src={postImage}\r\n                className={`w-full h-full object-cover rounded-sm ${isHovered && \"brightness-75\"}`}\r\n            />\r\n            {\r\n                isHovered ?\r\n                    <div className=\"absolute top-[50%] left-[50%] translate-y-[-50%] translate-x-[-50%] flex gap-4\">\r\n                        <div className=\"flex gap-1 items-center\">\r\n                            <FilledHeart styles=\"h-6 w-6 text-white\" />\r\n                            <p className=\"text-lg font-medium text-white\">{likes.length}</p>\r\n                        </div>\r\n                        <div className=\"flex gap-1 items-center\">\r\n                            <FilledComment styles=\"h-6 w-6 text-white\" />\r\n                            <p className=\"text-lg font-medium text-white\">{comments.length}</p>\r\n                        </div>\r\n                    </div> :\r\n                    null\r\n            }\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default PostImage","import React, { useMemo } from 'react'\r\nimport { Outlet } from 'react-router-dom'\r\nimport PostType from 'types/postType'\r\nimport PostImage from 'components/post/PostImage'\r\n\r\nconst PostsContainer: React.FC<{ posts: PostType[], changePosts?: any }> = React.memo(({ posts, changePosts }) => {\r\n    const postsImageElements = useMemo(() => [...posts].reverse().map(post => (\r\n        <PostImage {...post} key={post.postId} />\r\n    )), [posts])\r\n\r\n    return (\r\n        <>\r\n            {\r\n                posts.length === 0 ?\r\n                    <div className=\"w-full h-full flex items-center justify-center mt-8\">\r\n                        <div className=\"flex flex-col gap-4 items-center\">\r\n                            <img\r\n                                src={process.env.PUBLIC_URL + \"/images/camera.jpg\"}\r\n                                className=\"w-8\"\r\n                            />\r\n                            <p className=\"text-3xl font-extralight\">No Posts Yet</p>\r\n                        </div>\r\n                    </div> :\r\n                    <div className=\"w-full grid grid-cols-3 auto-rows-fr gap-1 sm:gap-6 sm:w-3/4 lg:w-2/3 mt-2 max-w-[1000px]\">\r\n                        {postsImageElements}\r\n                    </div>\r\n            }\r\n            <Outlet context={{ posts, changePosts }} />\r\n        </>\r\n    )\r\n})\r\n\r\nexport default PostsContainer","import { db } from \"firebase-setup/firebaseConfig\";\r\nimport { doc, getDoc } from \"firebase/firestore\";\r\nimport { useEffect, useState } from \"react\";\r\nimport PostType from \"types/postType\";\r\nimport SavedPostType from \"types/savePostType\";\r\nimport UserState from \"types/userStateType\";\r\n\r\ntype UseSavedPostsDataType = (savedPosts: SavedPostType[]) => {\r\n    savedPostsData: PostType[],\r\n    setSavedPostsData: React.Dispatch<React.SetStateAction<PostType[]>>\r\n}\r\n\r\nconst useSavedPostsData: UseSavedPostsDataType = (savedPosts) => {\r\n    const [savedPostsData, setSavedPostsData] = useState<PostType[]>([]);\r\n\r\n    useEffect(() => {\r\n        const getSavedPosts = async () => {\r\n            await Promise.all(savedPosts.map(async savedPost => {\r\n                const savedUserData = await getDoc(doc(db, \"users\", savedPost.fromId))\r\n                const savedPostData = (savedUserData.data() as UserState).posts.find(post => post.postId === savedPost.postId)\r\n\r\n                if (savedPostData) {\r\n                    setSavedPostsData(prevPosts => [...prevPosts, savedPostData])\r\n                }\r\n            }));\r\n        }\r\n\r\n        getSavedPosts();\r\n    }, [])\r\n\r\n    return { savedPostsData, setSavedPostsData }\r\n}\r\n\r\nexport default useSavedPostsData","import React from 'react'\r\nimport SavedPostType from 'types/savePostType'\r\nimport PostsContainer from './PostsContainer';\r\nimport useSavedPostsData from 'pages/profile/hooks/useSavedPostsData';\r\n\r\nconst SavedPosts: React.FC<{ savedPosts: SavedPostType[] }> = React.memo(({ savedPosts }) => {\r\n    const { savedPostsData, setSavedPostsData } = useSavedPostsData(savedPosts)\r\n\r\n    return (\r\n        savedPostsData.length ?\r\n            <PostsContainer posts={savedPostsData} changePosts={setSavedPostsData}/> :\r\n            <div className=\"w-[300px] sm:w-[350px] h-full flex items-center justify-center mt-8 text-center\">\r\n                <div className=\"flex flex-col items-center\">\r\n                    <img\r\n                        src={process.env.PUBLIC_URL + \"/images/saved.jpg\"}\r\n                        className=\"w-20\"\r\n                    />\r\n                    <p className=\"text-3xl font-extralight\">Save</p>\r\n                    <p className=\"text-sm mt-3\">\r\n                        Save photos and videos that you want to see again. No one is notified, and only you can see what you've saved.\r\n                    </p>\r\n                </div>\r\n            </div>\r\n    )\r\n})\r\n\r\nexport default SavedPosts","import React from 'react'\r\n\r\nconst FilledHeart: React.FC<{ styles: string }> = ({ styles }) => {\r\n    return (\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" className={styles} viewBox=\"0 0 20 20\" fill=\"currentColor\">\r\n            <path fillRule=\"evenodd\" d=\"M3.172 5.172a4 4 0 015.656 0L10 6.343l1.172-1.171a4 4 0 115.656 5.656L10 17.657l-6.828-6.829a4 4 0 010-5.656z\" clipRule=\"evenodd\" />\r\n        </svg>\r\n    )\r\n}\r\n\r\nexport default FilledHeart"],"names":["styles","xmlns","className","viewBox","fill","fillRule","d","clipRule","React","postImage","postId","likes","comments","useState","isHovered","setIsHovered","navigate","useNavigate","makeHoveredTrue","useCallback","makeHoveredFalse","navigateToPost","ProfileRoutes","onMouseEnter","onMouseLeave","onClick","src","FilledHeart","length","PostsContainer","posts","changePosts","postsImageElements","useMemo","reverse","map","post","key","process","context","savedPosts","savedPostsData","setSavedPostsData","useEffect","getSavedPosts","Promise","all","savedPost","getDoc","doc","db","fromId","savedUserData","savedPostData","data","find","prevPosts","useSavedPostsData"],"sourceRoot":""}