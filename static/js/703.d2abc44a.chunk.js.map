{"version":3,"file":"static/js/703.d2abc44a.chunk.js","mappings":"4NAiFA,IA/DoB,WAChB,IAAMA,GAAaC,EAAAA,EAAAA,IAAe,SAAAC,GAAK,OAAIA,EAAMF,WAAWG,QACtDC,GAAWC,EAAAA,EAAAA,MAEXC,EAAc,mCAAG,sGAASC,EAAT,EAASA,aAAcC,EAAvB,EAAuBA,WACpCC,EAAST,EAAWU,OAAS,IAAMH,EACnCI,EAAiBJ,EAAe,IAAMP,EAAWU,OAFpC,UAIIE,EAAAA,EAAAA,KAAQC,EAAAA,EAAAA,IAAWC,EAAAA,GAAI,UAJ3B,UAIbC,EAJa,OAMfC,EAA2B,GAC/BD,EAASE,SAAQ,SAAAC,GACb,IAAMC,EAAYD,EAAIE,OAAOC,YAAc,IAAMH,EAAIE,OAAOE,aACxDH,IAAcV,EAKdU,IAAcR,IACdK,EAAmBL,GALnBK,EAAmBP,KAUK,IAA5BO,EAAiBO,OApBF,wBAqBZf,GACCA,EAAWQ,GAEfZ,EAASoB,EAAAA,EAAAA,OAAqB,IAAMR,GAxBrB,6CA4BbS,EAAAA,EAAAA,KAAOP,EAAAA,EAAAA,IAAIJ,EAAAA,GAAI,QAASL,GAAS,CACnCY,YAAarB,EAAWU,OACxBY,aAAcf,EACdmB,SAAU,GACVC,YAAa,CACTC,KAAM,GACNlB,OAAQ,IAEZmB,YAAY,IAAIC,MAAOC,YApCR,QAuChBvB,GACCA,EAAWC,GAEfL,EAASoB,EAAAA,EAAAA,OAAqB,IAAMf,GA1CjB,4CAAH,sDA6CduB,EAAc,mCAAG,+FAASN,EAAT,EAASA,SAAUjB,EAAnB,EAAmBA,QACtCwB,EAAAA,EAAAA,KAAUf,EAAAA,EAAAA,IAAIJ,EAAAA,GAAI,QAASL,IADR,UAGGiB,GAHH,8DAGRQ,EAHQ,SAILC,MAAMZ,OAJD,wBAKTa,GAAWC,EAAAA,EAAAA,IAAIC,EAAAA,GAASJ,EAAQC,OALvB,WAMTI,EAAAA,EAAAA,IAAaH,GANJ,uMAAH,sDAWpB,MAAO,CAAE9B,eAAAA,EAAgB0B,eAAAA,K,uGCjEvBQ,EAAc,CAChBC,SAAU,GACVC,aAAc,GACdhC,OAAQ,IAmBZ,IAhBqC,SAACiC,GAClC,OAAgCC,EAAAA,EAAAA,UAAmBJ,GAAnD,eAAOK,EAAP,KAAiBC,EAAjB,KAYA,OAVAC,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAO,mCAAG,qGACQC,EAAAA,EAAAA,KAAO/B,EAAAA,EAAAA,IAAIJ,EAAAA,GAAI,QAAS6B,IADhC,OACNxC,EADM,OAC0CiB,OACtD0B,GAAY,UAAK3C,IAFL,2CAAH,qDAKb2C,EAAYN,GACZQ,MACD,CAACL,IAEGE,I,kBCRX,IAxBwB,SAACK,GACrB,IACMC,EAAU,IAAIrB,MAAO,IAAIA,MAAOC,UAAYmB,GAE5CE,EAAUD,EAAQE,aAClBC,EAAQC,KAAKC,IAAID,KAAKE,MAAON,EAAQpB,UAAY,IAAO,OACxD2B,EAAOJ,EAAQ,IAAMA,EAAQ,IAAIK,QAAQ,GAAK,EAC9CC,EAAQF,EAAO,GAAKA,EAAiB,GAAGC,QAAQ,GAAK,EACrDE,EAASH,EAAO,IAAMA,EAAgB,IAAIC,QAAQ,GAAK,EACvDG,EAAQD,EAAS,IAAMA,EAAmB,IAAIF,QAAQ,GAAK,EAG3DI,EAAeD,GAASD,GAAUD,GAASF,GAAQJ,GAASF,IAFtC,IAAZA,EAAgB,MAAQ,GAWxC,OARqBW,IAAgBD,GAASC,EAAYC,WAAa,SAC/DD,IAAgBF,GAAUE,EAAYC,WAAa,UACnDD,IAAgBH,GAASG,EAAYC,WAAa,SAClDD,IAAgBL,GAAQK,EAAYC,WAAa,QACjDD,IAAgBT,GAASS,EAAYC,WAAa,SAClDD,IAAgBX,GAAWW,EAAYC,WAAa,YACrD,Q,mMCiHX,EA3H8DC,EAAAA,MAAW,YAAqB,IAAlBzD,EAAiB,EAAjBA,WACpER,GAAaC,EAAAA,EAAAA,IAAe,SAAAC,GAAK,OAAIA,EAAMF,WAAWG,QAE5D,GAAwCyC,EAAAA,EAAAA,UAAiB,IAAzD,eAAOsB,EAAP,KAAqBC,EAArB,KACA,GAAsCvB,EAAAA,EAAAA,UAA2B,IAAjE,eAAOwB,EAAP,KAAoBC,EAApB,KACA,GAA0CzB,EAAAA,EAAAA,UAAsB,IAAhE,eAAO0B,EAAP,KAAsBC,EAAtB,KAEQjE,GAAmBkE,EAAAA,EAAAA,KAAnBlE,eAEFmE,GAAWC,EAAAA,EAAAA,QAAyB,OAE1C3B,EAAAA,EAAAA,YAAU,WACR,IAAM4B,EAAUC,YAAU,iBAAC,+FACnBC,EAAAA,EAAAA,GAASX,EAAcK,GADJ,OAEzBA,GAAiB,SAAAO,GAAS,OAAIA,EAAUC,QAAO,SAAA5E,GAAI,OAAIA,EAAKsC,WAAazC,EAAWyC,eAF3D,2CAGxB,KAEH,OAAO,kBAAMuC,aAAaL,MACzB,CAACT,IAEJ,IAAMe,GAAoBC,EAAAA,EAAAA,cAAY,SAACC,GACrCd,GAAe,SAAAS,GAAS,OAAIA,EAAUC,QAAO,SAAA5E,GAAI,OAAIA,EAAKsC,WAAa0C,EAAW1C,eACzD,OAArBgC,EAASW,SACXX,EAASW,QAAQC,UAElB,CAACZ,EAASW,UAEPE,GAAsBC,EAAAA,EAAAA,UAAQ,kBAAMnB,EAAYoB,KAAI,SAAAL,GAAU,OAClE,gBACEM,UAAU,+BADZ,UAIE,oBACEA,UAAU,aACVC,QAAS,kBAAMT,EAAkBE,IAFnC,WAIE,cAAGM,UAAU,yBAAb,SAAuCN,EAAW1C,YAClD,SAACkD,EAAA,EAAD,CACEC,OAAO,8BARNT,EAAWzE,aAYhB,CAAC0D,EAAaK,IAiBZoB,GAAwBN,EAAAA,EAAAA,UAAQ,kBAAMjB,EAAckB,KAAI,SAAAtE,GAAG,OAAI,SAAC4E,EAAA,EAAD,CACnEC,cAAe,kBAhBK,SAAC7E,GACrBmD,GAAe,SAAAS,GAAS,wBAAQA,GAAR,CAAmB5D,OAC3CiD,EAAgB,IACS,OAArBM,EAASW,SACXX,EAASW,QAAQC,QAYEU,CAAc7E,IACnC8E,mBAAoB,kBATK,SAAC9E,GAC1BmD,GAAe,SAAAS,GAAS,OAAIA,EAAUC,QAAO,SAAA5E,GAAI,OAAIA,EAAKsC,WAAavB,EAAIuB,eAClD,OAArBgC,EAASW,SACXX,EAASW,QAAQC,QAMOW,CAAmB9E,IAC7C+E,aAAc7B,EAAY8B,MAAK,SAAA/F,GAAI,OAAIA,EAAKsC,WAAavB,EAAIuB,YAC7DC,aAAcxB,EAAIwB,aAClBD,SAAUvB,EAAIuB,SACd0D,SAAUjF,EAAIiF,SACdzF,OAAQQ,EAAIR,QACPQ,EAAIR,aACN,CAAC4D,EAAeF,IAEfgC,GAAalB,EAAAA,EAAAA,cAAY,WAC7Bd,EAAYnD,SAAQ,SAAAd,GAAI,OAAIG,EAAe,CAAEC,aAAcJ,EAAKO,OAAQF,WAAYA,SACnF,CAAC4D,IAEEiC,GAAqBnB,EAAAA,EAAAA,cAAY,SAACoB,GACtCnC,EAAgBmC,EAAMC,OAAOC,SAC5B,IAEH,OACE,iCACE,iBAAKf,UAAU,8EAAf,WACE,mBACEA,UAAU,kBACVC,QAASlF,EAFX,UAIE,SAACmF,EAAA,EAAD,CACEC,OAAO,eAGX,wCACA,mBACEH,UAAS,qCAAuD,IAAvBrB,EAAY7C,OAAe,gBAAkB,iBACtFkF,SAAiC,IAAvBrC,EAAY7C,OACtBmE,QAASU,EAHX,UAKE,sCAGJ,iBAAKX,UAAU,2DAAf,WACE,cAAGA,UAAU,uBAAb,kBACA,iBAAKA,UAAU,gFAAf,UACGH,GACD,kBACEG,UAAU,8GACViB,KAAK,OACLC,YAAY,YACZH,MAAOtC,EACP0C,SAAUP,EACVhE,IAAKoC,WAIX,gBAAKgB,UAAU,gDAAf,SAEKnB,EAAc/C,OAEbsE,GADA,cAAGJ,UAAU,gCAAb,kCCtGZ,EApB4DxB,EAAAA,MAAW,YAAoB,IAAjB4C,EAAgB,EAAhBA,UACtE,OACI,iBAAKpB,UAAU,gEAAf,WACI,gBACIqB,IAAKC,qCACLtB,UAAU,sBACVuB,IAAI,YAER,cAAGvB,UAAU,qBAAb,4BACA,cAAGA,UAAU,wBAAb,qEACA,mBACIA,UAAU,2IACVC,QAASmB,EAFb,gC,QCFZ,EARuB,WACnB,OACI,gBAAKI,MAAM,6BAA6BxB,UAAU,kCAAkCyB,KAAK,OAAOC,QAAQ,YAAYC,OAAO,eAAeC,YAAa,EAAvJ,UACI,iBAAMC,cAAc,QAAQC,eAAe,QAAQC,EAAE,8H,mBCgEjE,EArD0CvD,EAAAA,MAAW,YAAkD,IAA/CvD,EAA8C,EAA9CA,OAAQD,EAAsC,EAAtCA,OAAQkB,EAA8B,EAA9BA,YAAaE,EAAiB,EAAjBA,WAC3EzB,GAAWC,EAAAA,EAAAA,MACDoH,GAAcC,EAAAA,EAAAA,MAAtBjH,OAEFoC,GAAW8E,EAAAA,EAAAA,GAAYjH,GAEvBkH,GAAe1C,EAAAA,EAAAA,cAAY,WAC7B,IAAIhC,GAAO2E,EAAAA,EAAAA,GAAgBhG,GAC3B,MAAgB,QAATqB,EAAiBA,EAAOA,EAAK4E,MAAM,KAAK,GAAK5E,EAAK4E,MAAM,KAAK,GAAG,KACxE,CAACjG,IAEEkG,GAAiB7C,EAAAA,EAAAA,cAAY,WAC/B9E,EAASoB,EAAAA,EAAAA,OAAqB,IAAMf,KACrC,CAACA,IAEJ,OACI,mBACIgF,UAAS,+DAA0DgC,IAAchH,GAAU,QAC3FiF,QAASqC,EAFb,UAII,iBAAKtC,UAAU,sDAAf,WACI,gBACIqB,IACIjE,EAASH,aAAanB,OAClBsB,EAASH,aACTqE,kDAERtB,UAAU,iDAEd,iBAAKA,UAAU,yCAAf,WACI,cAAGA,UAAU,2CAAb,SAAyD5C,EAASJ,YAClE,iBAAKgD,UAAU,aAAf,WACI,cAAGA,UAAU,sDAAb,mBACQ9D,EAAYjB,SAAWA,GAAUiB,EAAYC,KAAKL,OAAS,OAAS,QAE5E,cAAGkE,UAAU,+CAAb,SAA6D9D,EAAYC,OAEvC,IAA9BD,EAAYjB,OAAOa,QACf,iCACI,cAAGkE,UAAU,wBAAb,qBACA,cAAGA,UAAU,wBAAb,SACKmC,SAGT,mB,8BCXhC,EAzC+B,SAACnH,GAC5B,IAAMuH,GAAa/H,EAAAA,EAAAA,IAAe,SAAAC,GAAK,OAAIA,EAAMF,WAAWG,QAC5D,GAA0ByC,EAAAA,EAAAA,UAAsB,IAAhD,eAAOqF,EAAP,KAAcC,EAAd,KAoCA,OAlCAnF,EAAAA,EAAAA,YAAU,WACN,IAAMoF,EAAQ,mCAAG,uGACPC,GAAWvH,EAAAA,EAAAA,IAAWC,EAAAA,GAAI,SAC1BuH,GAAKC,EAAAA,EAAAA,IAAMF,GAAUG,EAAAA,EAAAA,IAAM,cAAe,KAAMP,EAAWtH,SAC3D8H,GAAKF,EAAAA,EAAAA,IAAMF,GAAUG,EAAAA,EAAAA,IAAM,eAAgB,KAAMP,EAAWtH,SAHrD,UAKgBE,EAAAA,EAAAA,IAAQyH,GALxB,cAKPI,EALO,iBAMgB7H,EAAAA,EAAAA,IAAQ4H,GANxB,OAMPE,EANO,OAOPC,EAAgBF,EAAeG,KAChCpD,KAAI,SAAAtE,GAAG,OAAIA,EAAIE,UACfyH,OAAOH,EAAeE,KAAKpD,KAAI,SAAAtE,GAAG,OAAIA,EAAIE,WAEzC0H,EAAYH,EAAcnD,KAAI,SAAAtE,GAChC,MAAQ,CACJG,YAAaH,EAAIG,YACjBC,aAAcJ,EAAII,aAClBI,SAAUR,EAAI6H,UACdpH,YAAaT,EAAIS,YACjBE,WAAYX,EAAIW,eAIxBqG,EAASY,EAAUE,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAErH,WAAaoH,EAAEpH,eArBtC,4CAAH,sDAwBdsH,EAAAA,EAAAA,KAAWb,EAAAA,EAAAA,KAAMzH,EAAAA,EAAAA,IAAWC,EAAAA,GAAI,UAAUyH,EAAAA,EAAAA,IAAM,cAAe,KAAMP,EAAWtH,UAAtE,iBAAgF,8FAChFyH,IADgF,6CAI1FgB,EAAAA,EAAAA,KAAWb,EAAAA,EAAAA,KAAMzH,EAAAA,EAAAA,IAAWC,EAAAA,GAAI,UAAUyH,EAAAA,EAAAA,IAAM,eAAgB,KAAMP,EAAWtH,UAAvE,iBAAiF,8FACjFyH,IADiF,8CAG5F,CAACH,EAAWtH,OAAQD,IAEhBwH,GC6BX,EAlE0DhE,EAAAA,MAAW,YAAoB,IAAjB4C,EAAgB,EAAhBA,UAC9DmB,GAAa/H,EAAAA,EAAAA,IAAe,SAAAC,GAAK,OAAIA,EAAMF,WAAWG,QACtDC,GAAWC,EAAAA,EAAAA,MACTI,GAAWiH,EAAAA,EAAAA,MAAXjH,OAEFwH,EAAQmB,EAAS3I,GAEjB4I,GAAoBnE,EAAAA,EAAAA,cAAY,WAElC,IADA,IAAMoE,EAAY,GACTC,EAAI,EAAGA,EAAI,EAAGA,IACnBD,EAAUE,MACN,SAACC,EAAA,EAAD,CAEIC,YAAa,CAAEC,MAAO,GAAIC,OAAQ,GAAIC,aAAc,OACpDC,gBAAiB,CAAEH,MAAO,IAAKC,OAAQ,GAAIC,aAAc,QACzDE,iBAAkB,CAAEJ,MAAO,IAAKC,OAAQ,GAAIC,aAAc,QAC1DG,OAAO,QAJFT,IASjB,OAAOD,IACR,IAEGW,GAAY1E,EAAAA,EAAAA,UAAQ,kBAAM0C,EAAMzC,KAAI,SAAA0E,GAAI,OAAI,SAAC,EAAD,CAC9CzJ,OAAQyJ,EAAK7I,YAAc,IAAM6I,EAAK5I,aACtCZ,OAAQsH,EAAWtH,SAAWwJ,EAAK7I,YAAc6I,EAAK5I,aAAe4I,EAAK7I,YAC1EM,YAAauI,EAAKvI,YAClBE,WAAYqI,EAAKrI,YACZmG,EAAWtH,SAAWwJ,EAAK7I,YAAc6I,EAAK5I,aAAe4I,EAAK7I,kBACtE,CAAC4G,EAAOD,EAAWtH,SAElByJ,GAAmBjF,EAAAA,EAAAA,cAAY,WACjC9E,EAASoB,EAAAA,EAAAA,UACV,IAEH,OACI,mBAAOiE,UAAU,oDAAjB,WACI,iBAAKA,UAAU,uDAAf,WACI,gBACIA,UAAU,kCADd,UAGI,mBACIA,UAAU,cACVC,QAASyE,EAFb,UAII,6BAAKnC,EAAWvF,iBAGxB,mBACIiD,QAASmB,EADb,UAGI,SAAC,EAAD,UAGR,gBAAKpB,UAAU,2EAAf,SAEQwC,EAAM1G,OACF0I,EACAZ,Y,8BCTxB,EAlDyBpF,EAAAA,MAAW,WAChC,IAAQxD,GAAWiH,EAAAA,EAAAA,MAAXjH,OACR,GAAsCmC,EAAAA,EAAAA,WAAkB,GAAxD,eAAOwH,EAAP,KAAoBC,EAApB,KAEMC,GAAaC,EAAAA,EAAAA,KAEb1D,GAAY3B,EAAAA,EAAAA,cAAY,WAC1BmF,GAAe,KAChB,IAEGG,GAAatF,EAAAA,EAAAA,cAAY,WAC3BmF,GAAe,KAChB,IAEH,OACI,iBAAK5E,UAAU,qDAAf,WACI,SAACgF,EAAA,EAAD,KACA,qBAAShF,UAAU,4JAAnB,UAEQ6E,EAAa,KACT,iCACI,SAAC,EAAD,CAAczD,UAAWA,IAErBpG,GACI,SAAC,KAAD,KACA,SAAC,EAAD,CAAgBoG,UAAWA,OAGvCpG,GACI,SAAC,KAAD,KACA,SAAC,EAAD,CAAcoG,UAAWA,IAIjCuD,GACI,SAACM,EAAA,EAAD,CACIlK,WAAYgK,EACZ5E,OAAO,sBAFX,UAII,SAAC,EAAD,CACIpF,WAAYgK,MAGpB,e,2CC3ClB1E,EAA+C7B,EAAAA,MAAW,YAOzD,IANHvB,EAME,EANFA,aACAD,EAKE,EALFA,SACA0D,EAIE,EAJFA,SACAJ,EAGE,EAHFA,cACAC,EAEE,EAFFA,mBACAC,EACE,EADFA,aAEA,OACI,oBACIR,UAAU,4DACVC,QAASO,EAAeD,EAAqBD,EAFjD,WAII,iBAAKN,UAAU,mDAAf,WACI,gBACIqB,IAAKpE,EAAanB,OAASmB,EAAeqE,mDAC1CtB,UAAU,yCAEd,iBAAKA,UAAU,yCAAf,WACI,cAAGA,UAAU,yDAAb,SAAuEhD,KACvE,cAAGgD,UAAU,yDAAb,SAAuEU,UAI3EF,GACI,iBAAKR,UAAU,mCAAf,WACI,gBAAKA,UAAU,uDACf,gBAAKA,UAAU,4DAEnB,gBAAKA,UAAU,qDAMnC","sources":["helpers/hooks/useChatRoom.ts","helpers/hooks/useUserInfo.ts","helpers/other/convert-unix-time/convertUnixTime.ts","pages/direct/components/navigation-bar/NewMessageModal.tsx","pages/direct/components/chat/NoChatSelected.tsx","svgs/empty/Text.tsx","pages/direct/components/navigation-bar/ChatLink.tsx","pages/direct/hooks/useChats.ts","pages/direct/components/navigation-bar/UsersSection.tsx","pages/direct/Direct.tsx","pages/direct/components/navigation-bar/UserToWriteTo.tsx"],"sourcesContent":["import RoutesTypes from \"constants/routes-types\";\r\nimport { db, storage } from \"firebase-setup/firebaseConfig\";\r\nimport { collection, deleteDoc, doc, getDocs, setDoc } from \"firebase/firestore\";\r\nimport { deleteObject, ref } from \"firebase/storage\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useAppSelector } from \"redux-setup/hooks\";\r\nimport MessageType from \"types/messageType\";\r\n\r\ntype CreateChatRoomProps = {\r\n    chosenUserId: string; \r\n    closeEvent?: (chatId: string) => void;\r\n} \r\n\r\ntype DeleteChatRoomProps = {\r\n    messages: MessageType[],\r\n    chatId: string,\r\n}\r\n\r\nconst useChatRoom = () => {\r\n    const signedUser = useAppSelector(state => state.signedUser.user);\r\n    const navigate = useNavigate();\r\n\r\n    const createChatRoom = async ({ chosenUserId, closeEvent }: CreateChatRoomProps) => {\r\n        const chatId = signedUser.userId + \"-\" + chosenUserId;\r\n        const reversedChatId = chosenUserId + \"-\" + signedUser.userId;\r\n\r\n        const allChats = await getDocs(collection(db, \"chats\"));\r\n\r\n        let chatToNavigateTo: string = \"\";\r\n        allChats.forEach(doc => {\r\n            const docResult = doc.data().firstUserId + \"-\" + doc.data().secondUserId;\r\n            if (docResult === chatId) {\r\n                chatToNavigateTo = chatId;\r\n                return\r\n            }\r\n\r\n            if (docResult === reversedChatId) {\r\n                chatToNavigateTo = reversedChatId;\r\n                return;\r\n            }\r\n        })\r\n\r\n        if (chatToNavigateTo.length !== 0) {\r\n            if(closeEvent){\r\n                closeEvent(chatToNavigateTo);\r\n            }\r\n            navigate(RoutesTypes.DIRECT + \"/\" + chatToNavigateTo);\r\n            return;\r\n        }\r\n\r\n        await setDoc(doc(db, \"chats\", chatId), {\r\n            firstUserId: signedUser.userId,\r\n            secondUserId: chosenUserId,\r\n            messages: [],\r\n            lastMessage: {\r\n                text: \"\",\r\n                userId: \"\",\r\n            },\r\n            lastEdited: new Date().getTime()\r\n        });\r\n\r\n        if(closeEvent){\r\n            closeEvent(chatId);\r\n        }\r\n        navigate(RoutesTypes.DIRECT + \"/\" + chatId)\r\n    }\r\n\r\n    const deleteChatRoom = async ({ messages, chatId }: DeleteChatRoomProps) => {\r\n        deleteDoc(doc(db, \"chats\", chatId));\r\n\r\n        for (const message of messages) {\r\n          if (message.media.length) {\r\n            const imageRef = ref(storage, message.media);\r\n            await deleteObject(imageRef);\r\n          }\r\n        }\r\n      }\r\n\r\n    return { createChatRoom, deleteChatRoom }\r\n}\r\n\r\nexport default useChatRoom;","import { db } from \"firebase-setup/firebaseConfig\";\r\nimport { doc, getDoc } from \"firebase/firestore\";\r\nimport { useEffect, useState } from \"react\";\r\nimport UserState from \"types/userStateType\";\r\n\r\ntype UserInfo = {\r\n    username: string,\r\n    profileImage: string,\r\n    userId: string\r\n}\r\n\r\ntype UseUserInfoType = (fromId: string) => UserInfo\r\n\r\nconst defaultInfo = {\r\n    username: \"\",\r\n    profileImage: \"\",\r\n    userId: \"\"\r\n}\r\n\r\nconst useUserInfo: UseUserInfoType = (fromId) => {\r\n    const [userInfo, setUserInfo] = useState<UserInfo>(defaultInfo)\r\n\r\n    useEffect(() => {\r\n        const getUser = async () => {\r\n            const user = (await getDoc(doc(db, \"users\", fromId))).data() as UserState;\r\n            setUserInfo({ ...user })\r\n        }\r\n\r\n        setUserInfo(defaultInfo)\r\n        getUser();\r\n    }, [fromId])\r\n\r\n    return userInfo\r\n}\r\n\r\nexport default useUserInfo","const convertUnixTime = (time: number) => {\r\n    let currentTimeString = 'Now';\r\n    const timeNow = new Date(((new Date().getTime() - time)))\r\n\r\n    const minutes = timeNow.getMinutes()\r\n    const hours = Math.abs(Math.round((timeNow.getTime() / 1000 / 3600)))\r\n    const days = hours > 24 ? (hours / 24).toFixed(0) : 0\r\n    const weeks = days > 7 ? (days as number / 7).toFixed(0) : 0\r\n    const months = days > 30 ? (days as number/ 30).toFixed(0) : 0\r\n    const years = months > 12 ? (months as number / 12).toFixed(0) : 0\r\n    const nowTime = minutes === 0 ? 'Now' : 0\r\n\r\n    const currentTime = (years || months || weeks || days || hours || minutes || nowTime)\r\n    currentTimeString = (currentTime === years && currentTime.toString() + ' year')\r\n        || (currentTime === months && currentTime.toString() + ' month')\r\n        || (currentTime === weeks && currentTime.toString() + ' week')\r\n        || (currentTime === days && currentTime.toString() + ' day')\r\n        || (currentTime === hours && currentTime.toString() + ' hour')\r\n        || (currentTime === minutes && currentTime.toString() + ' minutes')\r\n        || 'Now'\r\n\r\n    return currentTimeString\r\n}\r\n\r\nexport default convertUnixTime","import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react'\r\nimport getUsers from 'helpers/other/get-users/getUsers';\r\nimport { useAppSelector } from 'redux-setup/hooks';\r\nimport Close from 'svgs/empty/Close'\r\nimport UserState from 'types/userStateType';\r\nimport UserSuggestion from 'types/userSuggestionType';\r\nimport UserToWriteTo from './UserToWriteTo';\r\nimport useChatRoom from 'helpers/hooks/useChatRoom';\r\n\r\nconst NewMessageModal: React.FC<{ closeEvent: () => void }> = React.memo(({ closeEvent }) => {\r\n  const signedUser = useAppSelector(state => state.signedUser.user);\r\n\r\n  const [wordEntering, setWordEntering] = useState<string>(\"\");\r\n  const [chosenUsers, setChosenUsers] = useState<UserSuggestion[]>([]);\r\n  const [filteredUsers, setFilteredUsers] = useState<UserState[]>([]);\r\n\r\n  const { createChatRoom } = useChatRoom();\r\n\r\n  const inputRef = useRef<HTMLInputElement>(null);\r\n\r\n  useEffect(() => {\r\n    const handler = setTimeout(async () => {\r\n      await getUsers(wordEntering, setFilteredUsers);\r\n      setFilteredUsers(prevUsers => prevUsers.filter(user => user.username !== signedUser.username));\r\n    }, 300)\r\n\r\n    return () => clearTimeout(handler);\r\n  }, [wordEntering])\r\n\r\n  const handleChosenClick = useCallback((chosenUser: UserSuggestion) => {\r\n    setChosenUsers(prevUsers => prevUsers.filter(user => user.username !== chosenUser.username))\r\n    if (inputRef.current !== null) {\r\n      inputRef.current.focus();\r\n    }\r\n  }, [inputRef.current])\r\n\r\n  const chosenUsersElements = useMemo(() => chosenUsers.map(chosenUser => (\r\n    <div\r\n      className=\"bg-blue-100 flex rounded p-2\"\r\n      key={chosenUser.userId}\r\n    >\r\n      <button\r\n        className=\"flex gap-1\"\r\n        onClick={() => handleChosenClick(chosenUser)}\r\n      >\r\n        <p className=\"text-cyan-500 text-sm \">{chosenUser.username}</p>\r\n        <Close\r\n          styles=\"w-5 h-5 text-cyan-500\"\r\n        />\r\n      </button>\r\n    </div>\r\n  )), [chosenUsers, inputRef])\r\n\r\n  const addUserToList = (doc: UserState) => {\r\n    setChosenUsers(prevUsers => [...prevUsers, doc]);\r\n    setWordEntering(\"\");\r\n    if (inputRef.current !== null) {\r\n      inputRef.current.focus();\r\n    }\r\n  }\r\n\r\n  const removeUserFromList = (doc: UserState) => {\r\n    setChosenUsers(prevUsers => prevUsers.filter(user => user.username !== doc.username))\r\n    if (inputRef.current !== null) {\r\n      inputRef.current.focus();\r\n    }\r\n  }\r\n\r\n  const filteredUsersElements = useMemo(() => filteredUsers.map(doc => <UserToWriteTo\r\n    addUserToList={() => addUserToList(doc)}\r\n    removeUserFromList={() => removeUserFromList(doc)}\r\n    isUserInList={chosenUsers.some(user => user.username === doc.username)}\r\n    profileImage={doc.profileImage}\r\n    username={doc.username}\r\n    fullName={doc.fullName}\r\n    userId={doc.userId}\r\n    key={doc.userId}\r\n  />), [filteredUsers, chosenUsers])\r\n\r\n  const createChat = useCallback(() => {\r\n    chosenUsers.forEach(user => createChatRoom({ chosenUserId: user.userId, closeEvent: closeEvent }))\r\n  }, [chosenUsers])\r\n\r\n  const handleWordEntering = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setWordEntering(event.target.value)\r\n  }, [])\r\n\r\n  return (\r\n    <>\r\n      <div className=\"h-11 w-full flex justify-center items-center font-medium border-b relative \">\r\n        <button\r\n          className=\"absolute left-2\"\r\n          onClick={closeEvent}\r\n        >\r\n          <Close\r\n            styles=\"w-7 h-7\"\r\n          />\r\n        </button>\r\n        <p>New message</p>\r\n        <button\r\n          className={`absolute right-3 font-bold ${chosenUsers.length === 0 ? \"text-blue-300\" : \"text-blue-500\"}`}\r\n          disabled={chosenUsers.length === 0}\r\n          onClick={createChat}\r\n        >\r\n          <p>Next</p>\r\n        </button>\r\n      </div>\r\n      <div className=\"w-full max-h-[175px] flex border-b p-3 items-start gap-5\">\r\n        <p className=\"font-medium mt-[6px]\">To:</p>\r\n        <div className=\"w-full h-full flex flex-col items-start gap-2 overflow-hidden overflow-y-auto\">\r\n          {chosenUsersElements}\r\n          <input\r\n            className=\"w-full p-2 rounded-lg placeholder:font-light placeholder:text-gray-400 placeholder:text-sm relative text-sm\"\r\n            type=\"text\"\r\n            placeholder=\"Search...\"\r\n            value={wordEntering}\r\n            onChange={handleWordEntering}\r\n            ref={inputRef}\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className=\"flex flex-col overflow-hidden overflow-y-auto\">\r\n        {\r\n          !filteredUsers.length ?\r\n            <p className=\"font-medium text-sm pl-3 mt-2\">No Suggested</p> :\r\n            filteredUsersElements\r\n        }\r\n      </div>\r\n    </>\r\n  )\r\n})\r\n\r\nexport default NewMessageModal","import React from 'react'\r\n\r\nconst NoChatSelected: React.FC<{ openModal: () => void }> = React.memo(({ openModal }) => {\r\n    return (\r\n        <div className=\"w-full h-full flex flex-col justify-center items-center gap-1\">\r\n            <img\r\n                src={process.env.PUBLIC_URL + \"/images/direct.jpg\"}\r\n                className=\"w-[120px] h-[112px]\"\r\n                alt=\"direct\"\r\n            />\r\n            <p className=\"text-2xl font-thin\">Your Messages</p>\r\n            <p className=\"text-gray-400 text-sm\">Send private photos and messages to a friend or group.</p>\r\n            <button\r\n                className=\"h-[30px] w-[115px] mt-5 bg-blue-500 font-medium text-white rounded cursor-pointer text-sm tracking-wide flex items-center justify-center\"\r\n                onClick={openModal}\r\n            >\r\n                Send Message\r\n            </button>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default NoChatSelected","import React from 'react'\r\n\r\nconst Text: React.FC = () => {\r\n    return (\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-[26px] w-[26px] text-gray-800\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" strokeWidth={2}>\r\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z\" />\r\n        </svg>\r\n    )\r\n}\r\n\r\nexport default Text","import React, { useCallback } from 'react'\r\nimport { useNavigate, useParams } from 'react-router-dom'\r\nimport RoutesTypes from 'constants/routes-types'\r\nimport convertUnixTime from 'helpers/other/convert-unix-time/convertUnixTime'\r\nimport useUserInfo from 'helpers/hooks/useUserInfo'\r\n\r\ntype ChatLinkProps = {\r\n    userId: string,\r\n    chatId: string,\r\n    lastMessage: {\r\n        text: string,\r\n        userId: string\r\n    },\r\n    lastEdited: number;\r\n}\r\n\r\nconst ChatLink: React.FC<ChatLinkProps> = React.memo(({ userId, chatId, lastMessage, lastEdited }) => {\r\n    const navigate = useNavigate();\r\n    const { chatId: chatParam } = useParams();\r\n\r\n    const userInfo = useUserInfo(userId)\r\n\r\n    const generateTime = useCallback(() => {\r\n        let time = convertUnixTime(lastEdited)\r\n        return time === \"Now\" ? time : time.split(\" \")[0] + time.split(\" \")[1][0]\r\n    }, [lastEdited])\r\n\r\n    const navigateToChat = useCallback(() => {\r\n        navigate(RoutesTypes.DIRECT + \"/\" + chatId)\r\n    }, [chatId])\r\n\r\n    return (\r\n        <button\r\n            className={`flex h-20 px-2 pr-6 items-center justify-center py-1 ${chatParam === chatId && \"back\"}`}\r\n            onClick={navigateToChat}\r\n        >\r\n            <div className=\"w-full h-16 py-[0.5px] gap-4 flex items-center px-3\">\r\n                <img\r\n                    src={\r\n                        userInfo.profileImage.length ?\r\n                            userInfo.profileImage :\r\n                            process.env.PUBLIC_URL + \"/images/default-avatar-gray.jpg\"\r\n                    }\r\n                    className=\"h-[60px] w-[60px] rounded-full object-cover\"\r\n                />\r\n                <div className=\"flex flex-col justify-center text-left\">\r\n                    <p className=\"w-[165px] truncate text-sm tracking-wide\">{userInfo.username}</p>\r\n                    <div className=\"flex gap-1\">\r\n                        <p className=\"font-medium text-sm tracking-wide whitespace-nowrap\">\r\n                            {`${lastMessage.userId !== userId && lastMessage.text.length ? \"You:\" : \" \"}`}\r\n                        </p>\r\n                        <p className=\"max-w-[125px] truncate text-gray-400 text-sm\">{lastMessage.text}</p>\r\n                        {\r\n                            lastMessage.userId.length !== 0 ?\r\n                                <>\r\n                                    <p className=\"text-sm text-gray-400\">•</p>\r\n                                    <p className=\"text-sm text-gray-400\">\r\n                                        {generateTime()}\r\n                                    </p>\r\n                                </> :\r\n                                null\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </button>\r\n    )\r\n})\r\n\r\nexport default ChatLink","import { db } from \"firebase-setup/firebaseConfig\";\r\nimport { collection, getDocs, onSnapshot, query, where } from \"firebase/firestore\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useAppSelector } from \"redux-setup/hooks\";\r\nimport ChatState from \"types/chatStateType\";\r\n\r\ntype UseChatsType = (chatId: string) => ChatState[]\r\n\r\nconst useChats: UseChatsType = (chatId) => {\r\n    const loggedUser = useAppSelector(state => state.signedUser.user);\r\n    const [chats, setChats] = useState<ChatState[]>([]);\r\n\r\n    useEffect(() => {\r\n        const getChats = async () => {\r\n            const chatsRef = collection(db, \"chats\");\r\n            const q1 = query(chatsRef, where(\"firstUserId\", \"==\", loggedUser.userId));\r\n            const q2 = query(chatsRef, where(\"secondUserId\", \"==\", loggedUser.userId));\r\n\r\n            const querySnapshot1 = await getDocs(q1);\r\n            const querySnapshot2 = await getDocs(q2);\r\n            const querySnapshot = querySnapshot1.docs\r\n                .map(doc => doc.data())\r\n                .concat(querySnapshot2.docs.map(doc => doc.data()))\r\n\r\n            const chatsObjs = querySnapshot.map(doc => {\r\n                return ({\r\n                    firstUserId: doc.firstUserId,\r\n                    secondUserId: doc.secondUserId,\r\n                    messages: doc.messsages,\r\n                    lastMessage: doc.lastMessage,\r\n                    lastEdited: doc.lastEdited\r\n                })\r\n            })\r\n\r\n            setChats(chatsObjs.sort((a, b) => b.lastEdited - a.lastEdited))\r\n        }\r\n\r\n        onSnapshot(query(collection(db, \"chats\"), where(\"firstUserId\", \"==\", loggedUser.userId)), async () => {\r\n            await getChats();\r\n        })\r\n\r\n        onSnapshot(query(collection(db, \"chats\"), where(\"secondUserId\", \"==\", loggedUser.userId)), async () => {\r\n            await getChats();\r\n        })\r\n    }, [loggedUser.userId, chatId])\r\n\r\n    return chats\r\n}\r\n\r\nexport default useChats","import React, { useCallback, useMemo } from 'react'\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport RoutesTypes from 'constants/routes-types';\r\nimport { useAppSelector } from 'redux-setup/hooks'\r\nimport Text from 'svgs/empty/Text';\r\nimport ChatLink from './ChatLink';\r\nimport UserLoader from 'components/other/UserLoader';\r\nimport useChats from 'pages/direct/hooks/useChats';\r\n\r\nconst UsersSection: React.FC<{ openModal: () => void }> = React.memo(({ openModal }) => {\r\n    const loggedUser = useAppSelector(state => state.signedUser.user);\r\n    const navigate = useNavigate();\r\n    const { chatId } = useParams();\r\n\r\n    const chats = useChats(chatId as string)\r\n\r\n    const generateSkeletons = useCallback(() => {\r\n        const skeletons = [];\r\n        for (let i = 0; i < 3; i++) {\r\n            skeletons.push(\r\n                <UserLoader\r\n                    key={i}\r\n                    imageStyles={{ width: 60, height: 60, borderRadius: \"50%\" }}\r\n                    firstTextStyles={{ width: 180, height: 11, borderRadius: \"10px\" }}\r\n                    secondTextStyles={{ width: 150, height: 11, borderRadius: \"10px\" }}\r\n                    margin=\"my-1\"\r\n                />\r\n            );\r\n        }\r\n        \r\n        return skeletons\r\n    }, [])\r\n\r\n    const chatLinks = useMemo(() => chats.map(chat => <ChatLink\r\n        chatId={chat.firstUserId + \"-\" + chat.secondUserId}\r\n        userId={loggedUser.userId === chat.firstUserId ? chat.secondUserId : chat.firstUserId}\r\n        lastMessage={chat.lastMessage}\r\n        lastEdited={chat.lastEdited}\r\n        key={loggedUser.userId === chat.firstUserId ? chat.secondUserId : chat.firstUserId}\r\n    />), [chats, loggedUser.userId])\r\n\r\n    const navigateToDirect = useCallback(() => {\r\n        navigate(RoutesTypes.DIRECT)\r\n    }, [])\r\n\r\n    return (\r\n        <aside className=\"w-full sm:w-[520px] h-full border-r flex flex-col\">\r\n            <div className=\"flex justify-end items-center h-[60px] border-b pr-4\">\r\n                <div\r\n                    className=\"w-full flex justify-center pl-4\"\r\n                >\r\n                    <button\r\n                        className=\"font-medium\"\r\n                        onClick={navigateToDirect}\r\n                    >\r\n                        <p>@{loggedUser.username}</p>\r\n                    </button>\r\n                </div>\r\n                <button\r\n                    onClick={openModal}\r\n                >\r\n                    <Text />\r\n                </button>\r\n            </div>\r\n            <nav className=\"flex flex-col w-full h-[calc(100%-60px)] overflow-hidden overflow-y-auto\">\r\n                {\r\n                    chats.length ?\r\n                        chatLinks :\r\n                        generateSkeletons()\r\n                }\r\n            </nav>\r\n        </aside>\r\n    )\r\n})\r\n\r\nexport default UsersSection","import React, { useCallback, useState } from 'react'\r\nimport { Outlet, useParams } from 'react-router-dom'\r\nimport NewMessageModal from 'pages/direct/components/navigation-bar/NewMessageModal'\r\nimport NoChatSelected from 'pages/direct/components/chat/NoChatSelected'\r\nimport UsersSection from 'pages/direct/components/navigation-bar/UsersSection'\r\nimport Header from 'components/header/Header'\r\nimport Modal from 'components/modal/Modal'\r\nimport useWindowWidth from 'helpers/hooks/useWindowWidth'\r\n\r\nconst Direct: React.FC = React.memo(() => {\r\n    const { chatId } = useParams();\r\n    const [isModalOpen, setIsModalOpen] = useState<boolean>(false);\r\n\r\n    const innerWidth = useWindowWidth();\r\n\r\n    const openModal = useCallback(() => {\r\n        setIsModalOpen(true)\r\n    }, [])\r\n\r\n    const closeModal = useCallback(() => {\r\n        setIsModalOpen(false)\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"back w-screen h-screen flex flex-col items-center \">\r\n            <Header />\r\n            <section className=\"flex flex-col sm:flex-row gap-16 sm:gap-0 bg-white w-full md:w-11/12 lg:w-4/5 xl:w-2/3 h-[calc(100vh-90px)] max-w-[935px] border-x border-b border-t my-3\">\r\n                {\r\n                    innerWidth > 640 ?\r\n                        <>\r\n                            <UsersSection openModal={openModal} />\r\n                            {\r\n                                chatId ?\r\n                                    <Outlet /> :\r\n                                    <NoChatSelected openModal={openModal} />\r\n                            }\r\n                        </> :\r\n                        chatId ?\r\n                            <Outlet /> :\r\n                            <UsersSection openModal={openModal} />\r\n                }\r\n\r\n                {\r\n                    isModalOpen ?\r\n                        <Modal\r\n                            closeEvent={closeModal}\r\n                            styles=\"h-[450px] top-[20%]\"\r\n                        >\r\n                            <NewMessageModal\r\n                                closeEvent={closeModal}\r\n                            />\r\n                        </Modal> :\r\n                        null\r\n                }\r\n            </section>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default Direct","import React from 'react';\r\nimport UserSuggestionType from 'types/userSuggestionType';\r\n\r\ninterface IUserToWriteToProps extends UserSuggestionType {\r\n    addUserToList: () => void\r\n    removeUserFromList: () => void\r\n    isUserInList: boolean\r\n}\r\n\r\nconst UserToWriteTo: React.FC<IUserToWriteToProps> = React.memo(({\r\n    profileImage,\r\n    username,\r\n    fullName,\r\n    addUserToList,\r\n    removeUserFromList,\r\n    isUserInList\r\n}) => {\r\n    return (\r\n        <button\r\n            className=\"flex h-13 mb-1 px-2 pr-6 items-center justify-center py-1\"\r\n            onClick={isUserInList ? removeUserFromList : addUserToList}\r\n        >\r\n            <div className=\"w-full h-full py-[0.5px] gap-2 flex items-center\">\r\n                <img\r\n                    src={profileImage.length ? profileImage : process.env.PUBLIC_URL + \"/images/default-avatar-image.jpg\"}\r\n                    className=\"h-12 w-12 rounded-full object-cover\"\r\n                />\r\n                <div className=\"flex flex-col justify-center text-left\">\r\n                    <p className=\"font-medium text-sm tracking-[0.3px] whitespace-nowrap\">{username}</p>\r\n                    <p className=\"text-gray-400 text-sm tracking-[0px] whitespace-nowrap\">{fullName}</p>\r\n                </div>\r\n            </div>\r\n            {\r\n                isUserInList ?\r\n                    <div className=\"w-6 h-6 rounded-full bg-blue-500\">\r\n                        <div className=\"h-[2px] w-[7px] bg-white mt-3 ml-1 rotate-[45deg]\"></div>\r\n                        <div className=\"h-[2px] w-3 bg-white mt-[-3px] ml-2 rotate-[-45deg]\"></div>\r\n                    </div> :\r\n                    <div className=\"w-6 h-6 rounded-full border-2 border-black\"></div>\r\n            }\r\n        </button>\r\n    )\r\n})\r\n\r\nexport default UserToWriteTo"],"names":["signedUser","useAppSelector","state","user","navigate","useNavigate","createChatRoom","chosenUserId","closeEvent","chatId","userId","reversedChatId","getDocs","collection","db","allChats","chatToNavigateTo","forEach","doc","docResult","data","firstUserId","secondUserId","length","RoutesTypes","setDoc","messages","lastMessage","text","lastEdited","Date","getTime","deleteChatRoom","deleteDoc","message","media","imageRef","ref","storage","deleteObject","defaultInfo","username","profileImage","fromId","useState","userInfo","setUserInfo","useEffect","getUser","getDoc","time","timeNow","minutes","getMinutes","hours","Math","abs","round","days","toFixed","weeks","months","years","currentTime","toString","React","wordEntering","setWordEntering","chosenUsers","setChosenUsers","filteredUsers","setFilteredUsers","useChatRoom","inputRef","useRef","handler","setTimeout","getUsers","prevUsers","filter","clearTimeout","handleChosenClick","useCallback","chosenUser","current","focus","chosenUsersElements","useMemo","map","className","onClick","Close","styles","filteredUsersElements","UserToWriteTo","addUserToList","removeUserFromList","isUserInList","some","fullName","createChat","handleWordEntering","event","target","value","disabled","type","placeholder","onChange","openModal","src","process","alt","xmlns","fill","viewBox","stroke","strokeWidth","strokeLinecap","strokeLinejoin","d","chatParam","useParams","useUserInfo","generateTime","convertUnixTime","split","navigateToChat","loggedUser","chats","setChats","getChats","chatsRef","q1","query","where","q2","querySnapshot1","querySnapshot2","querySnapshot","docs","concat","chatsObjs","messsages","sort","a","b","onSnapshot","useChats","generateSkeletons","skeletons","i","push","UserLoader","imageStyles","width","height","borderRadius","firstTextStyles","secondTextStyles","margin","chatLinks","chat","navigateToDirect","isModalOpen","setIsModalOpen","innerWidth","useWindowWidth","closeModal","Header","Modal"],"sourceRoot":""}