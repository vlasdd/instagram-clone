{"version":3,"file":"static/js/52.1577fffb.chunk.js","mappings":"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","sources":["components/modal/AreYouSureModal.tsx","helpers/hooks/useChatRoom.ts","pages/profile/components/other/ChangeImageModal.tsx","svgs/empty/Posts.tsx","pages/profile/components/other/ProfileNavBar.tsx","pages/profile/components/user-page-types/LoggedUsersProfile.tsx","pages/profile/components/user-page-types/UserOnPageProfile.tsx","pages/profile/DefineProfile.tsx"],"sourcesContent":["import React from 'react'\r\n\r\ntype AreYouSureModalProps = {\r\n    areYouSureEvent: () => void\r\n    profileImage: string\r\n    closeEvent: () => void\r\n    buttonText: string\r\n    questionText: string\r\n    additionalText?: string\r\n}\r\n\r\nconst AreYouSureModal: React.FC<AreYouSureModalProps> = React.memo(({ \r\n    areYouSureEvent, \r\n    profileImage, \r\n    closeEvent, \r\n    buttonText, \r\n    questionText, \r\n    additionalText \r\n}) => {\r\n    return (\r\n        <div className=\"h-full w-full flex flex-col items-center z-50\">\r\n            <div className={`w-full h-[100px] flex items-start justify-center ${additionalText ? \"mt-3 mb-2\" : \"mt-6 mb-4\"}`}>\r\n                <img\r\n                    src={profileImage.length ? profileImage : process.env.PUBLIC_URL + \"/images/default-avatar-image.jpg\"}\r\n                    className=\"rounded-full h-[100px] w-[100px] object-cover\"\r\n                />\r\n            </div>\r\n            <p className={`text-sm ${!additionalText && \"mb-6\"}`}>{questionText}?</p>\r\n            {\r\n                additionalText ?\r\n                    <p className=\"text-gray-400 text-sm w-3/4 text-center mb-3 mt-1\">{additionalText}</p> :\r\n                    null\r\n            }\r\n            <button\r\n                className=\"w-full h-12 border-t-2 flex items-center justify-center text-rose-600 font-bold text-sm\"\r\n                onClick={areYouSureEvent}\r\n            >\r\n                {buttonText}\r\n            </button>\r\n            <button\r\n                className=\"w-full h-12 border-t-2 flex items-center justify-center text-sm\"\r\n                onClick={closeEvent}\r\n            >\r\n                Cancel\r\n            </button>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default AreYouSureModal","import RoutesTypes from \"constants/routes-types\";\r\nimport { db, storage } from \"firebase-setup/firebaseConfig\";\r\nimport { collection, deleteDoc, doc, getDocs, setDoc } from \"firebase/firestore\";\r\nimport { deleteObject, ref } from \"firebase/storage\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useAppSelector } from \"redux-setup/hooks\";\r\nimport MessageType from \"types/messageType\";\r\n\r\ntype CreateChatRoomProps = {\r\n    chosenUserId: string; \r\n    closeEvent?: (chatId: string) => void;\r\n} \r\n\r\ntype DeleteChatRoomProps = {\r\n    messages: MessageType[],\r\n    chatId: string,\r\n}\r\n\r\nconst useChatRoom = () => {\r\n    const signedUser = useAppSelector(state => state.signedUser.user);\r\n    const navigate = useNavigate();\r\n\r\n    const createChatRoom = async ({ chosenUserId, closeEvent }: CreateChatRoomProps) => {\r\n        const chatId = signedUser.userId + \"-\" + chosenUserId;\r\n        const reversedChatId = chosenUserId + \"-\" + signedUser.userId;\r\n\r\n        const allChats = await getDocs(collection(db, \"chats\"));\r\n\r\n        let chatToNavigateTo: string = \"\";\r\n        allChats.forEach(doc => {\r\n            const docResult = doc.data().firstUserId + \"-\" + doc.data().secondUserId;\r\n            if (docResult === chatId) {\r\n                chatToNavigateTo = chatId;\r\n                return\r\n            }\r\n\r\n            if (docResult === reversedChatId) {\r\n                chatToNavigateTo = reversedChatId;\r\n                return;\r\n            }\r\n        })\r\n\r\n        if (chatToNavigateTo.length !== 0) {\r\n            if(closeEvent){\r\n                closeEvent(chatToNavigateTo);\r\n            }\r\n            navigate(RoutesTypes.DIRECT + \"/\" + chatToNavigateTo);\r\n            return;\r\n        }\r\n\r\n        await setDoc(doc(db, \"chats\", chatId), {\r\n            firstUserId: signedUser.userId,\r\n            secondUserId: chosenUserId,\r\n            messages: [],\r\n            lastMessage: {\r\n                text: \"\",\r\n                userId: \"\",\r\n            },\r\n            lastEdited: new Date().getTime()\r\n        });\r\n\r\n        if(closeEvent){\r\n            closeEvent(chatId);\r\n        }\r\n        navigate(RoutesTypes.DIRECT + \"/\" + chatId)\r\n    }\r\n\r\n    const deleteChatRoom = async ({ messages, chatId }: DeleteChatRoomProps) => {\r\n        deleteDoc(doc(db, \"chats\", chatId));\r\n\r\n        for (const message of messages) {\r\n          if (message.media.length) {\r\n            const imageRef = ref(storage, message.media);\r\n            await deleteObject(imageRef);\r\n          }\r\n        }\r\n      }\r\n\r\n    return { createChatRoom, deleteChatRoom }\r\n}\r\n\r\nexport default useChatRoom;","import React, { useCallback } from 'react'\r\nimport { useAppDispatch, useAppSelector } from 'redux-setup/hooks';\r\nimport deleteProfileImage from 'redux-setup/features/signed-user/thunks/deleteProfileImage';\r\nimport createNewProfileImage from \"redux-setup/features/signed-user/thunks/createNewProfileImage\";\r\n\r\ntype ChangeImageModalProps = {\r\n    closeEvent: () => void\r\n}\r\n\r\nconst ChangeImageModal: React.FC<ChangeImageModalProps> = React.memo(({ closeEvent }) => {\r\n    const currentUser = useAppSelector(state => state.signedUser.user);\r\n    const dispatch = useAppDispatch();\r\n\r\n    const uploadImage = useCallback(async (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        if(!event.target.files){\r\n            return;\r\n        }\r\n\r\n        await dispatch(createNewProfileImage({image: event.target.files[0]}))\r\n        closeEvent();\r\n    }, [])\r\n\r\n    const deleteImage = useCallback(async () => {\r\n        await dispatch(deleteProfileImage());\r\n        closeEvent();\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"h-full w-full flex flex-col items-center\">\r\n            <div className=\"w-full h-[50px] flex mt-2 mb-1 items-start justify-center\">\r\n                <img\r\n                    src={\r\n                        currentUser.profileImage.length ?\r\n                            currentUser.profileImage :\r\n                            process.env.PUBLIC_URL + \"/images/default-avatar-image.jpg\"\r\n                    }\r\n                    className=\"rounded-full h-full w-[50px] object-cover\"\r\n                />\r\n            </div>\r\n            <p className=\"font-medium text-md\">Synced Profile Photo</p>\r\n            <p className=\"text-center text-gray-400 text-sm pb-2\">Instagram</p>\r\n            <label className=\"w-full h-12 border-t-2 flex items-center justify-center cursor-pointer\">\r\n                <input\r\n                    type=\"file\"\r\n                    accept=\"image/png, image/jpg, image/jpeg\"\r\n                    className=\"hidden\"\r\n                    onChange={uploadImage}\r\n                />\r\n                <p className=\"text-teal-500 font-medium text-sm\">Upload Photo</p>\r\n            </label>\r\n            <button\r\n                className=\"w-full h-12 border-t-2 flex items-center justify-center text-sm\"\r\n            >\r\n                Manage Sync Settings\r\n            </button>\r\n            {\r\n                currentUser.profileImage.length ?\r\n                    <button\r\n                        className=\"w-full h-12 border-t-2 flex items-center justify-center text-rose-600 font-medium text-sm\"\r\n                        onClick={deleteImage}\r\n                    >\r\n                        Remove Current Photo\r\n                    </button> :\r\n                    undefined\r\n            }\r\n            <button\r\n                className=\"w-full h-12 border-t-2 flex items-center justify-center text-sm\"\r\n                onClick={closeEvent}\r\n            >\r\n                Cancel\r\n            </button>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default ChangeImageModal","import React from 'react'\r\n\r\nconst Posts: React.FC = () => {\r\n    return (\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" strokeWidth={2}>\r\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M4 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2V6zM14 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V6zM4 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2v-2zM14 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z\" />\r\n        </svg>\r\n    )\r\n}\r\n\r\nexport default Posts","import React, { useCallback, useEffect, useState } from 'react'\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport ProfileRoutes from 'constants/profile-routes';\r\nimport Posts from 'svgs/empty/Posts';\r\nimport Saved from 'svgs/empty/Saved';\r\n\r\nconst ProfileNavBar: React.FC<{ isUsersPage: boolean }> = React.memo(({ isUsersPage }) => {\r\n    const navigate = useNavigate();\r\n    const location = useLocation();\r\n\r\n    const defineLocation = useCallback(() => {\r\n        const pathNameArray = location.pathname.split(\"/\");\r\n        switch(pathNameArray[pathNameArray.length - 1]){\r\n            case ProfileRoutes.SAVED: {\r\n                return 1;\r\n            }\r\n            default: {\r\n                return 0;\r\n            }\r\n        }\r\n    }, [location.pathname])\r\n\r\n    const [currentTab, setCurrentTab] = useState<number>(defineLocation());\r\n\r\n    useEffect(() => {\r\n        setCurrentTab(defineLocation());\r\n    }, [location.pathname])\r\n\r\n    const handlePostNavigate = () => {\r\n        navigate(ProfileRoutes.POSTS);\r\n        setCurrentTab(0);\r\n    }\r\n\r\n    const handleSavedNavigate = () => {\r\n        navigate(ProfileRoutes.SAVED);\r\n        setCurrentTab(1);\r\n    }\r\n\r\n    return (\r\n        <nav className=\"flex border-t justify-center items-center border-t-gray-300 gap-12 lg:gap-16 text-[12px] font-medium tracking-widest w-full sm:w-3/4 lg:w-2/3 max-w-[1000px]\">\r\n            <button\r\n                onClick={handlePostNavigate}\r\n                className={`\r\n                    h-12 flex items-center text-gray-400 gap-1 \r\n                    ${currentTab === 0 && \"border-t border-t-gray-900 text-black\"}\r\n                `}\r\n            >\r\n                <Posts />\r\n                <p>POSTS</p>\r\n            </button>\r\n            {\r\n                isUsersPage ?\r\n                    <button\r\n                        onClick={handleSavedNavigate}\r\n                        className={`\r\n                            h-12 flex items-center text-gray-400 gap-1  \r\n                            ${currentTab === 1 && \"border-t border-t-gray-900 text-black\"}\r\n                        `}\r\n                    >\r\n                        <Saved\r\n                            styles=\"w-4 h-4\"\r\n                            includeHovering={false}\r\n                        />\r\n                        <p>SAVED</p>\r\n                    </button> :\r\n                    null\r\n            }\r\n        </nav>\r\n    )\r\n})\r\n\r\nexport default ProfileNavBar","import React, { useCallback, useEffect, useState } from 'react'\r\nimport { Link, Navigate, Outlet, useNavigate, useParams } from 'react-router-dom';\r\nimport ProfileRoutes from 'constants/profile-routes';\r\nimport RoutesTypes from 'constants/routes-types';\r\nimport { clearErrors } from 'redux-setup/features/signed-user/signedUser';\r\nimport fetchSignedUser from 'redux-setup/features/signed-user/thunks/fetchSignedUser';\r\nimport { useAppDispatch, useAppSelector } from 'redux-setup/hooks';\r\nimport Modal from 'components/modal/Modal';\r\nimport ChangeImageModal from '../other/ChangeImageModal';\r\nimport ProfileNavBar from '../other/ProfileNavBar';\r\n\r\nconst LoggedUsersProfile: React.FC = React.memo(() => {\r\n    const {user: signedUser, status } = useAppSelector(state => state.signedUser);\r\n    const dispatch = useAppDispatch();\r\n\r\n    const { uid } = useParams();\r\n    const navigate = useNavigate();\r\n\r\n    const [shouldRedirect, setShouldRedirect] = useState<boolean>(false);\r\n    const [isImageModalOpen, setIsImageModalOpen] = useState<boolean>(false);\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchSignedUser(uid as string));\r\n    }, [uid])\r\n\r\n    useEffect(() => {\r\n        if (status === \"rejected\") {\r\n            dispatch(clearErrors());\r\n            setShouldRedirect(true);\r\n        }\r\n    }, [status])\r\n\r\n    const handleNavigateFollowers = useCallback((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        event.stopPropagation();\r\n        navigate(ProfileRoutes.FOLLOWERS)\r\n    }, [])\r\n\r\n    const handleNavigateFollowing = useCallback((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        event.stopPropagation();\r\n        navigate(ProfileRoutes.FOLLOWING)\r\n    }, [])\r\n\r\n    const openImageModal = useCallback(() => {\r\n        setIsImageModalOpen(true)\r\n    }, [])\r\n\r\n    const closeImageModal = useCallback(() => {\r\n        setIsImageModalOpen(false)\r\n    }, [])\r\n\r\n    return (\r\n        shouldRedirect ?\r\n            <Navigate to={RoutesTypes.NOT_FOUND} /> :\r\n            <div className=\"min-h-[calc(100vh-60px)] w-screen flex flex-col items-center back\">\r\n                <div className=\"flex items-center flex-col sm:flex-row w-full sm:w-3/4 lg:w-5/6 xl:w-4/5 justify-center gap-2 pt-4 pb-3 px-1 max-w-[1000px]\">\r\n                    <div className=\"w-full sm:w-2/5 sm:h-60 flex justify-center items-center\">\r\n                        <img\r\n                            src={\r\n                                signedUser.profileImage.length ?\r\n                                    signedUser.profileImage :\r\n                                    process.env.PUBLIC_URL + \"/images/default-avatar-gray.jpg\"\r\n                            }\r\n                            className=\"rounded-full w-[170px] h-[170px] object-cover cursor-pointer\"\r\n                            onClick={openImageModal}\r\n                        />\r\n                    </div>\r\n                    <div className=\"flex flex-col w-5/6 sm:w-3/5 pt-4 gap-3 sm:gap-6\">\r\n                        <div className=\"flex gap-4 justify-center sm:justify-start\">\r\n                            <p className=\"text-3xl font-extralight\">{signedUser.username}</p>\r\n                        </div>\r\n                        <div className=\"flex gap-8 justify-center sm:justify-start\">\r\n                            <div className=\"flex gap-1 items-center\">\r\n                                <p className=\"font-medium\">{signedUser.posts.length}</p>\r\n                                <p>{`post${signedUser.posts.length === 1 ? \"\" : \"s\"}`}</p>\r\n                            </div>\r\n                            <button\r\n                                onClick={handleNavigateFollowers}\r\n                                className=\"flex gap-1 items-center\"\r\n                            >\r\n                                <p className=\"font-medium\">{signedUser.followers.length}</p>\r\n                                <p>{`follower${signedUser.followers.length === 1 ? \"\" : \"s\"}`}</p>\r\n                            </button>\r\n                            <button\r\n                                onClick={handleNavigateFollowing}\r\n                                className=\"flex gap-1 items-center\"\r\n                            >\r\n                                <p className=\"font-medium\">{signedUser.following.length}</p>\r\n                                <p>following</p>\r\n                            </button>\r\n                        </div>\r\n                        <div className=\"flex px-8 sm:px-0\">\r\n                            <p className=\"font-medium\">{signedUser.fullName}</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                {\r\n                    isImageModalOpen ?\r\n                        <Modal\r\n                            closeEvent={closeImageModal}\r\n                            styles={`top-[35%] ${signedUser.profileImage.length ? \"h-72\" : \"h-60\"}`}\r\n                        >\r\n                            <ChangeImageModal\r\n                                closeEvent={closeImageModal}\r\n                            />\r\n                        </Modal> :\r\n                        null\r\n                }\r\n                <ProfileNavBar isUsersPage={true} />\r\n                <Outlet />\r\n            </div>\r\n    )\r\n})\r\n\r\nexport default LoggedUsersProfile","import React, { useCallback, useEffect, useState } from 'react'\r\nimport { Navigate, Outlet, useNavigate, useParams } from 'react-router-dom';\r\nimport ProfileRoutes from 'constants/profile-routes';\r\nimport RoutesTypes from 'constants/routes-types';\r\nimport { clearErrors } from 'redux-setup/features/user-on-page/userOnPage';\r\nimport fetchUserOnPage from 'redux-setup/features/user-on-page/thunks/fetchUserOnPage';\r\nimport { useAppDispatch, useAppSelector } from 'redux-setup/hooks';\r\nimport Modal from 'components/modal/Modal';\r\nimport ProfileNavBar from '../other/ProfileNavBar';\r\nimport AreYouSureModal from 'components/modal/AreYouSureModal';\r\nimport useChatRoom from 'helpers/hooks/useChatRoom';\r\nimport addToFollowing from \"redux-setup/features/signed-user/thunks/addToFollowing\";\r\nimport removeFromFollowing from \"redux-setup/features/signed-user/thunks/removeFromFollowing\";\r\n\r\nconst UserOnPageProfile: React.FC = React.memo(() => {\r\n    const { user: userOnPage, status } = useAppSelector(state => state.userOnPage);\r\n    const loggedUser = useAppSelector(state => state.signedUser.user);\r\n    const dispatch = useAppDispatch();\r\n\r\n    const { uid } = useParams();\r\n    const navigate = useNavigate();\r\n\r\n    const [shouldRedirect, setShouldRedirect] = useState<boolean>(false);\r\n    const [isUnfollowModalOpen, setIsUnfollowModalOpen] = useState<boolean>(false);\r\n\r\n    const { createChatRoom } = useChatRoom();\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchUserOnPage(uid as string))\r\n    }, [uid])\r\n\r\n    useEffect(() => {\r\n        if (status === \"rejected\") {\r\n            dispatch(clearErrors());\r\n            setShouldRedirect(true);\r\n        }\r\n    }, [status])\r\n\r\n    const handleMessageClick = useCallback((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        event.stopPropagation();\r\n        createChatRoom({ chosenUserId: userOnPage.userId });\r\n    }, [userOnPage.userId])\r\n\r\n    const handleFollowingClick = useCallback((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        event.stopPropagation();\r\n        setIsUnfollowModalOpen(true);\r\n    }, [])\r\n\r\n    const handleFollowClick = useCallback((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        event.stopPropagation();\r\n        dispatch(addToFollowing({ userId: userOnPage.userId, uid: uid as string }));\r\n    }, [userOnPage.userId, uid])\r\n\r\n    const handleNavigateFollowers = useCallback((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        event.stopPropagation();\r\n        navigate(ProfileRoutes.FOLLOWERS)\r\n    }, [])\r\n\r\n    const handleNavigateFollowing = useCallback((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        event.stopPropagation();\r\n        navigate(ProfileRoutes.FOLLOWING)\r\n    }, [])\r\n\r\n    const areYouSureEvent = useCallback(() => {\r\n        setIsUnfollowModalOpen(false)\r\n        dispatch(removeFromFollowing({ userId: userOnPage.userId, uid: uid as string }))\r\n    }, [userOnPage.userId, uid])\r\n\r\n    const closeUnfollowModal = useCallback(() => {\r\n        setIsUnfollowModalOpen(false)\r\n    }, [])\r\n\r\n    return (\r\n        shouldRedirect ?\r\n            <Navigate to={RoutesTypes.NOT_FOUND} /> :\r\n            <div className=\"min-h-[calc(100vh-60px)] w-screen flex flex-col items-center back\">\r\n                <div className=\"flex items-center flex-col sm:flex-row w-full sm:w-3/4 lg:w-5/6 xl:w-4/5 justify-center gap-2 pt-4 pb-3 px-1 max-w-[1000px]\">\r\n                    <div className=\"w-full sm:w-2/5 sm:h-60 flex justify-center items-center\">\r\n                        <img\r\n                            src={\r\n                                userOnPage.profileImage.length ?\r\n                                    userOnPage.profileImage :\r\n                                    process.env.PUBLIC_URL + \"/images/default-avatar-gray.jpg\"\r\n                            }\r\n                            className=\"rounded-full w-[170px] h-[170px] object-cover\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"flex flex-col w-5/6 sm:w-3/5 pt-4 gap-3 sm:gap-6\">\r\n                        <div className=\"flex gap-4\">\r\n                            <p className=\"text-3xl font-extralight\">{userOnPage.username}</p>\r\n                            <div className=\"flex items-center gap-2\">\r\n                                <button\r\n                                    className=\"h-7 w-20 rounded border text-sm font-medium cursor-pointer\"\r\n                                    onClick={handleMessageClick}\r\n                                >\r\n                                    Message\r\n                                </button>\r\n                                {\r\n                                    !loggedUser.username.length ?\r\n                                        null :\r\n                                        loggedUser.following.some(data => data.userId === userOnPage.userId) ?\r\n                                            <button\r\n                                                className=\"h-7 w-28 rounded border text-sm font-medium cursor-pointer\"\r\n                                                onClick={handleFollowingClick}\r\n                                            >\r\n                                                Following\r\n                                            </button> :\r\n                                            <button\r\n                                                className=\"h-7 w-20 bg-blue-500 font-medium text-white rounded cursor-pointer text-sm tracking-wide\"\r\n                                                onClick={handleFollowClick}\r\n                                            >\r\n                                                Follow\r\n                                            </button>\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"flex gap-2 sm:gap-8\">\r\n                            <div className=\"flex gap-1 items-center flex-col sm:flex-row\">\r\n                                <p className=\"font-medium\">{userOnPage.posts.length}</p>\r\n                                <p>{`post${userOnPage.posts.length === 1 ? \"\" : \"s\"}`}</p>\r\n                            </div>\r\n                            <button\r\n                                onClick={(event) => handleNavigateFollowers(event)}\r\n                                className=\"flex gap-1 items-center flex-col sm:flex-row\"\r\n                            >\r\n                                <p className=\"font-medium\">{userOnPage.followers.length}</p>\r\n                                <p>{`follower${userOnPage.followers.length === 1 ? \"\" : \"s\"}`}</p>\r\n                            </button>\r\n                            <button\r\n                                onClick={(event) => handleNavigateFollowing(event)}\r\n                                className=\"flex gap-1 items-center flex-col sm:flex-row\"\r\n                            >\r\n                                <p className=\"font-medium\">{userOnPage.following.length}</p>\r\n                                <p>following</p>\r\n                            </button>\r\n                        </div>\r\n                        <p className=\"font-medium\">{userOnPage.fullName}</p>\r\n                        <div className=\"flex\"></div>\r\n                    </div>\r\n                </div>\r\n                {\r\n                    isUnfollowModalOpen ?\r\n                        <Modal\r\n                            closeEvent={closeUnfollowModal}\r\n                            styles=\"h-72 top-[26.5%]\"\r\n                        >\r\n                            <AreYouSureModal\r\n                                areYouSureEvent={areYouSureEvent}\r\n                                profileImage={userOnPage.profileImage}\r\n                                closeEvent={closeUnfollowModal}\r\n                                questionText={`Unfollow @${userOnPage.username}`}\r\n                                buttonText=\"Unfollow\"\r\n                            />\r\n                        </Modal> :\r\n                        null\r\n                }\r\n                <ProfileNavBar isUsersPage={false} />\r\n                <Outlet />\r\n            </div>\r\n    )\r\n})\r\n\r\nexport default UserOnPageProfile","import React from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport { useAppSelector } from 'redux-setup/hooks';\r\nimport Header from 'components/header/Header';\r\nimport LoggedUsersProfile from './components/user-page-types/LoggedUsersProfile';\r\nimport UserOnPageProfile from './components/user-page-types/UserOnPageProfile';\r\nimport Loading from 'pages/loading/Loading';\r\n\r\nconst DefineProfile: React.FC = React.memo(() => {\r\n    const { uid } = useParams();\r\n    const signedUser = useAppSelector(state => state.signedUser.user);\r\n\r\n    return (\r\n        !signedUser.userId.length ?\r\n            <Loading /> :\r\n            <>\r\n                <Header />\r\n                {\r\n                    signedUser.userId === uid ?\r\n                        <LoggedUsersProfile /> :\r\n                        <UserOnPageProfile />\r\n                }\r\n            </>\r\n    )\r\n})\r\n\r\nexport default DefineProfile;"],"names":["AreYouSureModal","React","areYouSureEvent","profileImage","closeEvent","buttonText","questionText","additionalText","className","src","length","process","onClick","signedUser","useAppSelector","state","user","navigate","useNavigate","createChatRoom","chosenUserId","chatId","userId","reversedChatId","getDocs","collection","db","allChats","chatToNavigateTo","forEach","doc","docResult","data","firstUserId","secondUserId","RoutesTypes","setDoc","messages","lastMessage","text","lastEdited","Date","getTime","deleteChatRoom","deleteDoc","message","media","imageRef","ref","storage","deleteObject","ChangeImageModal","currentUser","dispatch","useAppDispatch","uploadImage","useCallback","event","target","files","createNewProfileImage","image","deleteImage","deleteProfileImage","type","accept","onChange","undefined","xmlns","fill","viewBox","stroke","strokeWidth","strokeLinecap","strokeLinejoin","d","isUsersPage","location","useLocation","defineLocation","pathNameArray","pathname","split","ProfileRoutes","useState","currentTab","setCurrentTab","useEffect","Saved","styles","includeHovering","status","uid","useParams","shouldRedirect","setShouldRedirect","isImageModalOpen","setIsImageModalOpen","fetchSignedUser","clearErrors","handleNavigateFollowers","stopPropagation","handleNavigateFollowing","openImageModal","closeImageModal","to","username","posts","followers","following","fullName","Modal","userOnPage","loggedUser","isUnfollowModalOpen","setIsUnfollowModalOpen","useChatRoom","fetchUserOnPage","handleMessageClick","handleFollowingClick","handleFollowClick","addToFollowing","removeFromFollowing","closeUnfollowModal","some","Header","Loading"],"sourceRoot":""}