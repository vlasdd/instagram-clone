{"version":3,"file":"static/js/452.0a8bcb4d.chunk.js","mappings":"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","sources":["svgs/filled/FilledComment.tsx","components/post/PostImage.tsx","helpers/other/generate-random/generateRandom.ts","pages/explore/hooks/useSuggestions.tsx","pages/explore/Explore.tsx","svgs/filled/FilledHeart.tsx"],"sourcesContent":["import React from 'react'\r\n\r\nconst FilledComment: React.FC<{ styles: string }> = ({ styles }) => {\r\n    return (\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" className={styles} viewBox=\"0 0 20 20\" fill=\"currentColor\">\r\n            <path fillRule=\"evenodd\" d=\"M18 10c0 3.866-3.582 7-8 7a8.841 8.841 0 01-4.083-.98L2 17l1.338-3.123C2.493 12.767 2 11.434 2 10c0-3.866 3.582-7 8-7s8 3.134 8 7zM7 9H5v2h2V9zm8 0h-2v2h2V9zM9 9h2v2H9V9z\" clipRule=\"evenodd\" />\r\n        </svg>\r\n    )\r\n}\r\n\r\nexport default FilledComment","import React, { useCallback, useState } from 'react'\r\nimport { useNavigate } from 'react-router-dom';\r\nimport ProfileRoutes from 'constants/profile-routes';\r\nimport FilledComment from 'svgs/filled/FilledComment';\r\nimport FilledHeart from 'svgs/filled/FilledHeart';\r\nimport PostType from 'types/postType'\r\n\r\nconst PostImage: React.FC<PostType> = React.memo(({ postImage, postId, likes, comments, }) => {\r\n    const [isHovered, setIsHovered] = useState<boolean>(false);\r\n    const navigate = useNavigate();\r\n\r\n    const makeHoveredTrue = useCallback(() => {\r\n        setIsHovered(true)\r\n    }, [])\r\n\r\n    const makeHoveredFalse = useCallback(() => {\r\n        setIsHovered(false)\r\n    }, [])\r\n\r\n    const navigateToPost = useCallback(() => {\r\n        navigate(ProfileRoutes.POST + postId)\r\n    }, [postId])\r\n\r\n    return (\r\n        <div \r\n            className=\"relative z-10 w-full h-full aspect-square cursor-pointer rounded-sm\"\r\n            onMouseEnter={makeHoveredTrue}\r\n            onMouseLeave={makeHoveredFalse}\r\n            onClick={navigateToPost}\r\n        >\r\n            <img\r\n                src={postImage}\r\n                className={`w-full h-full object-cover rounded-sm ${isHovered && \"brightness-75\"}`}\r\n            />\r\n            {\r\n                isHovered ?\r\n                    <div className=\"absolute top-[50%] left-[50%] translate-y-[-50%] translate-x-[-50%] flex gap-4\">\r\n                        <div className=\"flex gap-1 items-center\">\r\n                            <FilledHeart styles=\"h-6 w-6 text-white\" />\r\n                            <p className=\"text-lg font-medium text-white\">{likes.length}</p>\r\n                        </div>\r\n                        <div className=\"flex gap-1 items-center\">\r\n                            <FilledComment styles=\"h-6 w-6 text-white\" />\r\n                            <p className=\"text-lg font-medium text-white\">{comments.length}</p>\r\n                        </div>\r\n                    </div> :\r\n                    null\r\n            }\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default PostImage","const random = (min: number, max: number) => Math.floor(Math.random() * (max - min)) + min;\r\n\r\nexport default random","import { db } from \"firebase-setup/firebaseConfig\";\r\nimport { collection, getDocs, query, where } from \"firebase/firestore\";\r\nimport random from \"helpers/other/generate-random/generateRandom\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useAppSelector } from \"redux-setup/hooks\";\r\nimport PostType from \"types/postType\";\r\nimport UserState from \"types/userStateType\";\r\n\r\nconst SUGGESTIONS_AMOUNT = 30;\r\n\r\ntype UseSuggestionsType = () => {\r\n    postsSuggestions: PostType[],\r\n    setPostsSuggestions: React.Dispatch<React.SetStateAction<PostType[]>>\r\n}\r\n\r\nconst useSuggestions: UseSuggestionsType = () => {\r\n    const loggedUser = useAppSelector(state => state.signedUser.user);\r\n    const [postsSuggestions, setPostsSuggestions] = useState<PostType[]>([]);\r\n\r\n    useEffect(() => {\r\n        const getSuggestions = async () => {\r\n            const usersRef = collection(db, \"users\");\r\n            const q = query(usersRef, where(\"username\", \">=\", \"\"));\r\n            const querySnapshot = await getDocs(q);\r\n            let peopleContainer: UserState[] = [];\r\n            let i = 0;\r\n\r\n            while (peopleContainer.length !== SUGGESTIONS_AMOUNT) {\r\n                const index = random(0, querySnapshot.docs.length);\r\n                const currentDoc = querySnapshot.docs[index].data() as UserState;\r\n\r\n                const isUserIncluded = peopleContainer.some(user => user.userId === currentDoc.userId);\r\n                const isUserCurrent = currentDoc.userId === loggedUser.userId;\r\n                const hasUserPosts = currentDoc.posts.length !== 0\r\n\r\n                if (!isUserIncluded && !isUserCurrent && hasUserPosts) {\r\n                    peopleContainer = [...peopleContainer, currentDoc];\r\n                }\r\n\r\n                if (i > SUGGESTIONS_AMOUNT * 100) {\r\n                    break;\r\n                }\r\n                i++;\r\n            }\r\n\r\n            peopleContainer.forEach(person => {\r\n                const index = random(0, person.posts.length);\r\n                setPostsSuggestions(prevPosts => [...prevPosts, person.posts[index]])\r\n            })\r\n        }\r\n\r\n        if(loggedUser.userId.length){\r\n            getSuggestions();\r\n        }\r\n    }, [loggedUser.userId])\r\n\r\n    return { postsSuggestions, setPostsSuggestions }\r\n}\r\n\r\nexport default useSuggestions","import Header from 'components/header/Header';\r\nimport PostImage from 'components/post/PostImage';\r\nimport RoutesTypes from 'constants/routes-types';\r\nimport { auth } from 'firebase-setup/firebaseConfig';\r\nimport Loading from 'pages/loading/Loading';\r\nimport React, { useMemo } from 'react'\r\nimport { Navigate, Outlet } from 'react-router-dom';\r\nimport { useAppSelector } from 'redux-setup/hooks';\r\nimport useSuggestions from './hooks/useSuggestions'\r\n\r\nconst Explore: React.FC = () => {\r\n    const loggedUser = useAppSelector(state => state.signedUser.user);\r\n\r\n    const { postsSuggestions, setPostsSuggestions }  = useSuggestions();\r\n    \r\n    const postsImageElements = useMemo(() => [...postsSuggestions].reverse().map(post => (\r\n        <PostImage {...post} key={post.postId}/>\r\n    )), [postsSuggestions])\r\n\r\n    return (\r\n        !auth.currentUser ?\r\n            <Navigate to={RoutesTypes.LOGIN} /> :\r\n            !loggedUser.userId.length ?\r\n                <Loading /> :\r\n                <>\r\n                    <div className=\"back flex flex-col items-center min-h-[100vh]\">\r\n                        <Header />\r\n                        <div className=\"w-full grid grid-cols-3 auto-rows-fr gap-1 sm:gap-6 sm:w-3/4 lg:w-2/3 mt-2 max-w-[1000px]\">\r\n                            {postsImageElements}\r\n                        </div>\r\n                    </div>\r\n                    <Outlet context={{ posts: postsSuggestions, changePosts: setPostsSuggestions }}/>\r\n                </>\r\n    )\r\n}\r\n\r\nexport default Explore","import React from 'react'\r\n\r\nconst FilledHeart: React.FC<{ styles: string }> = ({ styles }) => {\r\n    return (\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" className={styles} viewBox=\"0 0 20 20\" fill=\"currentColor\">\r\n            <path fillRule=\"evenodd\" d=\"M3.172 5.172a4 4 0 015.656 0L10 6.343l1.172-1.171a4 4 0 115.656 5.656L10 17.657l-6.828-6.829a4 4 0 010-5.656z\" clipRule=\"evenodd\" />\r\n        </svg>\r\n    )\r\n}\r\n\r\nexport default FilledHeart"],"names":["styles","xmlns","className","viewBox","fill","fillRule","d","clipRule","React","postImage","postId","likes","comments","useState","isHovered","setIsHovered","navigate","useNavigate","makeHoveredTrue","useCallback","makeHoveredFalse","navigateToPost","ProfileRoutes","onMouseEnter","onMouseLeave","onClick","src","FilledHeart","length","min","max","Math","floor","random","loggedUser","useAppSelector","state","signedUser","user","postsSuggestions","setPostsSuggestions","useEffect","getSuggestions","usersRef","collection","db","q","query","where","getDocs","querySnapshot","peopleContainer","i","index","docs","currentDoc","data","isUserIncluded","some","userId","isUserCurrent","hasUserPosts","posts","SUGGESTIONS_AMOUNT","forEach","person","prevPosts","useSuggestions","postsImageElements","useMemo","reverse","map","post","PostImage","key","auth","Header","context","changePosts","Loading","to","RoutesTypes"],"sourceRoot":""}