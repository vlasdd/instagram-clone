{"version":3,"file":"static/js/566.1a3a8d53.chunk.js","mappings":"qHAEA,IAFe,SAACA,EAAaC,GAAd,OAA8BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,IAAQA,I,8MC8CvF,EAvCmE,SAACK,GAChE,IAAMC,GAAaC,EAAAA,EAAAA,IAAe,SAAAC,GAAK,OAAIA,EAAMC,WAAWC,QAE5D,GAA8CC,EAAAA,EAAAA,UAAsB,IAApE,eAAOC,EAAP,KAAwBC,EAAxB,KAiCA,OA/BAC,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAc,mCAAG,qGACbC,GAAWC,EAAAA,EAAAA,IAAWC,EAAAA,GAAI,SAC1BC,GAAIC,EAAAA,EAAAA,IAAMJ,GAAUK,EAAAA,EAAAA,IAAM,WAAY,KAAM,KAF/B,UAGSC,EAAAA,EAAAA,IAAQH,GAHjB,OAGbI,EAHa,OAIfC,EAA6B,GAC7BC,EAAI,EALW,aAQf,IAAMC,GAAQtB,EAAAA,EAAAA,GAAO,EAAGmB,EAAcI,KAAKC,QACrCC,EAAaN,EAAcI,KAAKD,GAAOI,OAEvCC,EAAiBP,EAAcQ,MAAK,SAAAtB,GAAI,OAAIA,EAAKuB,SAAWJ,EAAWI,UACvEC,EAAiB5B,EAAW6B,UAAUH,MAAK,SAAAtB,GAAI,OAAIA,EAAKuB,SAAWJ,EAAWI,UAC9EG,EAAgBP,EAAWI,SAAW3B,EAAW2B,OAOvD,GALKF,GAAmBG,GAAmBE,IACvCvB,GAAmB,SAAAwB,GAAS,wBAAQA,GAAR,CAAmBR,OAC/CL,EAAa,kBAAOA,GAAP,CAAsBK,KAGpCJ,EAAwB,IAApBpB,EACH,cAEJoB,KAvBe,UAOZD,EAAcI,SAAWvB,EAPb,kJAAH,qDA2BpBU,MACD,IAEIH,G,oECuDX,EApF+C0B,EAAAA,MAAW,YAAgE,IAA7DC,EAA4D,EAA5DA,aAAcC,EAA8C,EAA9CA,SAAUC,EAAoC,EAApCA,SAAUR,EAA0B,EAA1BA,OAAQS,EAAkB,EAAlBA,YAC7FpC,GAAaC,EAAAA,EAAAA,IAAe,SAAAC,GAAK,OAAIA,EAAMC,WAAWC,QACtDiC,GAAWC,EAAAA,EAAAA,KAEXC,GAAWC,EAAAA,EAAAA,MACTC,GAAQC,EAAAA,EAAAA,MAARD,IAER,GAAsDpC,EAAAA,EAAAA,WAAkB,GAAxE,eAAOsC,EAAP,KAA4BC,EAA5B,KAEMC,GAAoBC,EAAAA,EAAAA,cAAY,SAACC,GACnCA,EAAMC,kBACNX,GAASY,EAAAA,EAAAA,GAAe,CAAEtB,OAAAA,EAAQc,IAAKA,OACxC,CAACd,EAAQc,IAENS,GAAuBJ,EAAAA,EAAAA,cAAY,SAACC,GACtCA,EAAMC,kBACNJ,GAAuB,KACxB,IAEGO,GAAkBL,EAAAA,EAAAA,cAAY,WAChCF,GAAuB,GACvBP,GAASe,EAAAA,EAAAA,GAAoB,CAAEzB,OAAAA,EAAQc,IAAKA,OAC7C,CAACd,EAAQc,IAENY,GAAoBP,EAAAA,EAAAA,cAAY,WAClCP,EAASe,EAAAA,EAAAA,UAAwB3B,KAClC,CAACA,IAEE4B,GAAqBT,EAAAA,EAAAA,cAAY,WACnCF,GAAuB,KACxB,IAEH,OACI,iBAAKY,UAAU,6DAAf,WACI,oBACIA,UAAU,mDACVC,QAASJ,EAFb,WAII,gBACIK,IAAKzB,EAAaX,OAASW,EAAe0B,kDAC1CH,UAAU,uCAEd,iBAAKA,UAAU,4BAAf,WACI,cAAGA,UAAU,sDAAb,SAAoEtB,KACpE,cAAGsB,UAAU,0CAAb,SACKpB,EAAc,cAAgBD,UAKvCnC,EAAW6B,UAAUH,MAAK,SAAAF,GAAI,OAAIA,EAAKG,SAAWA,MAC9C,mBACI6B,UAAU,2DACVC,QAASP,EAFb,wBAMA,mBACIM,UAAU,yEACVC,QAASZ,EAFb,oBAQJF,GACI,SAACiB,EAAA,EAAD,CACIC,WAAYN,EACZO,OAAO,mBAFX,UAII,SAACC,EAAA,EAAD,CACIZ,gBAAiBA,EACjBlB,aAAcA,EACd4B,WAAYN,EACZS,aAAY,mBAAc9B,GAC1B+B,WAAW,eAGnB,WCapB,EA/F0BjC,EAAAA,MAAW,WACjC,IAAMhC,GAAaC,EAAAA,EAAAA,IAAe,SAAAC,GAAK,OAAIA,EAAMC,WAAWC,QACtDmC,GAAWC,EAAAA,EAAAA,MAEXlC,EAAkB4D,EAND,GAQjBC,GAAoBrB,EAAAA,EAAAA,cAAY,WAElC,IADA,IAAMsB,EAAY,GACTjD,EAAI,EAAGA,EAVG,EAUqBA,IACpCiD,EAAUC,MACN,SAACC,EAAA,EAAD,CAEIC,YAAa,CAAEC,MAAO,GAAIC,OAAQ,GAAIC,aAAc,OACpDC,gBAAiB,CAAEH,MAAO,IAAKC,OAAQ,EAAGC,aAAc,QACxDE,iBAAkB,CAAEJ,MAAO,GAAIC,OAAQ,EAAGC,aAAc,QACxDG,OAAO,cAJF1D,IASjB,OAAOiD,IACR,IAEGU,GAAQC,EAAAA,EAAAA,UAAQ,kBAAMzE,EAAgB0E,KAAI,SAAAxD,GAAI,OAChD,mBAAC,GAAD,kBACQA,GADR,IAEIyD,IAAKzD,EAAKG,OAAS,aACnBS,YAAaZ,EAAKK,UAAUH,MAAK,SAAAtB,GAAI,OAAIA,EAAKuB,SAAW3B,EAAW2B,kBAExE,CAACrB,IAEC+C,GAAoBP,EAAAA,EAAAA,cAAY,WAClCP,EAASe,EAAAA,EAAAA,UAAwBtD,EAAW2B,UAC7C,CAAC3B,EAAW2B,SAEf,OACI,mBAAO6B,UAAU,gCAAjB,WACI,iBAAKA,UAAU,mEAAf,WACI,oBACIA,UAAU,mDACVC,QAASJ,EAFb,WAII,gBACIK,IACI1D,EAAWiC,aAAaX,OACpBtB,EAAWiC,aACX0B,kDAERH,UAAU,yCAEd,iBAAKA,UAAU,4BAAf,WACI,cAAGA,UAAU,sDAAb,SAAoExD,EAAWkC,YAC/E,cAAGsB,UAAU,0CAAb,SAAwDxD,EAAWmC,kBAG3E,mBACIqB,UAAU,+DADd,wBAMJ,iBAAKA,UAAU,mCAAf,WACI,cAAGA,UAAU,oCAAb,kCACA,SAAC,KAAD,CACIA,UAAU,sBACV0B,GAAI5B,EAAAA,EAAAA,OAFR,yBAOJ,gBAAKE,UAAU,2BAAf,SAEyB,IAAjBsB,EAAMxD,OACFwD,EACAX,OAGZ,iBAAKX,UAAU,iDAAf,WACI,iBAAKA,UAAU,uBAAf,WACI,kCACA,iCACA,kCACA,gCACA,iCACA,oCACA,kCACA,qCACA,wCAEJ,cAAGA,UAAU,wBAAb,oD,UCxDhB,EA/B+C,SAAC2B,GAC5C,IAAMnF,GAAaC,EAAAA,EAAAA,IAAe,SAAAC,GAAK,OAAIA,EAAMC,WAAWC,QAC5D,GAA0CC,EAAAA,EAAAA,UAA4B,MAAtE,eAAO+E,EAAP,KAAsBC,EAAtB,KA0BA,OAxBA7E,EAAAA,EAAAA,YAAU,WACN,IAAM8E,EAAQ,mCAAG,qGACP5E,GAAWC,EAAAA,EAAAA,IAAWC,EAAAA,GAAI,SAC1BC,GAAIC,EAAAA,EAAAA,IAAMJ,GAAUK,EAAAA,EAAAA,IAAM,SAAU,KAAMf,EAAW6B,UAAUmD,KAAI,SAAAO,GAAO,OAAIA,EAAQ5D,YAF/E,UAGeX,EAAAA,EAAAA,IAAQH,GAHvB,OAGPI,EAHO,OAKP6D,EAAQ7D,EAAcI,KAAK2D,KAAI,SAAAQ,GAAG,OAAIA,EAAIhE,UAC1CiE,EAAWX,EAAMY,QAAO,SAACC,EAAmBvF,GAE9C,OADAA,EAAKwF,MAAMC,SAAQ,SAAAC,GAAI,OAAIH,EAAMtB,KAAKyB,MAC/BH,IACR,IAEGI,EAAeN,EAASO,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAEC,UAAYF,EAAEE,aAAWC,MAAM,EAAGjB,GACjFE,EAAiBU,GAZJ,2CAAH,qDAeX/F,EAAW6B,UAAUP,OACpBgE,IAGAD,EAAiB,MAEtB,IAEI,CAAED,cAAAA,EAAeC,iBAAAA,I,kDC9B5B,EARiD,SAAC,GAAgB,IAAdvB,EAAa,EAAbA,OAChD,OACI,gBAAKuC,MAAM,6BAA6B7C,UAAWM,EAAQwC,KAAK,OAAOC,QAAQ,YAAYC,OAAO,eAAeC,YAAa,EAA9H,UACI,iBAAMC,cAAc,QAAQC,eAAe,QAAQC,EAAE,gI,UCmGjE,EAzFoD5E,EAAAA,MAAW,YAA2B,IAAxB6B,EAAuB,EAAvBA,WAAYiC,EAAW,EAAXA,KACpEzD,GAAWC,EAAAA,EAAAA,KAEXC,GAAWC,EAAAA,EAAAA,MACTC,GAAQC,EAAAA,EAAAA,MAARD,IAER,GAAgDpC,EAAAA,EAAAA,WAAkB,GAAlE,eAAOwG,EAAP,KAAyBC,EAAzB,KAEMC,GAAsBjE,EAAAA,EAAAA,cAAY,WACpCT,GAASe,EAAAA,EAAAA,GAAoB,CAAEzB,OAAQmE,EAAKkB,OAAQvE,IAAKA,KACzDoB,MACD,CAACiC,EAAKkB,OAAQvE,IAEXwE,GAAanE,EAAAA,EAAAA,cAAY,WAC3BoE,UAAUC,UAAUC,UAChBC,OAAOC,SAASC,OAChB,oBACAjE,EAAAA,EAAAA,UACAwC,EAAKkB,OAAS,IACdQ,EAAAA,EAAAA,KACA1B,EAAK2B,QAET5D,MACD,CAACwD,OAAOC,SAASC,OAAQzB,EAAKkB,OAAQlB,EAAK2B,SAExCC,GAAiB5E,EAAAA,EAAAA,cAAY,WAC/BP,EAASe,EAAAA,EAAAA,UAAwBwC,EAAKkB,OAAS,IAAMQ,EAAAA,EAAAA,KAAqB1B,EAAK2B,UAChF,CAAC3B,EAAKkB,OAAQlB,EAAK2B,SAEhBE,GAAiB7E,EAAAA,EAAAA,cAAY,WAC/BgE,GAAoB,KACrB,IAEGc,GAAkB9E,EAAAA,EAAAA,cAAY,WAChCgE,GAAoB,KACrB,IAEH,OACI,iCACI,iBAAKtD,UAAU,2CAAf,WACI,mBACIA,UAAU,iHACVC,QAASsD,EAFb,uBAMA,mBACIvD,UAAU,qFACVC,QAASiE,EAFb,yBAMA,mBACIlE,UAAU,qFACVC,QAASkE,EAFb,uBAMA,mBACInE,UAAU,qFACVC,QAASwD,EAFb,wBAMA,mBACIzD,UAAU,kGACVC,QAASI,EAFb,uBAQAgD,GACI,SAACjD,EAAA,EAAD,CACIC,WAAY+D,EACZ9D,OAAO,sBAFX,UAII,SAAC+D,EAAA,EAAD,CACIhE,WAAY+D,EACZE,YAAahC,MAGrB,WCfpB,EAhE8C9D,EAAAA,MAAW,YAAyB,IAAtB+F,EAAqB,EAArBA,SAAUjC,EAAW,EAAXA,KAC5DvD,GAAWC,EAAAA,EAAAA,MACjB,GAAsDnC,EAAAA,EAAAA,WAAkB,GAAxE,eAAO2H,EAAP,KAA4BC,EAA5B,KAEM5E,GAAoBP,EAAAA,EAAAA,cAAY,WAClCP,EAASe,EAAAA,EAAAA,UAAwByE,EAASpG,UAC3C,CAACoG,EAASpG,SAEPuG,GAAoBpF,EAAAA,EAAAA,cAAY,WAClCmF,GAAuB,KACxB,IAEGE,GAAqBrF,EAAAA,EAAAA,cAAY,WACnCmF,GAAuB,KACxB,IAEH,OACI,iBAAKzE,UAAU,oDAAf,UAEQuE,EAASpG,OAAOL,QACZ,oBACIkC,UAAU,+CACVC,QAASJ,EAFb,WAII,gBACIK,IACIqE,EAAS9F,aAAaX,OAClByG,EAAS9F,aACT0B,mDAERH,UAAU,uCAEd,cAAGA,UAAU,0DAAb,SAAwEuE,EAAS7F,eAErF,SAACoC,EAAA,EAAD,CACIC,YAAa,CAAEC,MAAO,GAAIC,OAAQ,GAAIC,aAAc,OACpDC,gBAAiB,CAAEH,MAAO,IAAKC,OAAQ,EAAGC,aAAc,QACxDE,iBAAkB,CAAEJ,MAAO,GAAIC,OAAQ,EAAGC,aAAc,QACxDG,OAAO,UAGnB,mBACIrB,UAAU,OACVC,QAASyE,EAFb,UAII,SAAC,EAAD,CAAYpE,OAAO,cAGnBkE,GACI,SAACpE,EAAA,EAAD,CACIC,WAAYsE,EACZrE,OAAO,iBAFX,UAII,SAAC,EAAD,CACID,WAAYsE,EACZrC,KAAMA,MAGd,WCmBpB,EA9EkC9D,EAAAA,MAAW,YAAmC,IAAhC8F,EAA+B,EAA/BA,YAAaM,EAAkB,EAAlBA,YACnDpI,GAAaC,EAAAA,EAAAA,IAAe,SAAAC,GAAK,OAAIA,EAAMC,WAAWC,QAEtDiI,GAAcC,EAAAA,EAAAA,QAA0C,MAE9D,GAAwCjI,EAAAA,EAAAA,UAAiB,IAAzD,eAAOkI,EAAP,KAAqBC,EAArB,KACMT,GAAWU,EAAAA,EAAAA,GAAYX,EAAYd,QAEnC0B,GAAiB5F,EAAAA,EAAAA,cAAY,kBAAMsF,GAAY,SAACxC,GAAD,OAAuBA,EAAMZ,KAAI,SAAAc,GAClF,OAAIA,EAAK2B,SAAWK,EAAYL,QACrB,kBAAK3B,GAAZ,IAAkB6C,MAAM,GAAD,eAAM7C,EAAK6C,OAAX,CAAkB,CAAEhH,OAAQ3B,EAAW2B,YAG3DmE,UACQ,CAACgC,EAAYL,OAAQzH,EAAW2B,SAE7CiH,GAAoB9F,EAAAA,EAAAA,cAAY,kBAAMsF,GAAY,SAACxC,GAAD,OAAuBA,EAAMZ,KAAI,SAAAc,GACrF,OAAIA,EAAK2B,SAAWK,EAAYL,QACrB,kBAAK3B,GAAZ,IAAkB6C,MAAO7C,EAAK6C,MAAME,QAAO,SAAAC,GAAG,OAAIA,EAAInH,SAAW3B,EAAW2B,YAGzEmE,UACQ,CAACgC,EAAYL,OAAQzH,EAAW2B,SAE7CoH,GAAuBjG,EAAAA,EAAAA,cAAY,WACrC,IAAMkG,EAAiBlB,EAAYmB,SAAS3H,OAC5C,MAAM,YAAN,OAAmB0H,EAAeE,WAAWC,QAAQ,wBAAyB,KAA9E,mBAAgH,IAAnBH,EAAuB,GAAK,OAC1H,CAAClB,EAAYmB,SAAS3H,SAEzB,OACI,qBAASkC,UAAU,yDAAnB,WACI,SAAC,EAAD,CACIuE,SAAUA,EACVjC,KAAMgC,KAEV,gBAAKtE,UAAU,6DAAf,UACI,gBACIE,IAAKoE,EAAYsB,UACjB5F,UAAU,oCAGlB,SAAC6F,EAAA,EAAD,CACIvB,YAAaA,EACbO,YAAaA,EACbK,eAAgBA,EAChBE,kBAAmBA,KAEvB,iBAAKpF,UAAU,wCAAf,WACI,eAAGA,UAAU,mBAAb,WACI,SAAC,KAAD,CACIA,UAAU,sBACV0B,GAAI5B,EAAAA,EAAAA,UAAwByE,EAASpG,OAFzC,SAIKoG,EAAS7F,YAEd,kBAAMsB,UAAU,UAAhB,UAA2B,IAAKsE,EAAYwB,YAEhD,SAAC,KAAD,CACI9F,UAAU,OACV0B,GAAI5B,EAAAA,EAAAA,UAAwBkE,EAAAA,EAAAA,KAAqBM,EAAYL,OAFjE,UAII,cAAGjE,UAAU,2CAAb,SACKuF,YAIb,SAACQ,EAAA,EAAD,CAAMpD,UAAW2B,EAAY3B,aAC7B,SAACqD,EAAA,EAAD,CACIjB,aAAcA,EACdC,gBAAiBA,EACjBH,YAAaA,EACbP,YAAaA,EACbM,YAAaA,UCrC7B,EA5C2BpG,EAAAA,MAAW,WAClC,IAAMwC,GAAQiF,EAAAA,EAAAA,KAEd,EAA4CC,EAL3B,IAKTtE,EAAR,EAAQA,cAAeC,EAAvB,EAAuBA,iBAEjBsE,GAAkB5E,EAAAA,EAAAA,UAAQ,yBAAMK,QAAN,IAAMA,OAAN,EAAMA,EAAeJ,KAAI,SAAAc,GAAI,OACzD,SAAC,EAAD,CACIgC,YAAahC,EACbsC,YAAa/C,GACRS,EAAK2B,OAAS3B,EAAKkB,aAE5B,CAAC5B,IAEL,OACI,gBAAK5B,UAAS,eAA4B,OAAlB4B,GAAmD,IAAzBA,EAAc9D,OAAe,SAAW,IAA1F,SAES8D,GAOG,iCACI,0BACI,iBAAK5B,UAAS,2CAAsCgB,EAAQ,IAAM,YAAc,UAAhF,UACKmF,GACD,iBAAKnG,UAAU,+CAAf,WACI,gBACIE,IAAKC,mCACLH,UAAU,UAEd,cAAGA,UAAU,UAAb,mCACA,cAAGA,UAAU,wBAAb,mEAIZ,SAAC,KAAD,CAAQoG,QAAS,CAAEhE,OAAO,OAAIR,GAAeyE,UAAWzB,YAAa/C,SApBzE,gBAAK7B,UAAS,eAAUgB,EAAQ,IAAM,YAAc,SAAtC,qCAAd,UACI,gBACIsF,MAAO,CAAE,eAAkB,eAC3BtG,UAAU,sF,UCMtC,EAvB4BxB,EAAAA,MAAW,WACnC,IAAMhC,GAAaC,EAAAA,EAAAA,IAAe,SAAAC,GAAK,OAAIA,EAAMC,WAAWC,QACtD2J,GAAcN,EAAAA,EAAAA,KAEpB,OACKO,EAAAA,GAAAA,YAEIhK,EAAW2B,OAAOL,QAEf,iBAAKkC,UAAU,0EAAf,WACI,SAACyG,EAAA,EAAD,KACA,iBAAKzG,UAAU,gFAAf,WACI,SAAC,EAAD,IAEIuG,EAAc,KACV,SAAC,EAAD,IACA,YARhB,SAACG,EAAA,EAAD,KAFJ,SAAC,KAAD,CAAUhF,GAAI5B,EAAAA,EAAAA","sources":["helpers/other/generate-random/generateRandom.ts","pages/dashboard/hooks/useSuggestions.ts","pages/dashboard/components/sidebar/components/Suggestion.tsx","pages/dashboard/components/sidebar/Sidebar.tsx","pages/dashboard/hooks/usePostsToRender.ts","svgs/empty/Additional.tsx","pages/dashboard/components/timeline/components/SettingsModal.tsx","pages/dashboard/components/timeline/components/PostHeader.tsx","pages/dashboard/components/timeline/components/Post.tsx","pages/dashboard/components/timeline/Timeline.tsx","pages/dashboard/Dashboard.tsx"],"sourcesContent":["const random = (min: number, max: number) => Math.floor(Math.random() * (max - min)) + min;\r\n\r\nexport default random","import { db } from \"firebase-setup/firebaseConfig\";\r\nimport { collection, getDocs, query, where } from \"firebase/firestore\";\r\nimport random from \"helpers/other/generate-random/generateRandom\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useAppSelector } from \"redux-setup/hooks\";\r\nimport UserState from \"types/userStateType\";\r\n\r\nconst useSuggestions: (suggestionsLength: number) => UserState[] = (suggestionsLength) => {\r\n    const loggedUser = useAppSelector(state => state.signedUser.user);\r\n\r\n    const [suggestionsInfo, setSuggestionsInfo] = useState<UserState[]>([]);\r\n\r\n    useEffect(() => {\r\n        const getSuggestions = async () => {\r\n            const usersRef = collection(db, \"users\");\r\n            const q = query(usersRef, where(\"username\", \">=\", \"\"));\r\n            const querySnapshot = await getDocs(q);\r\n            let docsContainer: UserState[] = [];\r\n            let i = 0;\r\n\r\n            while (docsContainer.length !== suggestionsLength) {\r\n                const index = random(0, querySnapshot.docs.length);\r\n                const currentDoc = querySnapshot.docs[index].data() as UserState;\r\n\r\n                const isUserIncluded = docsContainer.some(user => user.userId === currentDoc.userId)\r\n                const isUserFollowed = loggedUser.following.some(user => user.userId === currentDoc.userId)\r\n                const isUserCurrent = currentDoc.userId === loggedUser.userId;\r\n\r\n                if (!isUserIncluded && !isUserFollowed && !isUserCurrent) {\r\n                    setSuggestionsInfo(prevUsers => [...prevUsers, currentDoc])\r\n                    docsContainer = [...docsContainer, currentDoc];\r\n                }\r\n\r\n                if(i > suggestionsLength * 1000){\r\n                    break;\r\n                }\r\n                i++;\r\n            }\r\n        }\r\n\r\n        getSuggestions();\r\n    }, [])\r\n\r\n    return suggestionsInfo\r\n}\r\n\r\nexport default useSuggestions","import React, { useCallback, useState } from 'react';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport RoutesTypes from 'constants/routes-types';\r\nimport { useAppDispatch, useAppSelector } from 'redux-setup/hooks';\r\nimport UserSuggestionType from 'types/userSuggestionType';\r\nimport Modal from 'components/modal/Modal';\r\nimport AreYouSureModal from 'components/modal/AreYouSureModal';\r\nimport addToFollowing from \"redux-setup/features/signed-user/thunks/addToFollowing\";\r\nimport removeFromFollowing from \"redux-setup/features/signed-user/thunks/removeFromFollowing\";\r\n\r\ninterface ISuggestionProps extends UserSuggestionType {\r\n    isFollowing: boolean;\r\n}\r\n\r\nconst Suggestion: React.FC<ISuggestionProps> = React.memo(({ profileImage, username, fullName, userId, isFollowing }) => {\r\n    const loggedUser = useAppSelector(state => state.signedUser.user);\r\n    const dispatch = useAppDispatch();\r\n\r\n    const navigate = useNavigate();\r\n    const { uid } = useParams();\r\n\r\n    const [isUnfollowModalOpen, setIsUnfollowModalOpen] = useState<boolean>(false);\r\n\r\n    const handleFollowClick = useCallback((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        event.stopPropagation();\r\n        dispatch(addToFollowing({ userId, uid: uid as string }));\r\n    }, [userId, uid])\r\n\r\n    const handleFollowingClick = useCallback((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        event.stopPropagation();\r\n        setIsUnfollowModalOpen(true);\r\n    }, [])\r\n\r\n    const areYouSureEvent = useCallback(() => {\r\n        setIsUnfollowModalOpen(false)\r\n        dispatch(removeFromFollowing({ userId, uid: uid as string }))\r\n    }, [userId, uid])\r\n\r\n    const navigateToProfile = useCallback(() => {\r\n        navigate(RoutesTypes.DASHBOARD + userId)\r\n    }, [userId])\r\n\r\n    const closeUnfollowModal = useCallback(() => {\r\n        setIsUnfollowModalOpen(false)\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"flex w-full h-8 mb-1 justify-between items-center my-[4px]\">\r\n            <button \r\n                className=\"w-full h-full py-[0.5px] gap-2 flex items-center\"\r\n                onClick={navigateToProfile}\r\n            >\r\n                <img\r\n                    src={profileImage.length ? profileImage : process.env.PUBLIC_URL + \"/images/default-avatar-gray.jpg\"}\r\n                    className=\"h-8 w-8 rounded-full object-cover\"\r\n                />\r\n                <div className=\"flex flex-col items-start\">\r\n                    <p className=\"font-medium text-sm tracking-wide whitespace-nowrap\">{username}</p>\r\n                    <p className=\"text-gray-400 text-sm whitespace-nowrap\">\r\n                        {isFollowing ? \"Follows you\" : fullName}\r\n                    </p>\r\n                </div>\r\n            </button>\r\n            {\r\n                loggedUser.following.some(data => data.userId === userId) ?\r\n                    <button\r\n                        className=\"rounded text-gray-800 text-sm font-medium cursor-pointer\"\r\n                        onClick={handleFollowingClick}\r\n                    >\r\n                        Following\r\n                    </button> :\r\n                    <button\r\n                        className=\"font-medium text-cyan-500 rounded cursor-pointer text-sm tracking-wide\"\r\n                        onClick={handleFollowClick}\r\n                    >\r\n                        Follow\r\n                    </button>\r\n            }\r\n            {\r\n                isUnfollowModalOpen ?\r\n                    <Modal\r\n                        closeEvent={closeUnfollowModal}\r\n                        styles=\"h-72 top-[26.5%]\"\r\n                    >\r\n                        <AreYouSureModal\r\n                            areYouSureEvent={areYouSureEvent}\r\n                            profileImage={profileImage}\r\n                            closeEvent={closeUnfollowModal}\r\n                            questionText={`Unfollow ${username}`}\r\n                            buttonText=\"Unfollow\"\r\n                        />\r\n                    </Modal> :\r\n                    null\r\n            }\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default Suggestion","import UserLoader from 'components/other/UserLoader';\r\nimport RoutesTypes from 'constants/routes-types';\r\nimport useSuggestions from 'pages/dashboard/hooks/useSuggestions';\r\nimport React, { useCallback, useMemo } from 'react'\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport { useAppSelector } from 'redux-setup/hooks';\r\nimport Suggestion from './components/Suggestion';\r\n\r\nconst SUGGESTIONS_LENGTH = 5;\r\n\r\nconst Sidebar: React.FC = React.memo(() => {\r\n    const loggedUser = useAppSelector(state => state.signedUser.user);\r\n    const navigate = useNavigate();\r\n\r\n    const suggestionsInfo = useSuggestions(SUGGESTIONS_LENGTH)\r\n\r\n    const generateSkeletons = useCallback(() => {\r\n        const skeletons = [];\r\n        for (let i = 0; i < SUGGESTIONS_LENGTH; i++) {\r\n            skeletons.push(\r\n                <UserLoader\r\n                    key={i}\r\n                    imageStyles={{ width: 32, height: 32, borderRadius: \"50%\" }}\r\n                    firstTextStyles={{ width: 120, height: 7, borderRadius: \"10px\" }}\r\n                    secondTextStyles={{ width: 80, height: 7, borderRadius: \"10px\" }}\r\n                    margin=\"ml-[-13px]\"\r\n                />\r\n            );\r\n        }\r\n\r\n        return skeletons\r\n    }, [])\r\n\r\n    const users = useMemo(() => suggestionsInfo.map(data => (\r\n        <Suggestion\r\n            {...data}\r\n            key={data.userId + \"suggestion\"}\r\n            isFollowing={data.following.some(user => user.userId === loggedUser.userId)}\r\n        />\r\n    )), [suggestionsInfo])\r\n\r\n    const navigateToProfile = useCallback(() => {\r\n        navigate(RoutesTypes.DASHBOARD + loggedUser.userId)\r\n    }, [loggedUser.userId])\r\n\r\n    return (\r\n        <aside className=\"flex flex-col gap-4 w-[325px]\">\r\n            <div className=\"flex w-full h-13 mb-1 px-3 justify-between items-center my-[4px]\">\r\n                <button\r\n                    className=\"w-full h-full py-[0.5px] gap-2 flex items-center\"\r\n                    onClick={navigateToProfile}\r\n                >\r\n                    <img\r\n                        src={\r\n                            loggedUser.profileImage.length ?\r\n                                loggedUser.profileImage :\r\n                                process.env.PUBLIC_URL + \"/images/default-avatar-gray.jpg\"\r\n                        }\r\n                        className=\"h-11 w-11 rounded-full object-cover\"\r\n                    />\r\n                    <div className=\"flex flex-col items-start\">\r\n                        <p className=\"font-medium text-sm tracking-wide whitespace-nowrap\">{loggedUser.username}</p>\r\n                        <p className=\"text-gray-400 text-sm whitespace-nowrap\">{loggedUser.fullName}</p>\r\n                    </div>\r\n                </button>\r\n                <button\r\n                    className=\"h-7 rounded text-cyan-500 text-sm font-medium cursor-pointer\"\r\n                >\r\n                    Switch\r\n                </button>\r\n            </div>\r\n            <div className=\"flex w-full justify-between px-3\">\r\n                <p className=\"text-gray-500 font-medium text-sm\">Suggestions For You</p>\r\n                <Link\r\n                    className=\"text-sm font-medium\"\r\n                    to={RoutesTypes.PEOPLE}\r\n                >\r\n                    See All\r\n                </Link>\r\n            </div>\r\n            <div className=\"flex flex-col gap-2 px-3\">\r\n                {\r\n                    users.length !== 0 ?\r\n                        users :\r\n                        generateSkeletons()\r\n                }\r\n            </div>\r\n            <div className=\"flex flex-col gap-4 text-xs text-gray-300 px-3\">\r\n                <div className=\"flex flex-wrap gap-2\">\r\n                    <p>About</p>\r\n                    <p>Help</p>\r\n                    <p>Press</p>\r\n                    <p>API</p>\r\n                    <p>Jobs</p>\r\n                    <p>Privacy</p>\r\n                    <p>Terms</p>\r\n                    <p>Location</p>\r\n                    <p>Language</p>\r\n                </div>\r\n                <p className=\"text-xs text-gray-300\">© 2022 INSTAGRAM FROM META</p>\r\n            </div>\r\n        </aside>\r\n    )\r\n})\r\n\r\nexport default Sidebar","import { db } from \"firebase-setup/firebaseConfig\";\r\nimport { collection, getDocs, query, where } from \"firebase/firestore\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useAppSelector } from \"redux-setup/hooks\";\r\nimport PostType from \"types/postType\";\r\nimport UserState from \"types/userStateType\";\r\n\r\ntype UsePostsToRenderType = ((postsAmount: number) => {\r\n    postsToRender: PostType[] | null,\r\n    setPostsToRender: React.Dispatch<React.SetStateAction<PostType[] | null>>,\r\n})\r\n\r\nconst usePostsToRender: UsePostsToRenderType = (postsAmount) => {\r\n    const loggedUser = useAppSelector(state => state.signedUser.user);\r\n    const [postsToRender, setPostsToRender] = useState<PostType[] | null>(null);\r\n\r\n    useEffect(() => {\r\n        const getPosts = async () => {\r\n            const usersRef = collection(db, \"users\");\r\n            const q = query(usersRef, where(\"userId\", \"in\", loggedUser.following.map(userObj => userObj.userId)));\r\n            const querySnapshot = await getDocs(q);\r\n\r\n            const users = querySnapshot.docs.map(doc => doc.data()) as UserState[]\r\n            const allPosts = users.reduce((accum: PostType[], user: UserState) => {\r\n                user.posts.forEach(post => accum.push(post));\r\n                return accum\r\n            }, [])\r\n\r\n            const currentPosts = allPosts.sort((a, b) => b.createdAt - a.createdAt).slice(0, postsAmount);\r\n            setPostsToRender(currentPosts)\r\n        }\r\n\r\n        if(loggedUser.following.length){\r\n            getPosts();\r\n        }\r\n        else{\r\n            setPostsToRender([])\r\n        }\r\n    }, [])\r\n\r\n    return { postsToRender, setPostsToRender }\r\n}\r\n\r\nexport default usePostsToRender","import React from 'react'\r\n\r\nconst Additional: React.FC<{ styles: string }> = ({ styles }) => {\r\n    return (\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" className={styles} fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" strokeWidth={2}>\r\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M5 12h.01M12 12h.01M19 12h.01M6 12a1 1 0 11-2 0 1 1 0 012 0zm7 0a1 1 0 11-2 0 1 1 0 012 0zm7 0a1 1 0 11-2 0 1 1 0 012 0z\" />\r\n        </svg>\r\n    )\r\n}\r\n\r\nexport default Additional","import React, { useCallback, useState } from 'react'\r\nimport PostType from 'types/postType';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport RoutesTypes from 'constants/routes-types';\r\nimport ProfileRoutes from 'constants/profile-routes';\r\nimport Modal from 'components/modal/Modal';\r\nimport SharePostModal from 'components/modal/SharePostModal';\r\nimport removeFromFollowing from \"redux-setup/features/signed-user/thunks/removeFromFollowing\";\r\nimport { useAppDispatch } from 'redux-setup/hooks';\r\n\r\ntype SettingsModalProps = {\r\n    closeEvent: () => void;\r\n    post: PostType\r\n}\r\n\r\nconst SettingsModal: React.FC<SettingsModalProps> = React.memo(({ closeEvent, post }) => {\r\n    const dispatch = useAppDispatch();\r\n    \r\n    const navigate = useNavigate();\r\n    const { uid } = useParams();\r\n\r\n    const [isShareModalOpen, setIsShareModalOpen] = useState<boolean>(false);\r\n\r\n    const handleUnfollowClick = useCallback(() => {\r\n        dispatch(removeFromFollowing({ userId: post.fromId, uid: uid as string }))\r\n        closeEvent()\r\n    }, [post.fromId, uid])\r\n\r\n    const handleCopy = useCallback(() => {\r\n        navigator.clipboard.writeText(\r\n            window.location.origin +\r\n            \"/instagram-clone#\" +\r\n            RoutesTypes.DASHBOARD +\r\n            post.fromId + \"/\" +\r\n            ProfileRoutes.POST +\r\n            post.postId\r\n        );\r\n        closeEvent();\r\n    }, [window.location.origin, post.fromId, post.postId])\r\n\r\n    const navigateToPost = useCallback(() => {\r\n        navigate(RoutesTypes.DASHBOARD + post.fromId + \"/\" + ProfileRoutes.POST + post.postId)\r\n    }, [post.fromId, post.postId])\r\n\r\n    const openShareModal = useCallback(() => {\r\n        setIsShareModalOpen(true)\r\n    }, [])\r\n\r\n    const closeShareModal = useCallback(() => {\r\n        setIsShareModalOpen(false)\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n            <div className=\"h-full w-full flex flex-col items-center\">\r\n                <button\r\n                    className=\"w-full active:bg-gray-300 h-12 flex items-center justify-center text-rose-600 font-medium text-sm rounded-t-xl\"\r\n                    onClick={handleUnfollowClick}\r\n                >\r\n                    Unfollow\r\n                </button>\r\n                <button\r\n                    className=\"w-full active:bg-gray-300 h-12 border-t-2 flex items-center justify-center text-sm\"\r\n                    onClick={navigateToPost}\r\n                >\r\n                    Go to post\r\n                </button>\r\n                <button\r\n                    className=\"w-full active:bg-gray-300 h-12 border-t-2 flex items-center justify-center text-sm\"\r\n                    onClick={openShareModal}\r\n                >\r\n                    Share to\r\n                </button>\r\n                <button\r\n                    className=\"w-full active:bg-gray-300 h-12 border-t-2 flex items-center justify-center text-sm\"\r\n                    onClick={handleCopy}\r\n                >\r\n                    Copy link\r\n                </button>\r\n                <button\r\n                    className=\"w-full active:bg-gray-300 h-12 border-t-2 flex items-center justify-center text-sm rounded-b-xl\"\r\n                    onClick={closeEvent}\r\n                >\r\n                    Cancel\r\n                </button>\r\n            </div>\r\n            {\r\n                isShareModalOpen ?\r\n                    <Modal\r\n                        closeEvent={closeShareModal}\r\n                        styles=\"h-[450px] top-[20%]\"\r\n                    >\r\n                        <SharePostModal\r\n                            closeEvent={closeShareModal}\r\n                            currentPost={post}\r\n                        />\r\n                    </Modal> :\r\n                    null\r\n            }\r\n        </>\r\n    )\r\n})\r\n\r\n\r\nexport default SettingsModal\r\n","import Modal from 'components/modal/Modal';\r\nimport UserLoader from 'components/other/UserLoader';\r\nimport RoutesTypes from 'constants/routes-types';\r\nimport React, { useCallback, useState } from 'react'\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Additional from 'svgs/empty/Additional';\r\nimport PostType from 'types/postType';\r\nimport SettingsModal from './SettingsModal';\r\n\r\ntype PostHeaderProps = {\r\n    userInfo: {\r\n        username: string,\r\n        profileImage: string,\r\n        userId: string\r\n    },\r\n    post: PostType\r\n}\r\n\r\nconst PostHeader: React.FC<PostHeaderProps> = React.memo(({ userInfo, post }) => {\r\n    const navigate = useNavigate();\r\n    const [isSettingsModalOpen, setIsSettingsModalOpen] = useState<boolean>(false);\r\n\r\n    const navigateToProfile = useCallback(() => {\r\n        navigate(RoutesTypes.DASHBOARD + userInfo.userId)\r\n    }, [userInfo.userId])\r\n\r\n    const openSettingsModal = useCallback(() => {\r\n        setIsSettingsModalOpen(true)\r\n    }, [])\r\n\r\n    const closeSettingsModal = useCallback(() => {\r\n        setIsSettingsModalOpen(false)\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"w-full flex justify-between border-b items-center\">\r\n            {\r\n                userInfo.userId.length ?\r\n                    <button\r\n                        className=\"h-14 py-[0.5px] gap-4 flex items-center px-3\"\r\n                        onClick={navigateToProfile}\r\n                    >\r\n                        <img\r\n                            src={\r\n                                userInfo.profileImage.length ?\r\n                                    userInfo.profileImage :\r\n                                    process.env.PUBLIC_URL + \"/images/default-avatar-image.jpg\"\r\n                            }\r\n                            className=\"h-9 w-9 rounded-full object-cover\"\r\n                        />\r\n                        <p className=\"font-medium text-[14px] tracking-wide whitespace-nowrap\">{userInfo.username}</p>\r\n                    </button> :\r\n                    <UserLoader\r\n                        imageStyles={{ width: 36, height: 36, borderRadius: \"50%\" }}\r\n                        firstTextStyles={{ width: 100, height: 7, borderRadius: \"10px\" }}\r\n                        secondTextStyles={{ width: 80, height: 7, borderRadius: \"10px\" }}\r\n                        margin=\"my-1\"\r\n                    />\r\n            }\r\n            <button\r\n                className=\"mr-4\"\r\n                onClick={openSettingsModal}\r\n            >\r\n                <Additional styles=\"h-5 w-5\" />\r\n            </button>\r\n            {\r\n                isSettingsModalOpen ?\r\n                    <Modal\r\n                        closeEvent={closeSettingsModal}\r\n                        styles=\"top-[35%] h-60\"\r\n                    >\r\n                        <SettingsModal\r\n                            closeEvent={closeSettingsModal}\r\n                            post={post}\r\n                        />\r\n                    </Modal> :\r\n                    null\r\n            }\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default PostHeader","import Time from 'components/other/Time'\r\nimport CommentForm from 'components/post/CommentForm'\r\nimport LikesBar from 'components/post/LikesBar'\r\nimport ProfileRoutes from 'constants/profile-routes'\r\nimport RoutesTypes from 'constants/routes-types'\r\nimport useUserInfo from 'helpers/hooks/useUserInfo'\r\nimport React, { useCallback, useRef, useState } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { useAppSelector } from 'redux-setup/hooks'\r\nimport PostType from 'types/postType'\r\nimport PostHeader from './PostHeader'\r\n\r\ntype PostProps = {\r\n    currentPost: PostType\r\n    changePosts: any\r\n}\r\n\r\nconst Post: React.FC<PostProps> = React.memo(({ currentPost, changePosts }) => {\r\n    const loggedUser = useAppSelector(state => state.signedUser.user);\r\n\r\n    const commentsRef = useRef<React.RefObject<HTMLInputElement>>(null);\r\n\r\n    const [wordEntering, setWordEntering] = useState<string>(\"\");\r\n    const userInfo = useUserInfo(currentPost.fromId);\r\n\r\n    const changePostsAdd = useCallback(() => changePosts((posts: PostType[]) => posts.map(post => {\r\n        if (post.postId === currentPost.postId) {\r\n            return { ...post, likes: [...post.likes, { userId: loggedUser.userId }] }\r\n        }\r\n\r\n        return post\r\n    }) as PostType[]), [currentPost.postId, loggedUser.userId])\r\n\r\n    const changePostsRemove = useCallback(() => changePosts((posts: PostType[]) => posts.map(post => {\r\n        if (post.postId === currentPost.postId) {\r\n            return { ...post, likes: post.likes.filter(obj => obj.userId !== loggedUser.userId) }\r\n        }\r\n\r\n        return post\r\n    }) as PostType[]), [currentPost.postId, loggedUser.userId])\r\n\r\n    const handleCommentsAmount = useCallback(() => {\r\n        const commentsAmount = currentPost.comments.length\r\n        return `View all ${commentsAmount.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")} comment${commentsAmount === 1 ? \"\" : \"s\"}`\r\n    }, [currentPost.comments.length])\r\n\r\n    return (\r\n        <article className=\"w-full h-full flex flex-col bg-white border rounded-xl\">\r\n            <PostHeader\r\n                userInfo={userInfo}\r\n                post={currentPost}\r\n            />\r\n            <div className=\"w-full bg-black h-[400px] flex items-center justify-center\">\r\n                <img\r\n                    src={currentPost.postImage}\r\n                    className=\"h-full w-full object-contain\"\r\n                />\r\n            </div>\r\n            <LikesBar\r\n                currentPost={currentPost}\r\n                commentsRef={commentsRef}\r\n                changePostsAdd={changePostsAdd}\r\n                changePostsRemove={changePostsRemove}\r\n            />\r\n            <div className=\"w-full flex flex-col px-3 items-start\">\r\n                <p className=\"break-words mx-1\">\r\n                    <Link\r\n                        className=\"font-medium text-sm\"\r\n                        to={RoutesTypes.DASHBOARD + userInfo.userId}\r\n                    >\r\n                        {userInfo.username}\r\n                    </Link>\r\n                    <span className=\"text-sm\">{\" \"}{currentPost.text}</span>\r\n                </p>\r\n                <Link\r\n                    className=\"pl-1\"\r\n                    to={RoutesTypes.DASHBOARD + ProfileRoutes.POST + currentPost.postId}\r\n                >\r\n                    <p className=\"text-sm text-gray-400 mt-1 tracking-wide\">\r\n                        {handleCommentsAmount()}\r\n                    </p>\r\n                </Link>\r\n            </div>\r\n            <Time createdAt={currentPost.createdAt} />\r\n            <CommentForm\r\n                wordEntering={wordEntering}\r\n                setWordEntering={setWordEntering}\r\n                commentsRef={commentsRef}\r\n                currentPost={currentPost}\r\n                changePosts={changePosts}\r\n            />\r\n        </article>\r\n    )\r\n})\r\n\r\nexport default Post","import useWindowWidth from 'helpers/hooks/useWindowWidth'\r\nimport usePostsToRender from 'pages/dashboard/hooks/usePostsToRender';\r\nimport React, { useMemo } from 'react'\r\nimport { Outlet } from 'react-router-dom';\r\nimport Post from './components/Post';\r\n\r\nconst POSTS_AMOUNT = 20;\r\n\r\nconst Timeline: React.FC = React.memo(() => {\r\n    const width = useWindowWidth();\r\n\r\n    const { postsToRender, setPostsToRender } = usePostsToRender(POSTS_AMOUNT)\r\n    \r\n    const postsComponents = useMemo(() => postsToRender?.map(post => (\r\n        <Post\r\n            currentPost={post}\r\n            changePosts={setPostsToRender}\r\n            key={post.postId + post.fromId}\r\n        />\r\n    )), [postsToRender])\r\n\r\n    return (\r\n        <div className={`flex ${postsToRender !== null && postsToRender.length === 0 ? \"hidden\" : \"\"}`}>\r\n            {\r\n                !postsToRender ?\r\n                    <div className={`h-32 ${width > 500 ? \"w-[470px]\" : \"w-full\"} flex items-center justify-center`}>\r\n                        <div\r\n                            style={{ \"borderTopColor\": \"transparent\" }}\r\n                            className=\"w-16 h-16 border-4 border-gray-700 border-dashed rounded-full animate-spin\"\r\n                        ></div>\r\n                    </div> :\r\n                    <>\r\n                        <div>\r\n                            <div className={`flex flex-col items-center gap-4 ${width > 500 ? \"w-[470px]\" : \"w-full\"}`}>\r\n                                {postsComponents}\r\n                                <div className=\"w-full flex flex-col items-center mt-8 mb-14\">\r\n                                    <img\r\n                                        src={process.env.PUBLIC_URL + \"/images/done.jpg\"}\r\n                                        className=\"w-16\"\r\n                                    />\r\n                                    <p className=\"text-lg\">You're all caught up</p>\r\n                                    <p className=\"text-sm text-gray-400\">You've seen all new posts from the past days</p>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <Outlet context={{ posts: [...postsToRender].reverse(), changePosts: setPostsToRender }}/>\r\n                    </>\r\n            }\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default Timeline","import React from 'react';\r\nimport Header from 'components/header/Header';\r\nimport Sidebar from 'pages/dashboard/components/sidebar/Sidebar';\r\nimport Timeline from 'pages/dashboard/components/timeline/Timeline';\r\nimport useWindowWidth from 'helpers/hooks/useWindowWidth';\r\nimport { useAppSelector } from 'redux-setup/hooks';\r\nimport Loading from 'pages/loading/Loading';\r\nimport { Navigate } from 'react-router-dom';\r\nimport RoutesTypes from 'constants/routes-types';\r\nimport { auth } from 'firebase-setup/firebaseConfig';\r\n\r\nconst Dashboard: React.FC = React.memo(() => {\r\n    const loggedUser = useAppSelector(state => state.signedUser.user);\r\n    const windowWidth = useWindowWidth();\r\n\r\n    return (\r\n        !auth.currentUser ?\r\n            <Navigate to={RoutesTypes.LOGIN} /> :\r\n            !loggedUser.userId.length ?\r\n                <Loading /> :\r\n                <div className=\"bg-[#f7f7f7] overflow-hidden overflow-y-auto flex flex-col items-center\">\r\n                    <Header />\r\n                    <div className=\"min-h-[calc(100vh-60px)] w-[100%] flex justify-center bg-[#f7f7f7] pt-6 gap-6\">\r\n                        <Timeline />\r\n                        {\r\n                            windowWidth > 950 ?\r\n                                <Sidebar /> :\r\n                                null\r\n                        }\r\n                    </div>\r\n                </div>\r\n    )\r\n})\r\n\r\nexport default Dashboard;\r\n"],"names":["min","max","Math","floor","random","suggestionsLength","loggedUser","useAppSelector","state","signedUser","user","useState","suggestionsInfo","setSuggestionsInfo","useEffect","getSuggestions","usersRef","collection","db","q","query","where","getDocs","querySnapshot","docsContainer","i","index","docs","length","currentDoc","data","isUserIncluded","some","userId","isUserFollowed","following","isUserCurrent","prevUsers","React","profileImage","username","fullName","isFollowing","dispatch","useAppDispatch","navigate","useNavigate","uid","useParams","isUnfollowModalOpen","setIsUnfollowModalOpen","handleFollowClick","useCallback","event","stopPropagation","addToFollowing","handleFollowingClick","areYouSureEvent","removeFromFollowing","navigateToProfile","RoutesTypes","closeUnfollowModal","className","onClick","src","process","Modal","closeEvent","styles","AreYouSureModal","questionText","buttonText","useSuggestions","generateSkeletons","skeletons","push","UserLoader","imageStyles","width","height","borderRadius","firstTextStyles","secondTextStyles","margin","users","useMemo","map","key","to","postsAmount","postsToRender","setPostsToRender","getPosts","userObj","doc","allPosts","reduce","accum","posts","forEach","post","currentPosts","sort","a","b","createdAt","slice","xmlns","fill","viewBox","stroke","strokeWidth","strokeLinecap","strokeLinejoin","d","isShareModalOpen","setIsShareModalOpen","handleUnfollowClick","fromId","handleCopy","navigator","clipboard","writeText","window","location","origin","ProfileRoutes","postId","navigateToPost","openShareModal","closeShareModal","SharePostModal","currentPost","userInfo","isSettingsModalOpen","setIsSettingsModalOpen","openSettingsModal","closeSettingsModal","changePosts","commentsRef","useRef","wordEntering","setWordEntering","useUserInfo","changePostsAdd","likes","changePostsRemove","filter","obj","handleCommentsAmount","commentsAmount","comments","toString","replace","postImage","LikesBar","text","Time","CommentForm","useWindowWidth","usePostsToRender","postsComponents","context","reverse","style","windowWidth","auth","Header","Loading"],"sourceRoot":""}