{"version":3,"file":"static/js/986.e5b4faf3.chunk.js","mappings":"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","sources":["components/modal/AreYouSureModal.tsx","apis/sharePost.ts","components/modal/SharePostModal.tsx","components/other/Time.tsx","components/post/CommentForm.tsx","helpers/hooks/usePostLikes.ts","svgs/empty/Comment.tsx","svgs/filled/FilledSaved.tsx","components/post/LikesBar.tsx","helpers/hooks/useChatRoom.ts","helpers/hooks/useUserInfo.ts","helpers/other/convert-unix-time/convertUnixTime.ts","pages/direct/components/navigation-bar/UserToWriteTo.tsx","pages/profile/components/users-list/UserSuggestion.tsx","pages/profile/hooks/useUserList.ts","pages/profile/components/users-list/UsersListModal.tsx","svgs/empty/Heart.tsx","svgs/filled/FilledHeart.tsx"],"sourcesContent":["import React from 'react'\r\n\r\ntype AreYouSureModalProps = {\r\n    areYouSureEvent: () => void\r\n    profileImage: string\r\n    closeEvent: () => void\r\n    buttonText: string\r\n    questionText: string\r\n    additionalText?: string\r\n}\r\n\r\nconst AreYouSureModal: React.FC<AreYouSureModalProps> = React.memo(({ \r\n    areYouSureEvent, \r\n    profileImage, \r\n    closeEvent, \r\n    buttonText, \r\n    questionText, \r\n    additionalText \r\n}) => {\r\n    return (\r\n        <div className=\"h-full w-full flex flex-col items-center z-50\">\r\n            <div className={`w-full h-[100px] flex items-start justify-center ${additionalText ? \"mt-3 mb-2\" : \"mt-6 mb-4\"}`}>\r\n                <img\r\n                    src={profileImage.length ? profileImage : process.env.PUBLIC_URL + \"/images/default-avatar-image.jpg\"}\r\n                    className=\"rounded-full h-[100px] w-[100px] object-cover\"\r\n                />\r\n            </div>\r\n            <p className={`text-sm ${!additionalText && \"mb-6\"}`}>{questionText}?</p>\r\n            {\r\n                additionalText ?\r\n                    <p className=\"text-gray-400 text-sm w-3/4 text-center mb-3 mt-1\">{additionalText}</p> :\r\n                    null\r\n            }\r\n            <button\r\n                className=\"w-full h-12 border-t-2 flex items-center justify-center text-rose-600 font-bold text-sm\"\r\n                onClick={areYouSureEvent}\r\n            >\r\n                {buttonText}\r\n            </button>\r\n            <button\r\n                className=\"w-full h-12 border-t-2 flex items-center justify-center text-sm\"\r\n                onClick={closeEvent}\r\n            >\r\n                Cancel\r\n            </button>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default AreYouSureModal","import { db } from \"firebase-setup/firebaseConfig\";\r\nimport { doc, getDoc, updateDoc } from \"firebase/firestore\";\r\nimport ChatState from \"types/chatStateType\";\r\nimport PostType from \"types/postType\";\r\n\r\ntype SharePostProps = {\r\n    currentPost: PostType,\r\n    signedUserId: string,\r\n    chatId: string,\r\n    messageEntering: string,\r\n}\r\n\r\nconst sharePost = async ({ currentPost, signedUserId, chatId, messageEntering }: SharePostProps) => {\r\n    const newMessage = {\r\n        text: currentPost.text,\r\n        from: {\r\n            userId: signedUserId,\r\n        },\r\n        createdAt: (new Date()).getTime(),\r\n        media: currentPost.postImage,\r\n        post: currentPost\r\n    }\r\n    \r\n    const currentChat = (await getDoc(doc(db, \"chats\", chatId))).data() as ChatState;\r\n    \r\n    if(messageEntering.length === 0){\r\n        await updateDoc(doc(db, \"chats\", chatId), {\r\n            messages: [...currentChat.messages, newMessage],\r\n            lastMessage: {\r\n                text: \"You sent a post\",\r\n                userId: signedUserId\r\n            },\r\n            lastEdited: (new Date()).getTime()\r\n        })\r\n        return;\r\n    }\r\n    \r\n    const userMessage = {\r\n        text: messageEntering,\r\n        from: {\r\n            userId: signedUserId,\r\n        },\r\n        createdAt: (new Date()).getTime(),\r\n        media: \"\",\r\n    }\r\n    \r\n    await updateDoc(doc(db, \"chats\", chatId), {\r\n        messages: [...currentChat.messages, newMessage, userMessage],\r\n        lastMessage: {\r\n            text: userMessage.text,\r\n            userId: signedUserId\r\n        },\r\n        lastEdited: (new Date()).getTime()\r\n    })\r\n}\r\n\r\nexport default sharePost","import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react'\r\nimport getUsers from 'helpers/other/get-users/getUsers';\r\nimport { useAppSelector } from 'redux-setup/hooks';\r\nimport Close from 'svgs/empty/Close'\r\nimport UserState from 'types/userStateType';\r\nimport UserSuggestion from 'types/userSuggestionType';\r\nimport UserToWriteTo from 'pages/direct/components/navigation-bar/UserToWriteTo';\r\nimport useChatRoom from 'helpers/hooks/useChatRoom';\r\nimport PostType from 'types/postType';\r\nimport sharePost from 'apis/sharePost';\r\n\r\ntype SharePostModalProps = {\r\n    closeEvent: () => void,\r\n    currentPost: PostType\r\n}\r\n\r\nconst SharePostModal: React.FC<SharePostModalProps> = React.memo(({ closeEvent, currentPost }) => {\r\n    const signedUser = useAppSelector(state => state.signedUser.user);\r\n\r\n    const [wordEntering, setWordEntering] = useState<string>(\"\");\r\n    const [messageEntering, setMessageEntering] = useState<string>(\"\");\r\n    const [chosenUsers, setChosenUsers] = useState<UserSuggestion[]>([]);\r\n    const [filteredUsers, setFilteredUsers] = useState<UserState[]>([]);\r\n\r\n    const { createChatRoom } = useChatRoom();\r\n\r\n    const inputRef = useRef<HTMLInputElement>(null);\r\n\r\n    useEffect(() => {\r\n        const handler = setTimeout(async () => {\r\n            await getUsers(wordEntering, setFilteredUsers);\r\n            setFilteredUsers(prevUsers => prevUsers.filter(user => user.username !== signedUser.username));\r\n        }, 300)\r\n\r\n        return () => clearTimeout(handler);\r\n    }, [wordEntering])\r\n\r\n    const sendMessages = async (chatId: string) => {\r\n        await sharePost({currentPost, signedUserId: signedUser.userId, chatId, messageEntering})\r\n        closeEvent();\r\n    }\r\n\r\n    const handleChosenClick = useCallback((chosenUser: UserSuggestion) => {\r\n        setChosenUsers(prevUsers => prevUsers.filter(user => user.username !== chosenUser.username))\r\n        if (inputRef.current !== null) {\r\n            inputRef.current.focus();\r\n        }\r\n    }, [inputRef.current])\r\n\r\n    const chosenUsersElements = useMemo(() => chosenUsers.map(chosenUser => (\r\n        <div\r\n            className=\"bg-blue-100 flex rounded p-2\"\r\n            key={chosenUser.userId}\r\n        >\r\n            <button\r\n                className=\"flex gap-1\"\r\n                onClick={() => handleChosenClick(chosenUser)}\r\n            >\r\n                <p className=\"text-cyan-500 text-sm \">{chosenUser.username}</p>\r\n                <Close\r\n                    styles=\"w-5 h-5 text-cyan-500\"\r\n                />\r\n            </button>\r\n        </div>\r\n    )), [chosenUsers])\r\n\r\n    const addUserToList = useCallback((doc: UserState) => {\r\n        setChosenUsers(prevUsers => [...prevUsers, doc]);\r\n        setWordEntering(\"\");\r\n        if (inputRef.current !== null) {\r\n            inputRef.current.focus();\r\n        }\r\n    }, [inputRef.current])\r\n\r\n    const removeUserFromList = useCallback((doc: UserState) => {\r\n        setChosenUsers(prevUsers => prevUsers.filter(user => user.username !== doc.username))\r\n        if (inputRef.current !== null) {\r\n            inputRef.current.focus();\r\n        }\r\n    }, [inputRef.current])\r\n\r\n    const filteredUsersElements = useMemo(() => filteredUsers.map(doc => <UserToWriteTo\r\n        addUserToList={() => addUserToList(doc)}\r\n        removeUserFromList={() => removeUserFromList(doc)}\r\n        isUserInList={chosenUsers.some(user => user.username === doc.username)}\r\n        {...doc}\r\n        key={doc.userId}\r\n    />), [filteredUsers, inputRef, chosenUsers])\r\n\r\n    const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\r\n        if (event.key === \"Enter\") {\r\n            chosenUsers.forEach(user => createChatRoom({ chosenUserId: user.userId, closeEvent: sendMessages }));\r\n        }\r\n    }\r\n\r\n    const handleWordEntering = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setWordEntering(event.target.value)\r\n    }, [])\r\n\r\n    const handleMessageEntering = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setMessageEntering(event.target.value)\r\n    }, [])\r\n\r\n    const createRoom = () => {\r\n        chosenUsers.forEach(user => createChatRoom({ chosenUserId: user.userId, closeEvent: sendMessages }))\r\n    }\r\n\r\n    return (\r\n        <div className=\"w-full h-full flex flex-col justify-between\">\r\n            <div className=\"flex flex-col w-full\">\r\n                <div className=\"h-11 w-full flex justify-center items-center font-medium border-b relative \">\r\n                    <p>Share</p>\r\n                    <button\r\n                        className=\"absolute right-2\"\r\n                        onClick={closeEvent}\r\n                    >\r\n                        <Close\r\n                            styles=\"w-7 h-7\"\r\n                        />\r\n                    </button>\r\n                </div>\r\n                <div className=\"w-full max-h-[175px] flex border-b p-3 items-start gap-5\">\r\n                    <p className=\"font-medium mt-[6px]\">To:</p>\r\n                    <div className=\"w-full h-full flex flex-col items-start gap-2 overflow-hidden overflow-y-auto\">\r\n                        {chosenUsersElements}\r\n                        <input\r\n                            className=\"w-full p-2 rounded-lg placeholder:font-light placeholder:text-gray-400 placeholder:text-sm relative text-sm\"\r\n                            type=\"text\"\r\n                            placeholder=\"Search...\"\r\n                            value={wordEntering}\r\n                            onChange={handleWordEntering}\r\n                            ref={inputRef}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div className=\"flex flex-col overflow-hidden overflow-y-auto\">\r\n                    {\r\n                        !filteredUsers.length ?\r\n                            <p className=\"font-medium text-sm pl-3 mt-2\">No Suggested</p> :\r\n                            filteredUsersElements\r\n                    }\r\n                </div>\r\n            </div>\r\n            <div className=\"flex flex-col\">\r\n                <input\r\n                    type=\"text\"\r\n                    value={messageEntering}\r\n                    placeholder=\"Write a message...\"\r\n                    onChange={handleMessageEntering}\r\n                    onKeyDown={handleKeyDown}\r\n                    className=\"mx-[15px] my-[10px] placeholder:font-light placeholder:text-gray-400 placeholder:text-sm text-sm\"\r\n                />\r\n                <button\r\n                    className={`${chosenUsers.length === 0 ? \"bg-blue-300\" : \"bg-blue-500\"} h-10 mx-[15px] mb-[15px] mt-[10px] rounded flex justify-center items-center font-medium text-white`}\r\n                    onClick={createRoom}\r\n                    disabled={chosenUsers.length === 0}\r\n                >\r\n                    Send\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default SharePostModal","import convertUnixTime from 'helpers/other/convert-unix-time/convertUnixTime';\r\nimport React from 'react'\r\n\r\ntype TimeProps = {\r\n    createdAt: number;\r\n}\r\n\r\nconst Time: React.FC<TimeProps> = React.memo(({ createdAt }) => {\r\n    const generateTime = () => {\r\n        let time = convertUnixTime(createdAt).toUpperCase();\r\n        if (time === \"NOW\") {\r\n            return time;\r\n        }\r\n        return time + \" AGO\"\r\n    }\r\n\r\n    return (\r\n        <div className=\"w-full px-4 pb-1\">\r\n            <p className=\"text-[11px] text-gray-400 mt-1 tracking-wide\">\r\n                {generateTime()}\r\n            </p>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default Time","import DropMenu from 'components/other/DropMenu';\r\nimport React, { useCallback, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport createNewComment from 'redux-setup/features/signed-user/thunks/createNewComment';\r\nimport { useAppDispatch } from 'redux-setup/hooks';\r\nimport Smile from 'svgs/empty/Smile';\r\nimport Picker, { IEmojiData } from \"emoji-picker-react\";\r\nimport PostType from 'types/postType';\r\n\r\ntype CommentFormProps = {\r\n    wordEntering: string,\r\n    setWordEntering: React.Dispatch<React.SetStateAction<string>>,\r\n    commentsRef: any,\r\n    currentPost: PostType,\r\n    changePosts: any,\r\n}\r\n\r\nconst CommentForm: React.FC<CommentFormProps> = React.memo(({ \r\n    wordEntering, \r\n    setWordEntering, \r\n    commentsRef, \r\n    currentPost,\r\n    changePosts \r\n}) => {\r\n\r\n    const dispatch = useAppDispatch();\r\n    const { uid } = useParams();\r\n\r\n    const [areEmojiOpen, setAreEmojiOpen] = useState<boolean>(false);\r\n\r\n    const toggleEmojisOpen = useCallback(() => {\r\n        setAreEmojiOpen(prevVal => !prevVal)\r\n    }, [])\r\n\r\n    const sendComment = async () => {\r\n        const text = wordEntering;\r\n        dispatch(createNewComment({ \r\n            text, \r\n            fromId: currentPost.fromId, \r\n            postId: currentPost.postId, \r\n            uid: uid as string, \r\n            changePosts \r\n        }))\r\n        setWordEntering(\"\");\r\n    }\r\n\r\n    const handleEmojiClick = useCallback((event: React.MouseEvent<Element, MouseEvent>, emojiObject: IEmojiData) => {\r\n        setWordEntering(prevText => prevText + emojiObject.emoji);\r\n    }, [])\r\n\r\n    const handleWordEntering = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setWordEntering(event.target.value)\r\n    }, [])\r\n\r\n    const handleKey = (event: React.KeyboardEvent<HTMLInputElement> | React.KeyboardEvent<HTMLButtonElement>) => {\r\n        if (event.key === \"Enter\") {\r\n            sendComment();\r\n        }\r\n    }\r\n\r\n    const closeEvent = useCallback((event: any) => {\r\n        event.stopPropagation();\r\n        setAreEmojiOpen(false)\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"flex justify-between items-center rounded-b-xl border h-[50px] w-full px-4 gap-4\">\r\n            <div className=\"relative\">\r\n                <button\r\n                    className=\"h-full flex items-center\"\r\n                    onClick={toggleEmojisOpen}\r\n                >\r\n                    <Smile styles=\"h-7 w-7\"/>\r\n                </button>\r\n                {\r\n                    areEmojiOpen ?\r\n                        <DropMenu\r\n                            closeEvent={closeEvent}\r\n                            styles=\"w-[240px] left-[-12px] bottom-[45px] h-64 z-20\"\r\n                            noAnimation={true}\r\n                        >\r\n                            <Picker\r\n                                pickerStyle={{ width: \"100%\", height: \"100%\" }}\r\n                                onEmojiClick={handleEmojiClick}\r\n                            />\r\n                        </DropMenu> :\r\n                        null\r\n                }\r\n            </div>\r\n            <input\r\n                type=\"text\"\r\n                placeholder=\"Send a comment...\"\r\n                className=\"w-full h-8 placeholder:text-sm\"\r\n                ref={commentsRef}\r\n                value={wordEntering}\r\n                onChange={handleWordEntering}\r\n                onKeyDown={handleKey}\r\n            />\r\n            <button\r\n                className={`font-semibold ${wordEntering.length ? \"text-blue-500\": \"text-blue-200\"}`}\r\n                onClick={sendComment}\r\n                disabled={!wordEntering.length}\r\n                onKeyDown={handleKey}\r\n            >\r\n                <p>Post</p>\r\n            </button>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default CommentForm","import { doc, getDoc } from \"firebase/firestore\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { db } from \"firebase-setup/firebaseConfig\";\r\nimport updatePosts from \"redux-setup/features/user-on-page/thunks/updatePosts\";\r\nimport { useAppDispatch, useAppSelector } from \"redux-setup/hooks\";\r\nimport PostType from \"types/postType\";\r\nimport UserState from \"types/userStateType\";\r\n\r\ntype UsePostLikesProps = { \r\n    userId: string, \r\n    postId: string,\r\n    changePostsAdd: any, \r\n    changePostsRemove: any \r\n}\r\n\r\nconst usePostLikes = ({ userId, postId, changePostsAdd, changePostsRemove }: UsePostLikesProps) => {\r\n    const loggedUser = useAppSelector(state => state.signedUser.user);\r\n    const dispatch = useAppDispatch();\r\n\r\n    const { uid } = useParams();\r\n\r\n    const addLike = async () => {\r\n        const hotPosts = ((await getDoc(doc(db, \"users\", userId))).data() as UserState).posts\r\n\r\n        const newPosts = hotPosts.map(post => {\r\n            if(post.postId === postId){\r\n                return { ...post, likes: [...post.likes, { userId: loggedUser.userId }] }\r\n            }\r\n\r\n            return post\r\n        }) as PostType[];\r\n\r\n        if (changePostsAdd) {\r\n            changePostsAdd()\r\n        }\r\n\r\n        await dispatch(updatePosts({ userId, newPosts, uid: uid as string }))\r\n    }\r\n\r\n    const removeLike = async () => {\r\n        const hotPosts = ((await getDoc(doc(db, \"users\", userId))).data() as UserState).posts\r\n\r\n        const newPosts = hotPosts.map(post => {\r\n            if (post.postId === postId) {\r\n                return { ...post, likes: post.likes.filter(obj => obj.userId !== loggedUser.userId) }\r\n            }\r\n\r\n            return post\r\n        }) as PostType[]\r\n\r\n        if (changePostsRemove) {\r\n            changePostsRemove()\r\n        }\r\n        \r\n        await dispatch(updatePosts({ userId, newPosts, uid: uid as string }))\r\n    }\r\n\r\n    return { addLike, removeLike }\r\n}\r\n\r\nexport default usePostLikes;","import React, { useState } from 'react'\r\n\r\nconst Comment: React.FC<{ styles: string, includeHovering: boolean }> = ({ styles, includeHovering }) => {\r\n    const [isHovered, setIsHovered] = useState<boolean>(false);\r\n    \r\n    return (\r\n        <svg \r\n            xmlns=\"http://www.w3.org/2000/svg\" \r\n            className={`${styles} ${includeHovering && isHovered && \"text-gray-500\"}`} \r\n            fill=\"none\" \r\n            viewBox=\"0 0 24 24\" \r\n            stroke=\"currentColor\" \r\n            strokeWidth={2}\r\n            onMouseEnter={() => setIsHovered(true)}\r\n            onMouseLeave={() => setIsHovered(false)}\r\n        >\r\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z\" />\r\n        </svg>\r\n    )\r\n}\r\n\r\nexport default Comment","import React from 'react'\r\n\r\nconst FilledSaved: React.FC<{ styles: string }> = ({ styles }) => {\r\n    return (\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" className={styles} viewBox=\"0 0 20 20\" fill=\"currentColor\">\r\n            <path d=\"M5 4a2 2 0 012-2h6a2 2 0 012 2v14l-5-2.5L5 18V4z\" />\r\n        </svg>\r\n    )\r\n}\r\n\r\nexport default FilledSaved","import React, { useCallback, useState } from 'react'\r\nimport usePostLikes from 'helpers/hooks/usePostLikes'\r\nimport Comment from 'svgs/empty/Comment'\r\nimport Direct from 'svgs/empty/Direct'\r\nimport FilledHeart from 'svgs/filled/FilledHeart'\r\nimport Heart from 'svgs/empty/Heart'\r\nimport PostType from 'types/postType'\r\nimport { motion } from \"framer-motion\"\r\nimport Saved from 'svgs/empty/Saved'\r\nimport { useAppDispatch, useAppSelector } from 'redux-setup/hooks'\r\nimport FilledSaved from 'svgs/filled/FilledSaved'\r\nimport Modal from 'components/modal/Modal'\r\nimport UsersListModal from 'pages/profile/components/users-list/UsersListModal'\r\nimport SharePostModal from '../modal/SharePostModal'\r\nimport addToSaved from \"redux-setup/features/signed-user/thunks/addToSaved\";\r\nimport removeFromSaved from \"redux-setup/features/signed-user/thunks/removeFromSaved\";\r\n\r\ntype LikesBarProps = {\r\n    commentsRef: any,\r\n    currentPost: PostType\r\n    changePostsAdd: any,\r\n    changePostsRemove: any,\r\n}\r\n\r\nconst LikesBar: React.FC<LikesBarProps> = React.memo(({ \r\n    commentsRef, \r\n    currentPost,\r\n    changePostsAdd, \r\n    changePostsRemove\r\n}) => {\r\n    const loggedUser = useAppSelector(state => state.signedUser.user);\r\n    const dispatch = useAppDispatch();\r\n\r\n    const { addLike, removeLike } = usePostLikes({ \r\n        userId: currentPost.fromId,\r\n        postId: currentPost.postId,\r\n        changePostsAdd: changePostsAdd,\r\n        changePostsRemove: changePostsRemove\r\n    });\r\n\r\n    const [isListModalOpen, setIsListModalOpen] = useState<boolean>(false);\r\n    const [isShareModalOpen, setIsShareModalOpen] = useState<boolean>(false);\r\n\r\n    const handleLikesAmount = useCallback(() => {\r\n        const likesAmount = currentPost.likes.length\r\n        return `${likesAmount.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")} like${likesAmount === 1 ? \"\" : \"s\"}`\r\n    }, [currentPost.likes.length])\r\n\r\n    const focusInput = useCallback(() => {\r\n        commentsRef.current.focus()\r\n    }, [commentsRef.current])\r\n\r\n    const openShareModal = useCallback(() => {\r\n        setIsShareModalOpen(true)\r\n    }, [])\r\n\r\n    const openListModal = useCallback(() => {\r\n        setIsListModalOpen(true)\r\n    }, [])\r\n\r\n    const closeShareModal = useCallback(() => {\r\n        setIsShareModalOpen(false)\r\n    }, [])\r\n\r\n    const closeListModal = useCallback(() => {\r\n        setIsListModalOpen(false)\r\n    }, [])\r\n\r\n    const removeSaved = useCallback(() => {\r\n        dispatch(removeFromSaved({ userId: currentPost.fromId, postId: currentPost.postId }))\r\n    }, [currentPost.fromId, currentPost.postId])\r\n\r\n    const addSaved = useCallback(() => {\r\n        dispatch(addToSaved({ userId: currentPost.fromId, postId: currentPost.postId }))\r\n    }, [currentPost.fromId, currentPost.postId])\r\n\r\n    return (\r\n        <>\r\n            <div className=\"flex flex-col px-4 pt-2 border-t\">\r\n                <div className=\"flex w-full justify-between\">\r\n                    <div className=\"flex items-center gap-3 ml-[-8px]\">\r\n                        {\r\n                            currentPost.likes.some(obj => obj.userId === loggedUser.userId) ?\r\n                                <div className=\"flex items-center justify-center h-[40px] w-[40px] mr-[-12px]\">\r\n                                    <div\r\n                                        className=\"h-[28px] w-[28px] cursor-pointer\"\r\n                                        onClick={removeLike}\r\n                                    >\r\n                                        <FilledHeart\r\n                                            styles=\"h-full w-full text-red-500\"\r\n                                        />\r\n                                    </div>\r\n                                </div> :\r\n                                <div className=\"flex items-center justify-center h-[40px] w-[40px] mr-[-12px]\">\r\n                                    <motion.div\r\n                                        onClick={addLike}\r\n                                        className=\"h-[28px] w-[28px] cursor-pointer\"\r\n                                        whileTap={{\r\n                                            width: \"40px\",\r\n                                            height: \"40px\",\r\n                                            transition: { repeat: 1, repeatType: \"reverse\", duration: 0.16 },\r\n                                        }}\r\n                                    >\r\n                                        <Heart\r\n                                            styles=\"h-full w-full\"\r\n                                            includeHovering={true}\r\n                                        />\r\n                                    </motion.div>\r\n                                </div>\r\n                        }\r\n                        <button onClick={focusInput}>\r\n                            <Comment\r\n                                styles=\"h-[28px] w-[28px]\"\r\n                                includeHovering={true}\r\n                            />\r\n                        </button>\r\n                        <button\r\n                            className=\"pb-1 mr-[-3px]\"\r\n                            onClick={openShareModal}\r\n                        >\r\n                            <Direct\r\n                                styles=\"h-[23px] w-[23px] rotate-[55deg]\"\r\n                                includeHovering={true}\r\n                            />\r\n                        </button>\r\n                    </div>\r\n                    {\r\n                        loggedUser.savedPosts.some(post => post.postId === currentPost.postId) ?\r\n                            <button onClick={removeSaved}>\r\n                                <FilledSaved\r\n                                    styles=\"h-[25px] w-[25px]\"\r\n                                />\r\n                            </button> :\r\n                            <button onClick={addSaved}>\r\n                                <Saved\r\n                                    styles=\"h-[25px] w-[25px]\"\r\n                                    includeHovering={true}\r\n                                />\r\n                            </button>\r\n                    }\r\n                </div>\r\n                <button\r\n                    onClick={openListModal}\r\n                    className=\"flex flex-start\"\r\n                >\r\n                    <p className=\"font-medium text-sm tracking-wide whitespace-nowrap\">\r\n                        {handleLikesAmount()}\r\n                    </p>\r\n                </button>\r\n            </div>\r\n            {\r\n                isListModalOpen ?\r\n                    <Modal\r\n                        closeEvent={closeListModal}\r\n                        styles=\"h-96 top-[20%]\"\r\n                    >\r\n                        <UsersListModal\r\n                            descriptionLine=\"Likes\"\r\n                            usersList={currentPost.likes}\r\n                            closeEvent={closeListModal}\r\n                        />\r\n                    </Modal> :\r\n                    null\r\n            }\r\n            {\r\n                isShareModalOpen ?\r\n                    <Modal\r\n                        closeEvent={closeShareModal}\r\n                        styles=\"h-[450px] top-[20%]\"\r\n                    >\r\n                        <SharePostModal\r\n                            closeEvent={closeShareModal}\r\n                            currentPost={currentPost}\r\n                        />\r\n                    </Modal> :\r\n                    null\r\n            }\r\n        </>\r\n    )\r\n})\r\n\r\nexport default LikesBar","import RoutesTypes from \"constants/routes-types\";\r\nimport { db, storage } from \"firebase-setup/firebaseConfig\";\r\nimport { collection, deleteDoc, doc, getDocs, setDoc } from \"firebase/firestore\";\r\nimport { deleteObject, ref } from \"firebase/storage\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useAppSelector } from \"redux-setup/hooks\";\r\nimport MessageType from \"types/messageType\";\r\n\r\ntype CreateChatRoomProps = {\r\n    chosenUserId: string; \r\n    closeEvent?: (chatId: string) => void;\r\n} \r\n\r\ntype DeleteChatRoomProps = {\r\n    messages: MessageType[],\r\n    chatId: string,\r\n}\r\n\r\nconst useChatRoom = () => {\r\n    const signedUser = useAppSelector(state => state.signedUser.user);\r\n    const navigate = useNavigate();\r\n\r\n    const createChatRoom = async ({ chosenUserId, closeEvent }: CreateChatRoomProps) => {\r\n        const chatId = signedUser.userId + \"-\" + chosenUserId;\r\n        const reversedChatId = chosenUserId + \"-\" + signedUser.userId;\r\n\r\n        const allChats = await getDocs(collection(db, \"chats\"));\r\n\r\n        let chatToNavigateTo: string = \"\";\r\n        allChats.forEach(doc => {\r\n            const docResult = doc.data().firstUserId + \"-\" + doc.data().secondUserId;\r\n            if (docResult === chatId) {\r\n                chatToNavigateTo = chatId;\r\n                return\r\n            }\r\n\r\n            if (docResult === reversedChatId) {\r\n                chatToNavigateTo = reversedChatId;\r\n                return;\r\n            }\r\n        })\r\n\r\n        if (chatToNavigateTo.length !== 0) {\r\n            if(closeEvent){\r\n                closeEvent(chatToNavigateTo);\r\n            }\r\n            navigate(RoutesTypes.DIRECT + \"/\" + chatToNavigateTo);\r\n            return;\r\n        }\r\n\r\n        await setDoc(doc(db, \"chats\", chatId), {\r\n            firstUserId: signedUser.userId,\r\n            secondUserId: chosenUserId,\r\n            messages: [],\r\n            lastMessage: {\r\n                text: \"\",\r\n                userId: \"\",\r\n            },\r\n            lastEdited: new Date().getTime()\r\n        });\r\n\r\n        if(closeEvent){\r\n            closeEvent(chatId);\r\n        }\r\n        navigate(RoutesTypes.DIRECT + \"/\" + chatId)\r\n    }\r\n\r\n    const deleteChatRoom = async ({ messages, chatId }: DeleteChatRoomProps) => {\r\n        deleteDoc(doc(db, \"chats\", chatId));\r\n\r\n        for (const message of messages) {\r\n          if (message.media.length) {\r\n            const imageRef = ref(storage, message.media);\r\n            await deleteObject(imageRef);\r\n          }\r\n        }\r\n      }\r\n\r\n    return { createChatRoom, deleteChatRoom }\r\n}\r\n\r\nexport default useChatRoom;","import { db } from \"firebase-setup/firebaseConfig\";\r\nimport { doc, getDoc } from \"firebase/firestore\";\r\nimport { useEffect, useState } from \"react\";\r\nimport UserState from \"types/userStateType\";\r\n\r\ntype UserInfo = {\r\n    username: string,\r\n    profileImage: string,\r\n    userId: string\r\n}\r\n\r\ntype UseUserInfoType = (fromId: string) => UserInfo\r\n\r\nconst defaultInfo = {\r\n    username: \"\",\r\n    profileImage: \"\",\r\n    userId: \"\"\r\n}\r\n\r\nconst useUserInfo: UseUserInfoType = (fromId) => {\r\n    const [userInfo, setUserInfo] = useState<UserInfo>(defaultInfo)\r\n\r\n    useEffect(() => {\r\n        const getUser = async () => {\r\n            const user = (await getDoc(doc(db, \"users\", fromId))).data() as UserState;\r\n            setUserInfo({ ...user })\r\n        }\r\n\r\n        setUserInfo(defaultInfo)\r\n        getUser();\r\n    }, [fromId])\r\n\r\n    return userInfo\r\n}\r\n\r\nexport default useUserInfo","const convertUnixTime = (time: number) => {\r\n    let currentTimeString = 'Now';\r\n    const timeNow = new Date(((new Date().getTime() - time)))\r\n\r\n    const minutes = timeNow.getMinutes()\r\n    const hours = Math.abs(Math.round((timeNow.getTime() / 1000 / 3600)))\r\n    const days = hours > 24 ? (hours / 24).toFixed(0) : 0\r\n    const weeks = days > 7 ? (days as number / 7).toFixed(0) : 0\r\n    const months = days > 30 ? (days as number/ 30).toFixed(0) : 0\r\n    const years = months > 12 ? (months as number / 12).toFixed(0) : 0\r\n    const nowTime = minutes === 0 ? 'Now' : 0\r\n\r\n    const currentTime = (years || months || weeks || days || hours || minutes || nowTime)\r\n    currentTimeString = (currentTime === years && currentTime.toString() + ' year')\r\n        || (currentTime === months && currentTime.toString() + ' month')\r\n        || (currentTime === weeks && currentTime.toString() + ' week')\r\n        || (currentTime === days && currentTime.toString() + ' day')\r\n        || (currentTime === hours && currentTime.toString() + ' hour')\r\n        || (currentTime === minutes && currentTime.toString() + ' minutes')\r\n        || 'Now'\r\n\r\n    return currentTimeString\r\n}\r\n\r\nexport default convertUnixTime","import React from 'react';\r\nimport UserSuggestionType from 'types/userSuggestionType';\r\n\r\ninterface IUserToWriteToProps extends UserSuggestionType {\r\n    addUserToList: () => void\r\n    removeUserFromList: () => void\r\n    isUserInList: boolean\r\n}\r\n\r\nconst UserToWriteTo: React.FC<IUserToWriteToProps> = React.memo(({\r\n    profileImage,\r\n    username,\r\n    fullName,\r\n    addUserToList,\r\n    removeUserFromList,\r\n    isUserInList\r\n}) => {\r\n    return (\r\n        <button\r\n            className=\"flex h-13 mb-1 px-2 pr-6 items-center justify-center py-1\"\r\n            onClick={isUserInList ? removeUserFromList : addUserToList}\r\n        >\r\n            <div className=\"w-full h-full py-[0.5px] gap-2 flex items-center\">\r\n                <img\r\n                    src={profileImage.length ? profileImage : process.env.PUBLIC_URL + \"/images/default-avatar-image.jpg\"}\r\n                    className=\"h-12 w-12 rounded-full object-cover\"\r\n                />\r\n                <div className=\"flex flex-col justify-center text-left\">\r\n                    <p className=\"font-medium text-sm tracking-[0.3px] whitespace-nowrap\">{username}</p>\r\n                    <p className=\"text-gray-400 text-sm tracking-[0px] whitespace-nowrap\">{fullName}</p>\r\n                </div>\r\n            </div>\r\n            {\r\n                isUserInList ?\r\n                    <div className=\"w-6 h-6 rounded-full bg-blue-500\">\r\n                        <div className=\"h-[2px] w-[7px] bg-white mt-3 ml-1 rotate-[45deg]\"></div>\r\n                        <div className=\"h-[2px] w-3 bg-white mt-[-3px] ml-2 rotate-[-45deg]\"></div>\r\n                    </div> :\r\n                    <div className=\"w-6 h-6 rounded-full border-2 border-black\"></div>\r\n            }\r\n        </button>\r\n    )\r\n})\r\n\r\nexport default UserToWriteTo","import React, { useCallback, useState } from 'react';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport RoutesTypes from 'constants/routes-types';\r\nimport { useAppDispatch, useAppSelector } from 'redux-setup/hooks';\r\nimport UserSuggestionType from 'types/userSuggestionType';\r\nimport Modal from 'components/modal/Modal';\r\nimport AreYouSureModal from 'components/modal/AreYouSureModal';\r\nimport addToFollowing from \"redux-setup/features/signed-user/thunks/addToFollowing\";\r\nimport removeFromFollowing from \"redux-setup/features/signed-user/thunks/removeFromFollowing\";\r\n\r\nconst UserSuggestion: React.FC<UserSuggestionType> = React.memo(({ profileImage, username, fullName, userId }) => {\r\n    const loggedUser = useAppSelector(state => state.signedUser.user);\r\n    const dispatch = useAppDispatch();\r\n\r\n    const navigate = useNavigate();\r\n    const { uid } = useParams();\r\n\r\n    const [isUnfollowModalOpen, setIsUnfollowModalOpen] = useState<boolean>(false);\r\n\r\n    const handleFollowingClick = useCallback((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        event.stopPropagation();\r\n        setIsUnfollowModalOpen(true);\r\n    }, [])\r\n\r\n    const handleFollowClick = useCallback((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        event.stopPropagation();\r\n        dispatch(addToFollowing({ userId, uid: uid as string }));\r\n    }, [userId, uid])\r\n\r\n    const areYouSureEvent = useCallback(() => {\r\n        setIsUnfollowModalOpen(false)\r\n        dispatch(removeFromFollowing({ userId, uid: uid as string }))\r\n    }, [userId, uid])\r\n\r\n    const navigateToProfile = useCallback(() => {\r\n        navigate(RoutesTypes.DASHBOARD + userId)\r\n    }, [userId])\r\n\r\n    const closeUnfollowModal = useCallback(() => {\r\n        setIsUnfollowModalOpen(false)\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"flex w-full h-13 mb-1 px-2 justify-between items-center my-[4px]\">\r\n            <button \r\n                className=\"w-full h-full py-[0.5px] gap-2 flex items-center\"\r\n                onClick={navigateToProfile}\r\n            >\r\n                <img\r\n                    src={profileImage.length ? profileImage : process.env.PUBLIC_URL + \"/images/default-avatar-image.jpg\"}\r\n                    className=\"h-11 w-11 rounded-full object-cover\"\r\n                />\r\n                <div className=\"flex flex-col items-start\">\r\n                    <p className=\"font-medium text-sm tracking-wide whitespace-nowrap\">{username}</p>\r\n                    <p className=\"text-gray-400 text-sm whitespace-nowrap\">{fullName}</p>\r\n                </div>\r\n            </button>\r\n            {\r\n                userId === loggedUser.userId || !loggedUser.userId.length ?\r\n                    null :\r\n                    loggedUser.following.some(data => data.userId === userId) ?\r\n                        <button\r\n                            className=\"h-7 w-28 rounded border text-sm font-medium cursor-pointer\"\r\n                            onClick={handleFollowingClick}\r\n                        >\r\n                            Following\r\n                        </button> :\r\n                        <button\r\n                            className=\"h-7 w-20 bg-blue-500 font-medium text-white rounded cursor-pointer text-sm tracking-wide\"\r\n                            onClick={handleFollowClick}\r\n                        >\r\n                            Follow\r\n                        </button>\r\n            }\r\n            {\r\n                isUnfollowModalOpen ?\r\n                    <Modal\r\n                        closeEvent={closeUnfollowModal}\r\n                        styles=\"h-72 top-[26.5%]\"\r\n                    >\r\n                        <AreYouSureModal\r\n                            areYouSureEvent={areYouSureEvent}\r\n                            profileImage={profileImage}\r\n                            closeEvent={closeUnfollowModal}\r\n                            questionText={`Unfollow ${username}`}\r\n                            buttonText=\"Unfollow\"\r\n                        />\r\n                    </Modal> :\r\n                    null\r\n            }\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default UserSuggestion","import { db } from \"firebase-setup/firebaseConfig\";\r\nimport { collection, getDocs, query, where } from \"firebase/firestore\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useAppSelector } from \"redux-setup/hooks\";\r\nimport UserState from \"types/userStateType\";\r\n\r\ntype UseUserListType = (usersList: {userId: string}[]) => UserState[]\r\n    \r\nconst useUserList: UseUserListType = (usersList) => {\r\n    const userOnPage = useAppSelector(state => state.userOnPage.user);\r\n    const [allUsers, setAllUsers] = useState<UserState[]>([]);\r\n\r\n    useEffect(() => {\r\n        const getUsers = async () => {\r\n            if(!usersList.length){\r\n                return;\r\n            }\r\n\r\n            const usersRef = collection(db, \"users\");\r\n            const q = query(usersRef, where(\"userId\", \"in\", usersList.map(obj => obj.userId)));\r\n        \r\n            const querySnapshot = await getDocs(q);\r\n            setAllUsers(querySnapshot.docs.map(doc => doc.data()) as UserState[])\r\n        } \r\n\r\n        getUsers();\r\n    }, [userOnPage.userId])\r\n\r\n    return allUsers\r\n}\r\n\r\nexport default useUserList","import React, { useCallback } from 'react'\r\nimport Close from 'svgs/empty/Close';\r\nimport UserLoader from 'components/other/UserLoader';\r\nimport UserSuggestion from \"./UserSuggestion\";\r\nimport useUserList from 'pages/profile/hooks/useUserList';\r\n\r\ntype UsersListProps = {\r\n    usersList: {userId: string}[];\r\n    descriptionLine: string;\r\n    closeEvent: () => void\r\n}\r\n\r\nconst UsersListModal: React.FC<UsersListProps> = React.memo(({ usersList, descriptionLine, closeEvent }) => {\r\n    const allUsers = useUserList(usersList);\r\n    \r\n    const users = allUsers.map(data => <UserSuggestion {...data} key={data.userId} />)\r\n\r\n    const generateSkeletons = useCallback(() => {\r\n        const skeletons = [];\r\n        for (let i = 0; i < 3; i++) {\r\n            skeletons.push(\r\n                <UserLoader\r\n                    key={i}\r\n                    imageStyles={{ width: 40, height: 40, borderRadius: \"50%\" }}\r\n                    firstTextStyles={{ width: 150, height: 9, borderRadius: \"10px\" }}\r\n                    secondTextStyles={{ width: 130, height: 9, borderRadius: \"10px\" }}\r\n                />\r\n            );\r\n        }\r\n\r\n        return skeletons\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n            <div className=\"h-10 w-full flex justify-center items-center font-medium border-b relative\">\r\n                <p>{descriptionLine}</p>\r\n                <button\r\n                    className=\"absolute right-2\"\r\n                    onClick={closeEvent}\r\n                >\r\n                    <Close\r\n                        styles=\"h-7 w-7\"\r\n                    />\r\n                </button>\r\n            </div>\r\n            {\r\n                allUsers.length ?\r\n                    <div className=\"overflow-hidden overflow-y-auto\">\r\n                        {users}\r\n                    </div> :\r\n                    generateSkeletons() \r\n            }\r\n        </>\r\n    )\r\n})\r\n\r\nexport default UsersListModal","import React from 'react'\r\nimport { useState } from 'react'\r\n\r\nconst Heart: React.FC<{ styles: string, includeHovering: boolean }> = ({ styles, includeHovering }) => {\r\n    const [isHovered, setIsHovered] = useState<boolean>(false);\r\n    \r\n    return (\r\n        <svg \r\n            xmlns=\"http://www.w3.org/2000/svg\" \r\n            className={`${styles} ${includeHovering && isHovered && \"text-gray-500\"}`} \r\n            fill=\"none\" \r\n            viewBox=\"0 0 24 24\" \r\n            stroke=\"currentColor\" \r\n            strokeWidth={2}\r\n            onMouseEnter={() => setIsHovered(true)}\r\n            onMouseLeave={() => setIsHovered(false)}\r\n        >\r\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z\" />\r\n        </svg>\r\n    )\r\n}\r\n\r\nexport default Heart","import React from 'react'\r\n\r\nconst FilledHeart: React.FC<{ styles: string }> = ({ styles }) => {\r\n    return (\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" className={styles} viewBox=\"0 0 20 20\" fill=\"currentColor\">\r\n            <path fillRule=\"evenodd\" d=\"M3.172 5.172a4 4 0 015.656 0L10 6.343l1.172-1.171a4 4 0 115.656 5.656L10 17.657l-6.828-6.829a4 4 0 010-5.656z\" clipRule=\"evenodd\" />\r\n        </svg>\r\n    )\r\n}\r\n\r\nexport default FilledHeart"],"names":["AreYouSureModal","React","areYouSureEvent","profileImage","closeEvent","buttonText","questionText","additionalText","className","src","length","process","onClick","sharePost","currentPost","signedUserId","chatId","messageEntering","newMessage","text","from","userId","createdAt","Date","getTime","media","postImage","post","getDoc","doc","db","currentChat","data","updateDoc","messages","lastMessage","lastEdited","userMessage","SharePostModal","signedUser","useAppSelector","state","user","useState","wordEntering","setWordEntering","setMessageEntering","chosenUsers","setChosenUsers","filteredUsers","setFilteredUsers","createChatRoom","useChatRoom","inputRef","useRef","useEffect","handler","setTimeout","getUsers","prevUsers","filter","username","clearTimeout","sendMessages","handleChosenClick","useCallback","chosenUser","current","focus","chosenUsersElements","useMemo","map","Close","styles","addUserToList","removeUserFromList","filteredUsersElements","UserToWriteTo","isUserInList","some","key","handleWordEntering","event","target","value","handleMessageEntering","type","placeholder","onChange","ref","onKeyDown","forEach","chosenUserId","disabled","Time","time","convertUnixTime","toUpperCase","generateTime","CommentForm","commentsRef","changePosts","dispatch","useAppDispatch","uid","useParams","areEmojiOpen","setAreEmojiOpen","toggleEmojisOpen","prevVal","sendComment","createNewComment","fromId","postId","handleEmojiClick","emojiObject","prevText","emoji","handleKey","stopPropagation","noAnimation","pickerStyle","width","height","onEmojiClick","changePostsAdd","changePostsRemove","loggedUser","addLike","hotPosts","posts","newPosts","likes","updatePosts","removeLike","obj","includeHovering","isHovered","setIsHovered","xmlns","fill","viewBox","stroke","strokeWidth","onMouseEnter","onMouseLeave","strokeLinecap","strokeLinejoin","d","usePostLikes","isListModalOpen","setIsListModalOpen","isShareModalOpen","setIsShareModalOpen","handleLikesAmount","likesAmount","toString","replace","focusInput","openShareModal","openListModal","closeShareModal","closeListModal","removeSaved","removeFromSaved","addSaved","addToSaved","FilledHeart","motion","whileTap","transition","repeat","repeatType","duration","Heart","Direct","savedPosts","Saved","Modal","UsersListModal","descriptionLine","usersList","navigate","useNavigate","reversedChatId","getDocs","collection","allChats","chatToNavigateTo","docResult","firstUserId","secondUserId","RoutesTypes","setDoc","deleteChatRoom","deleteDoc","message","imageRef","storage","deleteObject","defaultInfo","userInfo","setUserInfo","getUser","timeNow","minutes","getMinutes","hours","Math","abs","round","days","toFixed","weeks","months","years","currentTime","fullName","isUnfollowModalOpen","setIsUnfollowModalOpen","handleFollowingClick","handleFollowClick","addToFollowing","removeFromFollowing","navigateToProfile","closeUnfollowModal","following","userOnPage","allUsers","setAllUsers","usersRef","q","query","where","querySnapshot","docs","useUserList","users","generateSkeletons","skeletons","i","push","UserLoader","imageStyles","borderRadius","firstTextStyles","secondTextStyles","fillRule","clipRule"],"sourceRoot":""}