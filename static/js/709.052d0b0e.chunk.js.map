{"version":3,"file":"static/js/709.052d0b0e.chunk.js","mappings":"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","sources":["components/modal/AreYouSureModal.tsx","components/modal/Modal.tsx","components/other/DropMenu.tsx","components/other/UserLoader.tsx","helpers/hooks/useChatRoom.ts","helpers/hooks/useUserInfo.ts","svgs/both/Info.tsx","apis/createMessage.ts","svgs/empty/Photograph.tsx","pages/direct/components/chat/MessageForm.tsx","pages/direct/components/chat/ImageModal.tsx","pages/direct/components/chat/ImageMessage.tsx","pages/direct/components/chat/PostMessage.tsx","pages/direct/components/chat/TextMessage.tsx","pages/direct/components/chat/RoomMessages.tsx","pages/direct/components/chat/RoomInfo.tsx","pages/direct/hooks/useUserAndMessages.ts","pages/direct/components/chat/ChatRoom.tsx","svgs/empty/Close.tsx","svgs/empty/Heart.tsx","svgs/empty/Smile.tsx"],"sourcesContent":["import React from 'react'\r\n\r\ntype AreYouSureModalProps = {\r\n    areYouSureEvent: () => void\r\n    profileImage: string\r\n    closeEvent: () => void\r\n    buttonText: string\r\n    questionText: string\r\n    additionalText?: string\r\n}\r\n\r\nconst AreYouSureModal: React.FC<AreYouSureModalProps> = React.memo(({ \r\n    areYouSureEvent, \r\n    profileImage, \r\n    closeEvent, \r\n    buttonText, \r\n    questionText, \r\n    additionalText \r\n}) => {\r\n    return (\r\n        <div className=\"h-full w-full flex flex-col items-center z-50\">\r\n            <div className={`w-full h-[100px] flex items-start justify-center ${additionalText ? \"mt-3 mb-2\" : \"mt-6 mb-4\"}`}>\r\n                <img\r\n                    src={profileImage.length ? profileImage : process.env.PUBLIC_URL + \"/images/default-avatar-image.jpg\"}\r\n                    className=\"rounded-full h-[100px] w-[100px] object-cover\"\r\n                />\r\n            </div>\r\n            <p className={`text-sm ${!additionalText && \"mb-6\"}`}>{questionText}?</p>\r\n            {\r\n                additionalText ?\r\n                    <p className=\"text-gray-400 text-sm w-3/4 text-center mb-3 mt-1\">{additionalText}</p> :\r\n                    null\r\n            }\r\n            <button\r\n                className=\"w-full h-12 border-t-2 flex items-center justify-center text-rose-600 font-bold text-sm\"\r\n                onClick={areYouSureEvent}\r\n            >\r\n                {buttonText}\r\n            </button>\r\n            <button\r\n                className=\"w-full h-12 border-t-2 flex items-center justify-center text-sm\"\r\n                onClick={closeEvent}\r\n            >\r\n                Cancel\r\n            </button>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default AreYouSureModal","import React, { useCallback, useEffect } from 'react'\r\nimport { motion } from 'framer-motion';\r\nimport Close from 'svgs/empty/Close';\r\n\r\ntype ModalProps = {\r\n    children: React.ReactNode;\r\n    closeEvent: () => void;\r\n    styles: string\r\n}\r\n\r\nconst Modal: React.FC<ModalProps> = React.memo(({ children, closeEvent, styles }) => {\r\n    useEffect(() => {\r\n        document.body.classList.add(\"overflow-hidden\");\r\n        return () => document.body.classList.remove(\"overflow-hidden\");\r\n    }, [])\r\n\r\n    const clickHandler = useCallback((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\r\n        event.stopPropagation()\r\n        closeEvent()\r\n    }, [])\r\n\r\n    const stopPropagation = useCallback((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\r\n        event.stopPropagation()\r\n    }, [])\r\n\r\n    return (\r\n        <div\r\n            className=\"w-screen h-screen bg-[rgba(0,0,0,0.6)] fixed top-0 left-0 flex items-center justify-center z-50\"\r\n            onClick={clickHandler}\r\n        >\r\n            <motion.div\r\n                className={`${styles.includes(\"w-\") ? \"\" : \"w-64 sm:w-96\"} absolute flex flex-col bg-white rounded-xl z-50 ${styles}`}\r\n                initial={{ scale: 1.2 }}\r\n                animate={{ scale: 1 }}\r\n                transition={{ duration: 0.12 }}\r\n                onClick={stopPropagation}\r\n            >\r\n                {children}\r\n            </motion.div>\r\n            <div className=\"absolute top-4 right-4 cursor-pointer\">\r\n                <Close styles=\"w-[25px] h-[25px] text-white\"/>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default Modal","import React from 'react';\r\nimport { motion } from 'framer-motion';\r\n\r\ntype DropMenuProps = {\r\n  children: React.ReactNode;\r\n  closeEvent: (() => void) | ((event: any) => void);\r\n  styles: string;\r\n  noAnimation?: boolean;\r\n}\r\n\r\nconst DropMenu: React.FC<DropMenuProps> = React.memo(({ children, closeEvent, styles, noAnimation }) => {\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"w-screen h-screen fixed top-0 left-0\"\r\n        onClick={closeEvent}\r\n      ></div>\r\n      <motion.div\r\n        className={`bg-white flex items-center rounded-lg drop-shadow-md absolute flex-col z-50 ${styles}`}\r\n        {...(\r\n          !noAnimation ?\r\n            {\r\n              initial: { y: -50 },\r\n              animate: { y: 0 },\r\n              exit: { y: 50 }\r\n            } :\r\n            {}\r\n        )}\r\n      >\r\n        {children}\r\n      </motion.div>\r\n    </>\r\n  )\r\n})\r\n\r\nexport default DropMenu","import React from 'react';\r\nimport { RectShape } from 'react-placeholder/lib/placeholders';\r\n\r\ntype UserLoaderType = {\r\n    imageStyles: object, \r\n    firstTextStyles: object,\r\n    secondTextStyles: object,\r\n    margin?: string,\r\n}\r\n\r\nconst UserLoader: React.FC<UserLoaderType> = React.memo(({ imageStyles, firstTextStyles, secondTextStyles, margin }) => {\r\n    return (\r\n        <div className={`flex px-[2px] pr-6 items-center justify-center py-1 ${margin ? margin: \"\"}`}>\r\n            <div className=\"w-full py-[0.5px] flex items-center px-3\">\r\n                <RectShape color=\"#E5E7EB\" style={imageStyles} />\r\n                <div className=\"w-[calc(100%-70px)] mt-1 gap-2 h-5/6 flex flex-col justify-center\">\r\n                    <RectShape color=\"#E5E7EB\" style={firstTextStyles} />\r\n                    <RectShape color=\"#E5E7EB\" style={secondTextStyles} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default UserLoader","import RoutesTypes from \"constants/routes-types\";\r\nimport { db, storage } from \"firebase-setup/firebaseConfig\";\r\nimport { collection, deleteDoc, doc, getDocs, setDoc } from \"firebase/firestore\";\r\nimport { deleteObject, ref } from \"firebase/storage\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useAppSelector } from \"redux-setup/hooks\";\r\nimport MessageType from \"types/messageType\";\r\n\r\ntype CreateChatRoomProps = {\r\n    chosenUserId: string; \r\n    closeEvent?: (chatId: string) => void;\r\n} \r\n\r\ntype DeleteChatRoomProps = {\r\n    messages: MessageType[],\r\n    chatId: string,\r\n}\r\n\r\nconst useChatRoom = () => {\r\n    const signedUser = useAppSelector(state => state.signedUser.user);\r\n    const navigate = useNavigate();\r\n\r\n    const createChatRoom = async ({ chosenUserId, closeEvent }: CreateChatRoomProps) => {\r\n        const chatId = signedUser.userId + \"-\" + chosenUserId;\r\n        const reversedChatId = chosenUserId + \"-\" + signedUser.userId;\r\n\r\n        const allChats = await getDocs(collection(db, \"chats\"));\r\n\r\n        let chatToNavigateTo: string = \"\";\r\n        allChats.forEach(doc => {\r\n            const docResult = doc.data().firstUserId + \"-\" + doc.data().secondUserId;\r\n            if (docResult === chatId) {\r\n                chatToNavigateTo = chatId;\r\n                return\r\n            }\r\n\r\n            if (docResult === reversedChatId) {\r\n                chatToNavigateTo = reversedChatId;\r\n                return;\r\n            }\r\n        })\r\n\r\n        if (chatToNavigateTo.length !== 0) {\r\n            if(closeEvent){\r\n                closeEvent(chatToNavigateTo);\r\n            }\r\n            navigate(RoutesTypes.DIRECT + \"/\" + chatToNavigateTo);\r\n            return;\r\n        }\r\n\r\n        await setDoc(doc(db, \"chats\", chatId), {\r\n            firstUserId: signedUser.userId,\r\n            secondUserId: chosenUserId,\r\n            messages: [],\r\n            lastMessage: {\r\n                text: \"\",\r\n                userId: \"\",\r\n            },\r\n            lastEdited: new Date().getTime()\r\n        });\r\n\r\n        if(closeEvent){\r\n            closeEvent(chatId);\r\n        }\r\n        navigate(RoutesTypes.DIRECT + \"/\" + chatId)\r\n    }\r\n\r\n    const deleteChatRoom = async ({ messages, chatId }: DeleteChatRoomProps) => {\r\n        deleteDoc(doc(db, \"chats\", chatId));\r\n\r\n        for (const message of messages) {\r\n          if (message.media.length) {\r\n            const imageRef = ref(storage, message.media);\r\n            await deleteObject(imageRef);\r\n          }\r\n        }\r\n      }\r\n\r\n    return { createChatRoom, deleteChatRoom }\r\n}\r\n\r\nexport default useChatRoom;","import { db } from \"firebase-setup/firebaseConfig\";\r\nimport { doc, getDoc } from \"firebase/firestore\";\r\nimport { useEffect, useState } from \"react\";\r\nimport UserState from \"types/userStateType\";\r\n\r\ntype UserInfo = {\r\n    username: string,\r\n    profileImage: string,\r\n    userId: string\r\n}\r\n\r\ntype UseUserInfoType = (fromId: string) => UserInfo\r\n\r\nconst defaultInfo = {\r\n    username: \"\",\r\n    profileImage: \"\",\r\n    userId: \"\"\r\n}\r\n\r\nconst useUserInfo: UseUserInfoType = (fromId) => {\r\n    const [userInfo, setUserInfo] = useState<UserInfo>(defaultInfo)\r\n\r\n    useEffect(() => {\r\n        const getUser = async () => {\r\n            const user = (await getDoc(doc(db, \"users\", fromId))).data() as UserState;\r\n            setUserInfo({ ...user })\r\n        }\r\n\r\n        setUserInfo(defaultInfo)\r\n        getUser();\r\n    }, [fromId])\r\n\r\n    return userInfo\r\n}\r\n\r\nexport default useUserInfo","import React from 'react'\r\n\r\nconst Info: React.FC<{ isOpen: boolean }> = ({ isOpen }) => {\r\n    return (\r\n        isOpen ?\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-7 w-7\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\r\n                <path fillRule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z\" clipRule=\"evenodd\" />\r\n            </svg> :\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-7 w-7\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" strokeWidth={2}>\r\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\r\n            </svg>\r\n\r\n    )\r\n}\r\n\r\nexport default Info","import { db, storage } from \"firebase-setup/firebaseConfig\";\r\nimport { doc, updateDoc } from \"firebase/firestore\";\r\nimport { getDownloadURL, ref, uploadBytes } from \"firebase/storage\";\r\nimport MessageType from \"types/messageType\";\r\nimport { v4 } from \"uuid\";\r\n\r\ntype CreateMessageProps = {\r\n    imageUpload: File | null;\r\n    wordEntering: string,\r\n    loggedUserId: string,\r\n    chatId: string,\r\n    messages: MessageType[],\r\n}\r\n\r\nconst createMessage = async ({ imageUpload, wordEntering, loggedUserId, chatId, messages }: CreateMessageProps) => {\r\n    let imageUrl = \"\";\r\n    if(imageUpload){\r\n        const imageRef = ref(storage, `Images/${imageUpload.name + v4()}`)\r\n        await uploadBytes(imageRef, imageUpload)\r\n        imageUrl = await getDownloadURL(imageRef);\r\n    }\r\n\r\n    const newMessage = {\r\n        text: wordEntering,\r\n        from: {\r\n            userId: loggedUserId,\r\n        },\r\n        createdAt: (new Date()).getTime(),\r\n        media: imageUrl\r\n    }\r\n\r\n    await updateDoc(doc(db, \"chats\", chatId as string), {\r\n        messages: [...messages, newMessage],\r\n        lastMessage: {\r\n            text: newMessage.text,\r\n            userId: loggedUserId\r\n        },\r\n        lastEdited: (new Date()).getTime()\r\n    })\r\n}\r\n\r\nexport default createMessage;","import React from 'react'\r\n\r\nconst Photograph: React.FC = () => {\r\n    return (\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-7 w-7\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" strokeWidth={2}>\r\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z\" />\r\n        </svg>\r\n    )\r\n}\r\n\r\nexport default Photograph","import createMessage from 'apis/createMessage'\r\nimport DropMenu from 'components/other/DropMenu'\r\nimport Picker, { IEmojiData } from 'emoji-picker-react'\r\nimport React, { useCallback, useState } from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport { useAppSelector } from 'redux-setup/hooks'\r\nimport Heart from 'svgs/empty/Heart'\r\nimport Photograph from 'svgs/empty/Photograph'\r\nimport Smile from 'svgs/empty/Smile'\r\nimport MessageType from 'types/messageType'\r\n\r\ntype MessageFormProps = {\r\n    wordEntering: string,\r\n    setWordEntering: React.Dispatch<React.SetStateAction<string>>,\r\n    setImageUpload:React.Dispatch<React.SetStateAction<File | null>>,\r\n    imageUpload: File | null,\r\n    messages: MessageType[]\r\n}\r\n\r\nconst MessageForm: React.FC<MessageFormProps> = React.memo(({ \r\n    wordEntering, \r\n    setWordEntering, \r\n    setImageUpload, \r\n    imageUpload, \r\n    messages,\r\n}) => {\r\n    const loggedUser = useAppSelector(state => state.signedUser.user);\r\n\r\n    const [areEmojiOpen, setAreEmojiOpen] = useState<boolean>(false);\r\n\r\n    const { chatId } = useParams();\r\n\r\n    const closeEvent = useCallback((event: any) => {\r\n        event.stopPropagation();\r\n        setAreEmojiOpen(false)\r\n    }, [])\r\n\r\n    const sendMessage = async () => {\r\n        if(!wordEntering.length){\r\n            return;\r\n        }\r\n\r\n        createMessage({ \r\n            imageUpload, \r\n            wordEntering, \r\n            loggedUserId: loggedUser.userId, \r\n            chatId: chatId as string, \r\n            messages \r\n        })\r\n\r\n        setImageUpload(null);\r\n        setWordEntering(\"\");\r\n    }\r\n\r\n    const handleEmojiClick = useCallback((event: React.MouseEvent<Element, MouseEvent>, emojiObject: IEmojiData) => {\r\n        setWordEntering(prevText => prevText + emojiObject.emoji);\r\n    }, [])\r\n\r\n    const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\r\n        console.log('here')\r\n        if (event.key === \"Enter\") {\r\n            sendMessage();\r\n        }\r\n    }\r\n\r\n    const handleChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\r\n        if (event.target.files) {\r\n            setImageUpload(event.target.files[0])\r\n        }\r\n    }, [])\r\n\r\n    const toggleEmojisOpen = useCallback(() => {\r\n        setAreEmojiOpen(prevVal => !prevVal)\r\n    }, [])\r\n\r\n    const handleWordEntering = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setWordEntering(event.target.value)\r\n    }, [])\r\n\r\n    const addHeart = useCallback(() => {\r\n        setWordEntering(prevText => prevText + \"❤️\")\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"flex justify-between items-center mb-[18px] rounded-full border h-[45px] w-3/4 sm:w-5/6 xl:w-3/4 px-4 gap-2\">\r\n            <div className=\"relative\">\r\n                <button\r\n                    className=\"h-full flex items-center\"\r\n                    onClick={toggleEmojisOpen}\r\n                >\r\n                    <Smile styles=\"h-7 w-7\"/>\r\n                </button>\r\n                {\r\n                    areEmojiOpen ?\r\n                        <DropMenu\r\n                            closeEvent={closeEvent}\r\n                            styles=\"w-[250px] bottom-12 h-64 z-20\"\r\n                            noAnimation={true}\r\n                        >\r\n                            <Picker\r\n                                pickerStyle={{ width: \"100%\", height: \"100%\" }}\r\n                                onEmojiClick={handleEmojiClick}\r\n                            />\r\n                        </DropMenu> :\r\n                        null\r\n                }\r\n            </div>\r\n            <input\r\n                type=\"text\"\r\n                placeholder=\"Message...\"\r\n                className=\"w-full h-8 placeholder:text-sm\"\r\n                value={wordEntering}\r\n                onChange={handleWordEntering}\r\n                onKeyDown={handleKeyDown}\r\n            />\r\n            {\r\n                ((wordEntering.length && wordEntering.split(\"\").some(letter => letter !== \" \")) || imageUpload) ?\r\n                    <button\r\n                        className=\"font-semibold text-blue-500\"\r\n                        onClick={sendMessage}\r\n                    >\r\n                        <p>Send</p>\r\n                    </button> :\r\n                    <>\r\n                        <button onClick={addHeart}>\r\n                            <Heart\r\n                                styles=\"h-7 w-7\"\r\n                                includeHovering={false}\r\n                            />\r\n                        </button>\r\n                        <div className=\"flex gap-2\">\r\n                            <label\r\n                                htmlFor='img'\r\n                                className='cursor-pointer'\r\n                            >\r\n                                <Photograph />\r\n                            </label>\r\n                            <input\r\n                                type=\"file\"\r\n                                id=\"img\"\r\n                                accept=\"image/*\"\r\n                                className=\"hidden \"\r\n                                onChange={handleChange}\r\n                            />\r\n                        </div>\r\n                    </>\r\n            }\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default MessageForm","import React from 'react'\r\n\r\ntype ImageModalProps = {\r\n    image: string;\r\n}\r\n\r\nconst ImageModal: React.FC<ImageModalProps> = React.memo(({ image }) => {\r\n    return (\r\n        <div className=\"w-full bg-black h-full flex items-center overflow-hidden rounded-xl\">\r\n            <img\r\n                src={image}\r\n                className=\"h-full w-full object-contain\"\r\n            />\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default ImageModal","import Modal from 'components/modal/Modal';\r\nimport RoutesTypes from 'constants/routes-types';\r\nimport React, { useCallback, useEffect, useRef, useState } from 'react'\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useAppSelector } from 'redux-setup/hooks';\r\nimport ImageModal from './ImageModal';\r\nimport { IMessageProps } from './RoomMessages'\r\n\r\nconst ImageMessage: React.FC<IMessageProps> = React.memo(({ text, from, media, profileImage }) => {\r\n    const loggedUser = useAppSelector(state => state.signedUser.user)\r\n    const navigate = useNavigate();\r\n    const scrollRef = useRef<HTMLDivElement>(null);\r\n\r\n    const [isImageModalOpen, setIsImageModalOpen] = useState<boolean>(false);\r\n\r\n    useEffect(() => {\r\n        if (scrollRef.current) {\r\n            scrollRef.current.scrollIntoView({\"behavior\": \"auto\"})\r\n        }\r\n    }, [])\r\n\r\n    const navigateToProfile = useCallback(() => {\r\n        navigate(RoutesTypes.DASHBOARD + from.userId)\r\n    }, [from.userId])\r\n\r\n    const openImageModal = useCallback(() => {\r\n        setIsImageModalOpen(true);\r\n    }, [])\r\n\r\n    const closeImageModal = useCallback(() => {\r\n        setIsImageModalOpen(false);\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <>\r\n            <div\r\n                className={`\r\n                    flex items-center gap-2 w-11/12 sm:w-5/6 xl:w-3/4 my-[6px] \r\n                    ${from.userId === loggedUser.userId ? \"justify-end\" : \"justify-start\"}\r\n                `}\r\n                ref={scrollRef}\r\n            >\r\n                {\r\n                    from.userId !== loggedUser.userId ?\r\n                        <button\r\n                            className=\"flex justify-center items-center gap-4 self-end\"\r\n                            onClick={navigateToProfile}\r\n                        >\r\n                            <img\r\n                                src={\r\n                                    profileImage.length ?\r\n                                        profileImage :\r\n                                        process.env.PUBLIC_URL + \"/images/default-avatar-gray.jpg\"\r\n                                }\r\n                                className=\"h-8 w-8 rounded-full object-cover\"\r\n                            />\r\n                        </button> :\r\n                        null\r\n                }\r\n                <div className={`\r\n                    inline-block rounded-[10px] \r\n                    ${from.userId === loggedUser.userId ? \"bg-gray-200\" : \"border\"} \r\n                    ${text.length ? \"pb-1\" : \"\"} w-[200px]\r\n                `}>\r\n                    <button onClick={openImageModal}>\r\n                        <img\r\n                            src={media}\r\n                            className=\"h-[190px] w-full rounded rounded-t-[10px] object-cover mb-[-5px]\"\r\n                        />\r\n                    </button>\r\n                    {\r\n                        text.length ?\r\n                            <p className=\"break-words mx-1\">\r\n                                <span>{text}</span>\r\n                            </p> :\r\n                            null\r\n                    }\r\n                </div>\r\n            </div>\r\n            {\r\n                isImageModalOpen ?\r\n                    <Modal\r\n                        closeEvent={closeImageModal}\r\n                        styles=\"w-[70%] sm:w-5/6 h-[60%] lg:h-[90%] top-[20%] lg:top-[5%]\"\r\n                    >\r\n                        <ImageModal image={media} />\r\n                    </Modal> :\r\n                    null\r\n            }\r\n        </>\r\n    )\r\n})\r\n\r\n\r\nexport default ImageMessage","import UserLoader from 'components/other/UserLoader';\r\nimport ProfileRoutes from 'constants/profile-routes';\r\nimport RoutesTypes from 'constants/routes-types';\r\nimport useUserInfo from 'helpers/hooks/useUserInfo';\r\nimport React, { useCallback, useEffect, useRef } from 'react'\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport { useAppSelector } from 'redux-setup/hooks';\r\nimport { IMessageProps } from './RoomMessages';\r\n\r\nconst PostMessage: React.FC<IMessageProps> = React.memo(({ text, from, media, profileImage, post }) => {\r\n    const loggedUser = useAppSelector(state => state.signedUser.user)\r\n    const navigate = useNavigate();\r\n    const scrollRef = useRef<HTMLDivElement>(null);\r\n\r\n    const userInfo = useUserInfo(post?.fromId as string)\r\n\r\n    useEffect(() => {\r\n        if (scrollRef.current) {\r\n            scrollRef.current.scrollIntoView({ \"behavior\": \"auto\" })\r\n        }\r\n    }, [])\r\n\r\n    const navigateToUsersProfile = useCallback(() => {\r\n        navigate(RoutesTypes.DASHBOARD + from.userId)\r\n    }, [from.userId])\r\n\r\n    const navigateToPostProfile = useCallback(() => {\r\n        navigate(RoutesTypes.DASHBOARD + userInfo.userId)\r\n    }, [userInfo.userId])\r\n\r\n    return (\r\n        <div\r\n            className={`\r\n                flex items-center gap-2 w-11/12 sm:w-5/6 xl:w-3/4 my-[6px] \r\n                ${from.userId === loggedUser.userId ? \"justify-end\" : \"justify-start\"}\r\n            `}\r\n            ref={scrollRef}\r\n        >\r\n            {\r\n                from.userId !== loggedUser.userId ?\r\n                    <button\r\n                        className=\"flex justify-center items-center gap-4 self-end\"\r\n                        onClick={navigateToUsersProfile}\r\n                    >\r\n                        <img\r\n                            src={\r\n                                profileImage.length ?\r\n                                    profileImage :\r\n                                    process.env.PUBLIC_URL + \"/images/default-avatar-gray.jpg\"\r\n                            }\r\n                            className=\"h-8 w-8 rounded-full object-cover\"\r\n                        />\r\n                    </button> :\r\n                    null\r\n            }\r\n            <div className={`\r\n                inline-block max-w-[200px] rounded-[25px] pb-2 pt-1 w-[200px]\r\n                ${from.userId === loggedUser.userId ? \"bg-gray-200\" : \"border\"}\r\n            `}>\r\n                <div className=\"w-full flex justify-start border-b items-center\">\r\n                    {\r\n                        userInfo.userId.length ?\r\n                            <button\r\n                                className=\"h-12 py-[0.5px] gap-2 flex items-center px-3\"\r\n                                onClick={navigateToPostProfile}\r\n                            >\r\n                                <img\r\n                                    src={\r\n                                        userInfo.profileImage.length ?\r\n                                            userInfo.profileImage :\r\n                                            from.userId === loggedUser.userId ?\r\n                                                process.env.PUBLIC_URL + \"/images/default-avatar-gray.jpg\" :\r\n                                                process.env.PUBLIC_URL + \"/images/default-avatar-image.jpg\"\r\n                                    }\r\n                                    className=\"h-8 w-8 rounded-full object-cover\"\r\n                                />\r\n                                <p className=\"text-[14px] tracking-wide whitespace-nowrap\">{userInfo.username}</p>\r\n                            </button> :\r\n                            <UserLoader\r\n                                imageStyles={{ width: 30, height: 30, borderRadius: \"50%\" }}\r\n                                firstTextStyles={{ width: 100, height: 7, borderRadius: \"10px\" }}\r\n                                secondTextStyles={{ width: 80, height: 7, borderRadius: \"10px\" }}\r\n                                margin=\"my-1\"\r\n                            />\r\n                    }\r\n                </div>\r\n                <Link to={RoutesTypes.DASHBOARD + post?.fromId + \"/\" + ProfileRoutes.POST + post?.postId}>\r\n                    <img\r\n                        src={media}\r\n                        className=\"h-[190px] w-full mb-2 object-cover\"\r\n                    />\r\n                </Link>\r\n                <p className=\"break-words mx-1 mx-4 mb-1\">\r\n                    <button\r\n                        onClick={navigateToPostProfile}\r\n                        className=\"font-medium text-sm\"\r\n                    >\r\n                        {userInfo.username}\r\n                    </button>\r\n                    <span className=\"text-sm\">{\" \"}{text}</span>\r\n                </p>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n\r\nexport default PostMessage","import RoutesTypes from 'constants/routes-types';\r\nimport React, { useCallback, useEffect, useRef } from 'react'\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useAppSelector } from 'redux-setup/hooks';\r\nimport { IMessageProps } from './RoomMessages';\r\n\r\nconst TextMessage: React.FC<IMessageProps> = React.memo(({ text, from, profileImage  }) => {\r\n    const loggedUser = useAppSelector(state => state.signedUser.user)\r\n    const navigate = useNavigate();\r\n    const scrollRef = useRef<HTMLDivElement>(null);\r\n\r\n    useEffect(() => {\r\n        if (scrollRef.current) {\r\n            scrollRef.current.scrollIntoView({\"behavior\": \"auto\"})\r\n        }\r\n    }, [])\r\n\r\n    const navigateToProfile = useCallback(() => {\r\n        navigate(RoutesTypes.DASHBOARD + from.userId)\r\n    }, [from.userId])\r\n\r\n    return (\r\n        <div\r\n            className={`\r\n                flex items-center gap-2 w-11/12 sm:w-5/6 xl:w-3/4 my-[6px] \r\n                ${from.userId === loggedUser.userId ? \"justify-end\" : \"justify-start\"}\r\n            `}\r\n            ref={scrollRef}\r\n        >\r\n            {\r\n                from.userId !== loggedUser.userId ?\r\n                    <button\r\n                        className=\"flex justify-center items-center gap-4 self-end\"\r\n                        onClick={navigateToProfile}\r\n                    >\r\n                        <img\r\n                            src={\r\n                                profileImage.length ?\r\n                                    profileImage :\r\n                                    process.env.PUBLIC_URL + \"/images/default-avatar-gray.jpg\"\r\n                            }\r\n                            className=\"h-8 w-8 rounded-full object-cover\"\r\n                        />\r\n                    </button> :\r\n                    null\r\n            }\r\n            <div className={`\r\n                inline-block max-w-[200px] rounded-[25px] py-2 px-2\r\n                ${from.userId === loggedUser.userId ? \"bg-gray-200\" : \"border\"} \r\n            `}>\r\n                <p className=\"break-words mx-1\">\r\n                    <span>{text}</span>\r\n                </p>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default TextMessage","import React, { useMemo } from 'react'\r\nimport MessageType from 'types/messageType'\r\nimport ImageMessage from './ImageMessage';\r\nimport PostMessage from './PostMessage';\r\nimport TextMessage from './TextMessage';\r\n\r\nexport interface IMessageProps extends MessageType {\r\n    profileImage: string,\r\n}\r\n\r\ntype RoomMessagesProps = {\r\n    messages: MessageType[],\r\n    profileImage: string,\r\n}\r\n\r\nconst RoomMessages: React.FC<RoomMessagesProps> = React.memo(({ messages, profileImage }) => {\r\n    const messagesToRender = useMemo(() => messages.map(message => {\r\n        if (!message.media && !message.post) {\r\n            return (\r\n                <TextMessage \r\n                    {...message}\r\n                    profileImage={profileImage}\r\n                    key={message.createdAt}\r\n                />\r\n            )\r\n        }\r\n\r\n        if(message.post){\r\n            return (\r\n                <PostMessage \r\n                    {...message}\r\n                    profileImage={profileImage}\r\n                    key={message.createdAt}\r\n                />\r\n            )\r\n        }\r\n        \r\n        if (message.media) {\r\n            return (\r\n                <ImageMessage \r\n                    {...message}\r\n                    profileImage={profileImage}\r\n                    key={message.createdAt}\r\n                />\r\n            )\r\n        }\r\n    }), [messages])\r\n\r\n    return (\r\n        <div className=\"max-h-[calc(100%-45px-18px)] overflow-hidden overflow-y-auto w-full no-bar flex flex-col items-center\">\r\n            {messagesToRender}\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default RoomMessages","import React, { useCallback, useState } from 'react'\r\nimport { Link, useNavigate, useParams } from 'react-router-dom'\r\nimport RoutesTypes from 'constants/routes-types'\r\nimport AreYouSureModal from 'components/modal/AreYouSureModal'\r\nimport Modal from 'components/modal/Modal'\r\nimport MessageType from 'types/messageType'\r\nimport useChatRoom from 'helpers/hooks/useChatRoom'\r\nimport UserState from 'types/userStateType'\r\n\r\ntype RoomInfoProps = {\r\n  secondUser: UserState\r\n  messages: MessageType[];\r\n}\r\n\r\nconst RoomInfo: React.FC<RoomInfoProps> = React.memo(({ secondUser, messages }) => {\r\n  const navigate = useNavigate();\r\n  const { chatId } = useParams();\r\n\r\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState<boolean>(false);\r\n  const { deleteChatRoom } = useChatRoom();\r\n\r\n  const areYouSureEvent = () => {\r\n    deleteChatRoom({ messages, chatId: chatId as string });\r\n    navigate(RoutesTypes.DIRECT);\r\n  }\r\n\r\n  const openDeleteModal = useCallback(() => {\r\n    setIsDeleteModalOpen(true)\r\n  }, [])\r\n\r\n  const closeDeleteModal = useCallback(() => {\r\n    setIsDeleteModalOpen(false)\r\n  }, [])\r\n\r\n  return (\r\n    <div className=\"w-full flex flex-col justify-center py-4\">\r\n      <p className=\"font-medium text-sm tracking-wide whitespace-nowrap px-4\">Members</p>\r\n      <div className=\"flex w-full h-24 items-center gap-3 border-b px-4\">\r\n        <Link to={RoutesTypes.DASHBOARD + secondUser.userId}>\r\n          <img\r\n            src={\r\n              secondUser.profileImage.length ?\r\n                secondUser.profileImage :\r\n                process.env.PUBLIC_URL + \"/images/default-avatar-gray.jpg\"\r\n            }\r\n            className=\"h-[60px] w-[60px] rounded-full object-cover\"\r\n          />\r\n        </Link>\r\n        <Link\r\n          className=\"flex flex-col justify-center text-left\"\r\n          to={RoutesTypes.DASHBOARD + secondUser.userId}\r\n        >\r\n          <p className=\"font-medium text-sm tracking-wide whitespace-nowrap\">{secondUser.username}</p>\r\n          <p className=\"text-gray-400 text-sm\">{secondUser.fullName}</p>\r\n        </Link>\r\n      </div>\r\n      <div className=\"w-full flex flex-col items-start border-b gap-4 py-1\">\r\n        <button\r\n          className=\"py-1 text-rose-600 font-medium text-sm px-4\"\r\n          onClick={openDeleteModal}\r\n        >\r\n          Delete chat\r\n        </button>\r\n        <button\r\n          className=\"py-1 text-rose-600 font-medium text-sm px-4\"\r\n          onClick={() => null}\r\n        >\r\n          Report\r\n        </button>\r\n        <button\r\n          className=\"py-1 text-rose-600 font-medium text-sm px-4\"\r\n          onClick={() => null}\r\n        >\r\n          Block\r\n        </button>\r\n      </div>\r\n      {\r\n        isDeleteModalOpen ?\r\n          <Modal\r\n            closeEvent={closeDeleteModal}\r\n            styles=\"h-72 top-[26.5%]\"\r\n          >\r\n            <AreYouSureModal\r\n              areYouSureEvent={areYouSureEvent}\r\n              profileImage={secondUser.profileImage}\r\n              closeEvent={closeDeleteModal}\r\n              questionText=\"Delete Conversation\"\r\n              buttonText=\"Delete\"\r\n              additionalText=\"Deleting removes the conversation from everyone's inbox\"\r\n            />\r\n          </Modal> :\r\n          null\r\n      }\r\n    </div>\r\n  )\r\n})\r\n\r\nexport default RoomInfo","import { useEffect, useState } from \"react\";\r\nimport UserState from \"types/userStateType\";\r\nimport { initialState as initialUser } from \"redux-setup/features/signed-user/signedUser\";\r\nimport MessageType from \"types/messageType\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useAppSelector } from \"redux-setup/hooks\";\r\nimport { doc, getDoc, onSnapshot } from \"firebase/firestore\";\r\nimport { db } from \"firebase-setup/firebaseConfig\";\r\nimport ChatState from \"types/chatStateType\";\r\n\r\ntype UseUserAndMessagesType = () => {\r\n    secondUser: UserState, \r\n    wordEntering: string, \r\n    setWordEntering: React.Dispatch<React.SetStateAction<string>>\r\n    messages: MessageType[], \r\n}\r\n\r\nconst useUserAndMessages: UseUserAndMessagesType = () => {\r\n    const loggedUser = useAppSelector(state => state.signedUser.user);\r\n    const { chatId } = useParams();\r\n\r\n    const [secondUser, setSecondUser] = useState<UserState>(initialUser.user)\r\n    const [wordEntering, setWordEntering] = useState<string>(\"\");\r\n    const [messages, setMessages] = useState<MessageType[]>([]);\r\n\r\n    useEffect(() => {\r\n        const getUserAndMessages = async () => {\r\n            if (chatId) {\r\n                const uids = chatId.split(\"-\");\r\n                const secondUserId = uids[1] === loggedUser.userId ? uids[0] : uids[1];\r\n\r\n                const dataBaseUser = await getDoc(doc(db, \"users\", secondUserId));\r\n                setSecondUser(dataBaseUser.data() as UserState);\r\n\r\n                onSnapshot(doc(db, \"chats\", chatId as string), (doc) => {\r\n                    const chatData = doc.data() as ChatState;\r\n                    setMessages(chatData.messages);\r\n                    setWordEntering(\"\");\r\n                })\r\n            }\r\n        }\r\n\r\n        getUserAndMessages();\r\n    }, [chatId, loggedUser])\r\n\r\n    return { secondUser, wordEntering, setWordEntering, messages } \r\n}\r\n\r\nexport default useUserAndMessages","import React, { useCallback, useState } from 'react'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport Info from 'svgs/both/Info';\r\nimport MessageForm from './MessageForm';\r\nimport RoutesTypes from 'constants/routes-types';\r\nimport RoomMessages from './RoomMessages';\r\nimport RoomInfo from './RoomInfo';\r\nimport useUserAndMessages from 'pages/direct/hooks/useUserAndMessages';\r\n\r\nconst ChatRoom: React.FC = React.memo(() => {\r\n    const navigate = useNavigate();\r\n\r\n    const [imageUpload, setImageUpload] = useState<File | null>(null);\r\n    const [isInfoOpen, setIsInfoOpen] = useState<boolean>(false);\r\n\r\n    const { secondUser, wordEntering, setWordEntering, messages } = useUserAndMessages();\r\n\r\n    const navigateToProfile = useCallback(() => {\r\n        navigate(RoutesTypes.DASHBOARD + secondUser.userId)\r\n    }, [secondUser.userId])\r\n\r\n    const toggleInfoOpen = useCallback(() => {\r\n        setIsInfoOpen(prevVal => !prevVal)\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"w-full h-full flex flex-col items-center\">\r\n            <div className=\"flex justify-between items-center border-b h-[60px] pl-8 pr-6 w-full\">\r\n                {\r\n                    isInfoOpen ?\r\n                        <p className=\"font-medium whitespace-nowrap ml-[45%]\">Details</p> :\r\n                        <button\r\n                            className=\"flex gap-4\"\r\n                            onClick={navigateToProfile}\r\n                        >\r\n                            <img\r\n                                src={\r\n                                    secondUser.profileImage.length ?\r\n                                        secondUser.profileImage :\r\n                                        process.env.PUBLIC_URL + \"/images/default-avatar-gray.jpg\"\r\n                                }\r\n                                className=\"h-6 w-6 rounded-full object-cover\"\r\n                            />\r\n                            <p className=\"font-medium text-sm tracking-wide whitespace-nowrap\">\r\n                                {secondUser.username}\r\n                            </p>\r\n                        </button>\r\n                }\r\n                <button onClick={toggleInfoOpen}>\r\n                    <Info isOpen={isInfoOpen}/>\r\n                </button>\r\n            </div>\r\n            {\r\n                isInfoOpen ?\r\n                    <RoomInfo\r\n                        secondUser={secondUser}\r\n                        messages={messages}\r\n                    /> :\r\n                    <div className=\"flex h-[calc(100%-60px)] flex-col justify-end w-full items-center\">\r\n                        <RoomMessages\r\n                            messages={messages}\r\n                            profileImage={secondUser.profileImage}\r\n                        />\r\n                        <MessageForm\r\n                            wordEntering={wordEntering}\r\n                            setWordEntering={setWordEntering}\r\n                            messages={messages}\r\n                            setImageUpload={setImageUpload}\r\n                            imageUpload={imageUpload}\r\n                        />\r\n                    </div>\r\n            }\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default ChatRoom","import React from 'react'\r\n\r\nconst Close: React.FC<{ styles: string }> = ({ styles }) => {\r\n    return (\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" className={styles} fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" strokeWidth={2}>\r\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M6 18L18 6M6 6l12 12\" />\r\n        </svg>\r\n    )\r\n}\r\n\r\nexport default Close","import React from 'react'\r\nimport { useState } from 'react'\r\n\r\nconst Heart: React.FC<{ styles: string, includeHovering: boolean }> = ({ styles, includeHovering }) => {\r\n    const [isHovered, setIsHovered] = useState<boolean>(false);\r\n    \r\n    return (\r\n        <svg \r\n            xmlns=\"http://www.w3.org/2000/svg\" \r\n            className={`${styles} ${includeHovering && isHovered && \"text-gray-500\"}`} \r\n            fill=\"none\" \r\n            viewBox=\"0 0 24 24\" \r\n            stroke=\"currentColor\" \r\n            strokeWidth={2}\r\n            onMouseEnter={() => setIsHovered(true)}\r\n            onMouseLeave={() => setIsHovered(false)}\r\n        >\r\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z\" />\r\n        </svg>\r\n    )\r\n}\r\n\r\nexport default Heart","import React from 'react'\r\n\r\nconst Smile: React.FC<{ styles: string }> = ({ styles }) => {\r\n    return (\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" className={styles} fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" strokeWidth={2}>\r\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M14.828 14.828a4 4 0 01-5.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\r\n        </svg>\r\n    )\r\n}\r\n\r\nexport default Smile"],"names":["AreYouSureModal","React","areYouSureEvent","profileImage","closeEvent","buttonText","questionText","additionalText","className","src","length","process","onClick","Modal","children","styles","useEffect","document","body","classList","add","remove","clickHandler","useCallback","event","stopPropagation","includes","initial","scale","animate","transition","duration","DropMenu","noAnimation","y","exit","UserLoader","imageStyles","firstTextStyles","secondTextStyles","margin","color","style","signedUser","useAppSelector","state","user","navigate","useNavigate","createChatRoom","chosenUserId","chatId","userId","reversedChatId","getDocs","collection","db","allChats","chatToNavigateTo","forEach","doc","docResult","data","firstUserId","secondUserId","RoutesTypes","setDoc","messages","lastMessage","text","lastEdited","Date","getTime","deleteChatRoom","deleteDoc","message","media","imageRef","ref","storage","deleteObject","defaultInfo","username","fromId","useState","userInfo","setUserInfo","getUser","getDoc","isOpen","xmlns","viewBox","fill","fillRule","d","clipRule","stroke","strokeWidth","strokeLinecap","strokeLinejoin","createMessage","imageUpload","wordEntering","loggedUserId","imageUrl","name","v4","uploadBytes","getDownloadURL","newMessage","from","createdAt","updateDoc","MessageForm","setWordEntering","setImageUpload","loggedUser","areEmojiOpen","setAreEmojiOpen","useParams","sendMessage","handleEmojiClick","emojiObject","prevText","emoji","handleChange","target","files","toggleEmojisOpen","prevVal","handleWordEntering","value","addHeart","Smile","pickerStyle","width","height","onEmojiClick","type","placeholder","onChange","onKeyDown","console","log","key","split","some","letter","Heart","includeHovering","htmlFor","id","accept","image","scrollRef","useRef","isImageModalOpen","setIsImageModalOpen","current","scrollIntoView","navigateToProfile","openImageModal","closeImageModal","post","useUserInfo","navigateToUsersProfile","navigateToPostProfile","borderRadius","to","ProfileRoutes","postId","messagesToRender","useMemo","map","secondUser","isDeleteModalOpen","setIsDeleteModalOpen","useChatRoom","openDeleteModal","closeDeleteModal","fullName","initialUser","setSecondUser","setMessages","getUserAndMessages","uids","dataBaseUser","onSnapshot","chatData","isInfoOpen","setIsInfoOpen","useUserAndMessages","toggleInfoOpen","isHovered","setIsHovered","onMouseEnter","onMouseLeave"],"sourceRoot":""}