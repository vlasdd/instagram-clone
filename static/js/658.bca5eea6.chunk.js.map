{"version":3,"file":"static/js/658.bca5eea6.chunk.js","mappings":"8IAWMA,EAAkDC,EAAAA,MAAW,YAO5D,IANHC,EAME,EANFA,gBACAC,EAKE,EALFA,aACAC,EAIE,EAJFA,WACAC,EAGE,EAHFA,WACAC,EAEE,EAFFA,aACAC,EACE,EADFA,eAEA,OACI,iBAAKC,UAAU,gDAAf,WACI,gBAAKA,UAAS,2DAAsDD,EAAiB,YAAc,aAAnG,UACI,gBACIE,IAAKN,EAAaO,OAASP,EAAeQ,mDAC1CH,UAAU,qDAGlB,eAAGA,UAAS,mBAAcD,GAAkB,QAA5C,UAAuDD,EAAvD,OAEIC,GACI,cAAGC,UAAU,oDAAb,SAAkED,IAClE,MAER,mBACIC,UAAU,0FACVI,QAASV,EAFb,SAIKG,KAEL,mBACIG,UAAU,kEACVI,QAASR,EAFb,0BAUZ,O,mMCkDA,EAzFuDH,EAAAA,MAAW,YAAmD,IAAhDE,EAA+C,EAA/CA,aAAcU,EAAiC,EAAjCA,SAAUC,EAAuB,EAAvBA,SAAUC,EAAa,EAAbA,OAC7FC,GAAaC,EAAAA,EAAAA,IAAe,SAAAC,GAAK,OAAIA,EAAMC,WAAWC,QACtDC,GAAWC,EAAAA,EAAAA,KAEXC,GAAWC,EAAAA,EAAAA,MACTC,GAAQC,EAAAA,EAAAA,MAARD,IAER,GAAsDE,EAAAA,EAAAA,WAAkB,GAAxE,eAAOC,EAAP,KAA4BC,EAA5B,KAEMC,GAAuBC,EAAAA,EAAAA,cAAY,SAACC,GACtCA,EAAMC,kBACNJ,GAAuB,KACxB,IAEGK,GAAoBH,EAAAA,EAAAA,cAAY,SAACC,GACnCA,EAAMC,kBACNZ,GAASc,EAAAA,EAAAA,GAAe,CAAEpB,OAAAA,EAAQU,IAAKA,OACxC,CAACV,EAAQU,IAENvB,GAAkB6B,EAAAA,EAAAA,cAAY,WAChCF,GAAuB,GACvBR,GAASe,EAAAA,EAAAA,GAAoB,CAAErB,OAAAA,EAAQU,IAAKA,OAC7C,CAACV,EAAQU,IAENY,GAAoBN,EAAAA,EAAAA,cAAY,WAClCR,EAASe,EAAAA,EAAAA,UAAwBvB,KAClC,CAACA,IAEEwB,GAAqBR,EAAAA,EAAAA,cAAY,WACnCF,GAAuB,KACxB,IAEH,OACI,iBAAKrB,UAAU,mEAAf,WACI,oBACIA,UAAU,mDACVI,QAASyB,EAFb,WAII,gBACI5B,IACIN,EAAaO,OACTP,EACAQ,mDAERH,UAAU,yCAEd,iBAAKA,UAAU,4BAAf,WACI,cAAGA,UAAU,sDAAb,SAAoEK,KACpE,cAAGL,UAAU,0CAAb,SAAwDM,KACxD,cAAGN,UAAU,wBAAb,2BAIJO,IAAWC,EAAWD,QAAWC,EAAWD,OAAOL,OAE/CM,EAAWwB,UAAUC,MAAK,SAAAC,GAAI,OAAIA,EAAK3B,SAAWA,MAC9C,mBACIP,UAAU,6DACVI,QAASkB,EAFb,wBAMA,mBACItB,UAAU,2FACVI,QAASsB,EAFb,oBARJ,KAgBJN,GACI,SAACe,EAAA,EAAD,CACIvC,WAAYmC,EACZK,OAAO,mBAFX,UAII,SAAC5C,EAAA,EAAD,CACIE,gBAAiBA,EACjBC,aAAcA,EACdC,WAAYmC,EACZjC,aAAY,mBAAcO,GAC1BR,WAAW,eAGnB,W,iDCxDpB,EA3B2C,WACvC,IAAMW,GAAaC,EAAAA,EAAAA,IAAe,SAAAC,GAAK,OAAIA,EAAMC,WAAWC,QAC5D,GAAsCO,EAAAA,EAAAA,UAAsB,IAA5D,eAAOkB,EAAP,KAAoBC,EAApB,KAsBA,OApBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAc,mCAAG,iGACfC,GAAWC,EAAAA,EAAAA,IAAWC,EAAAA,GAAI,SAC1BC,GAAIC,EAAAA,EAAAA,IAAMJ,GAAUK,EAAAA,EAAAA,IAAM,WAAY,KAAM,KAF7B,UAGQC,EAAAA,EAAAA,IAAQH,GAHhB,OAGfI,EAHe,OAGoBC,KAAKC,KAAI,SAAAC,GAAG,OAAIA,EAAIjB,UAEvDkB,EAAQJ,EACXK,QAAO,SAAAzC,GAAI,OACVA,EAAKL,SAAWC,EAAWD,QAC3BC,EAAWwB,UAAUsB,OAAM,SAAAC,GAAG,OAAIA,EAAIhD,SAAWK,EAAKL,aAEvDiD,MAAK,SAACC,EAAGC,GAAJ,MAAU,GAAMC,KAAKC,YAC1BC,MAAM,EApBU,IAsBnBvB,EAAec,GAbM,2CAAH,qDAgBpBZ,MACC,IAEIH,GCIX,EAhCyB5C,EAAAA,MAAW,WAClC,IAAM4C,EAAcyB,IAEdV,GAAQW,EAAAA,EAAAA,UAAQ,kBAAM1B,EAAYa,KAAI,SAAAhB,GAAI,OAC9C,mBAAC,GAAD,kBACMA,GADN,IAEE8B,IAAK9B,EAAK3B,eAEV,CAAC8B,IAEL,OACmB,IAAjBe,EAAMlD,QACJ,SAAC+D,EAAA,EAAD,KACA,iCACE,iBAAKjE,UAAU,kCAAf,WACE,SAACkE,EAAA,EAAD,KACA,iBAAKlE,UAAU,2GAAf,WACE,gBAAKA,UAAU,0FAAf,wBAGA,gBAAKA,UAAU,0CAAf,SACGoD,WAIP,gBAAKpD,UAAU,wFAAf","sources":["components/modal/AreYouSureModal.tsx","pages/people/components/PersonSuggestion.tsx","pages/people/hooks/useSuggestions.ts","pages/people/People.tsx"],"sourcesContent":["import React from 'react'\r\n\r\ntype AreYouSureModalProps = {\r\n    areYouSureEvent: () => void\r\n    profileImage: string\r\n    closeEvent: () => void\r\n    buttonText: string\r\n    questionText: string\r\n    additionalText?: string\r\n}\r\n\r\nconst AreYouSureModal: React.FC<AreYouSureModalProps> = React.memo(({ \r\n    areYouSureEvent, \r\n    profileImage, \r\n    closeEvent, \r\n    buttonText, \r\n    questionText, \r\n    additionalText \r\n}) => {\r\n    return (\r\n        <div className=\"h-full w-full flex flex-col items-center z-50\">\r\n            <div className={`w-full h-[100px] flex items-start justify-center ${additionalText ? \"mt-3 mb-2\" : \"mt-6 mb-4\"}`}>\r\n                <img\r\n                    src={profileImage.length ? profileImage : process.env.PUBLIC_URL + \"/images/default-avatar-image.jpg\"}\r\n                    className=\"rounded-full h-[100px] w-[100px] object-cover\"\r\n                />\r\n            </div>\r\n            <p className={`text-sm ${!additionalText && \"mb-6\"}`}>{questionText}?</p>\r\n            {\r\n                additionalText ?\r\n                    <p className=\"text-gray-400 text-sm w-3/4 text-center mb-3 mt-1\">{additionalText}</p> :\r\n                    null\r\n            }\r\n            <button\r\n                className=\"w-full h-12 border-t-2 flex items-center justify-center text-rose-600 font-bold text-sm\"\r\n                onClick={areYouSureEvent}\r\n            >\r\n                {buttonText}\r\n            </button>\r\n            <button\r\n                className=\"w-full h-12 border-t-2 flex items-center justify-center text-sm\"\r\n                onClick={closeEvent}\r\n            >\r\n                Cancel\r\n            </button>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default AreYouSureModal","import React, { useCallback, useState } from 'react';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport RoutesTypes from 'constants/routes-types';\r\nimport { useAppDispatch, useAppSelector } from 'redux-setup/hooks';\r\nimport UserSuggestionType from 'types/userSuggestionType';\r\nimport Modal from 'components/modal/Modal';\r\nimport AreYouSureModal from 'components/modal/AreYouSureModal';\r\nimport addToFollowing from \"redux-setup/features/signed-user/thunks/addToFollowing\";\r\nimport removeFromFollowing from \"redux-setup/features/signed-user/thunks/removeFromFollowing\";\r\n\r\nconst PersonSuggestion: React.FC<UserSuggestionType> = React.memo(({ profileImage, username, fullName, userId }) => {\r\n    const loggedUser = useAppSelector(state => state.signedUser.user);\r\n    const dispatch = useAppDispatch();\r\n    \r\n    const navigate = useNavigate();\r\n    const { uid } = useParams();\r\n\r\n    const [isUnfollowModalOpen, setIsUnfollowModalOpen] = useState<boolean>(false);\r\n\r\n    const handleFollowingClick = useCallback((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        event.stopPropagation();\r\n        setIsUnfollowModalOpen(true);\r\n    }, [])\r\n\r\n    const handleFollowClick = useCallback((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        event.stopPropagation();\r\n        dispatch(addToFollowing({ userId, uid: uid as string }));\r\n    }, [userId, uid])\r\n\r\n    const areYouSureEvent = useCallback(() => {\r\n        setIsUnfollowModalOpen(false)\r\n        dispatch(removeFromFollowing({ userId, uid: uid as string }))\r\n    }, [userId, uid])\r\n\r\n    const navigateToProfile = useCallback(() => {\r\n        navigate(RoutesTypes.DASHBOARD + userId)\r\n    }, [userId])\r\n\r\n    const closeUnfollowModal = useCallback(() => {\r\n        setIsUnfollowModalOpen(false)\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"flex w-full h-13 mb-1 px-2 justify-between items-center my-[4px]\">\r\n            <button \r\n                className=\"w-full h-full py-[0.5px] gap-2 flex items-center\"\r\n                onClick={navigateToProfile}\r\n            >\r\n                <img\r\n                    src={\r\n                        profileImage.length ?\r\n                            profileImage :\r\n                            process.env.PUBLIC_URL + \"/images/default-avatar-image.jpg\"\r\n                    }\r\n                    className=\"h-12 w-12 rounded-full object-cover\"\r\n                />\r\n                <div className=\"flex flex-col items-start\">\r\n                    <p className=\"font-medium text-sm tracking-wide whitespace-nowrap\">{username}</p>\r\n                    <p className=\"text-gray-400 text-sm whitespace-nowrap\">{fullName}</p>\r\n                    <p className=\"text-gray-400 text-xs\">Popular</p>\r\n                </div>\r\n            </button>\r\n            {\r\n                userId === loggedUser.userId || !loggedUser.userId.length ?\r\n                    null :\r\n                    loggedUser.following.some(data => data.userId === userId) ?\r\n                        <button\r\n                            className=\"h-7 w-28 rounded border text-sm font-medium cursor-pointer\"\r\n                            onClick={handleFollowingClick}\r\n                        >\r\n                            Following\r\n                        </button> :\r\n                        <button\r\n                            className=\"h-7 w-20 bg-blue-500 font-medium text-white rounded cursor-pointer text-sm tracking-wide\"\r\n                            onClick={handleFollowClick}\r\n                        >\r\n                            Follow\r\n                        </button>\r\n            }\r\n            {\r\n                isUnfollowModalOpen ?\r\n                    <Modal\r\n                        closeEvent={closeUnfollowModal}\r\n                        styles=\"h-72 top-[26.5%]\"\r\n                    >\r\n                        <AreYouSureModal\r\n                            areYouSureEvent={areYouSureEvent}\r\n                            profileImage={profileImage}\r\n                            closeEvent={closeUnfollowModal}\r\n                            questionText={`Unfollow ${username}`}\r\n                            buttonText=\"Unfollow\"\r\n                        />\r\n                    </Modal> :\r\n                    null\r\n            }\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default PersonSuggestion","import { db } from \"firebase-setup/firebaseConfig\";\r\nimport { collection, getDocs, query, where } from \"firebase/firestore\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useAppSelector } from \"redux-setup/hooks\";\r\nimport UserState from \"types/userStateType\";\r\n\r\nconst SUGGESTIONS_AMOUNT = 30;\r\n\r\ntype UseSuggestionsType = () => UserState[]\r\n\r\nconst useSuggestions: UseSuggestionsType = () => {\r\n    const loggedUser = useAppSelector(state => state.signedUser.user);\r\n    const [suggestions, setSuggestions] = useState<UserState[]>([]);\r\n\r\n    useEffect(() => {\r\n      const getSuggestions = async () => {\r\n        const usersRef = collection(db, \"users\");\r\n        const q = query(usersRef, where(\"username\", \">=\", \"\"));\r\n        const querySnapshot = (await getDocs(q)).docs.map(doc => doc.data());\r\n  \r\n        const users = querySnapshot\r\n          .filter(user =>\r\n            user.userId !== loggedUser.userId &&\r\n            loggedUser.following.every(fol => fol.userId !== user.userId)\r\n          )\r\n          .sort((a, b) => 0.5 - Math.random())\r\n          .slice(0, SUGGESTIONS_AMOUNT) as UserState[];\r\n  \r\n        setSuggestions(users);\r\n      }\r\n  \r\n      getSuggestions();\r\n    }, [])\r\n\r\n    return suggestions\r\n}\r\n\r\nexport default useSuggestions;","import Header from 'components/header/Header'\r\nimport Loading from 'pages/loading/Loading'\r\nimport React, { useMemo } from 'react'\r\nimport PersonSuggestion from './components/PersonSuggestion'\r\nimport useSuggestions from './hooks/useSuggestions'\r\n\r\nconst People: React.FC = React.memo(() => {\r\n  const suggestions = useSuggestions();\r\n\r\n  const users = useMemo(() => suggestions.map(data => (\r\n    <PersonSuggestion\r\n      {...data}\r\n      key={data.userId}\r\n    />\r\n  )), [suggestions])\r\n\r\n  return (\r\n    users.length === 0 ?\r\n      <Loading /> :\r\n      <>\r\n        <div className=\"back flex flex-col items-center\">\r\n          <Header />\r\n          <div className=\"min-h-[calc(100vh-60px)] w-full max-w-[550px] bg-blue-700 flex flex-col items-center back sm:pt-16 pb-16\">\r\n            <div className=\"w-full flex justify-start font-medium h-8 flex items-center bg-white sm:bg-inherit px-4\">\r\n              Suggested\r\n            </div>\r\n            <div className=\"w-full flex flex-col bg-white py-2 px-1\">\r\n              {users}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"flex w-full fixed bottom-3 justify-center back text-xs text-gray-300 font-medium back\">\r\n          © 2022 INSTAGRAM FROM META\r\n        </div>\r\n      </>\r\n  )\r\n})\r\n\r\nexport default People"],"names":["AreYouSureModal","React","areYouSureEvent","profileImage","closeEvent","buttonText","questionText","additionalText","className","src","length","process","onClick","username","fullName","userId","loggedUser","useAppSelector","state","signedUser","user","dispatch","useAppDispatch","navigate","useNavigate","uid","useParams","useState","isUnfollowModalOpen","setIsUnfollowModalOpen","handleFollowingClick","useCallback","event","stopPropagation","handleFollowClick","addToFollowing","removeFromFollowing","navigateToProfile","RoutesTypes","closeUnfollowModal","following","some","data","Modal","styles","suggestions","setSuggestions","useEffect","getSuggestions","usersRef","collection","db","q","query","where","getDocs","querySnapshot","docs","map","doc","users","filter","every","fol","sort","a","b","Math","random","slice","useSuggestions","useMemo","key","Loading","Header"],"sourceRoot":""}